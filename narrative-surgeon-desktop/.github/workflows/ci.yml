name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION_MATRIX: '[20, 22]'
  RUST_TOOLCHAIN: stable

jobs:
  # Job 1: Code Quality and Linting
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: 'narrative-surgeon-desktop/package-lock.json'

      - name: Install dependencies
        working-directory: narrative-surgeon-desktop
        run: npm ci

      - name: Run ESLint
        working-directory: narrative-surgeon-desktop
        run: npm run lint

      - name: Run TypeScript check
        working-directory: narrative-surgeon-desktop
        run: npx tsc --noEmit

      - name: Check formatting (Prettier)
        working-directory: narrative-surgeon-desktop
        run: npx prettier --check "src/**/*.{ts,tsx,js,jsx,json,css,md}"

      - name: Run dependency audit
        working-directory: narrative-surgeon-desktop
        run: npm audit --audit-level moderate

  # Job 2: Frontend Tests
  frontend-tests:
    name: Frontend Tests (Node ${{ matrix.node }})
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: code-quality
    
    strategy:
      matrix:
        node: [20, 22]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'
          cache-dependency-path: 'narrative-surgeon-desktop/package-lock.json'

      - name: Install dependencies
        working-directory: narrative-surgeon-desktop
        run: npm ci

      - name: Run diagnosis
        working-directory: narrative-surgeon-desktop
        run: npm run diagnose:test || true

      - name: Run unit tests
        working-directory: narrative-surgeon-desktop
        run: npm run test:unit
        env:
          CI: true

      - name: Run integration tests
        working-directory: narrative-surgeon-desktop
        run: npm run test:integration || true
        env:
          CI: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-node-${{ matrix.node }}
          path: |
            narrative-surgeon-desktop/coverage/
            narrative-surgeon-desktop/test-results/
          retention-days: 7

  # Job 3: Build Tests
  build-tests:
    name: Build Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: code-quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: 'narrative-surgeon-desktop/package-lock.json'

      - name: Install dependencies
        working-directory: narrative-surgeon-desktop
        run: npm ci

      - name: Build Next.js application
        working-directory: narrative-surgeon-desktop
        run: npm run build
        env:
          NODE_ENV: production

      - name: Check build output
        working-directory: narrative-surgeon-desktop
        run: |
          echo "Checking build artifacts..."
          ls -la .next/
          echo "Build size report:"
          du -sh .next/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            narrative-surgeon-desktop/.next/
            !narrative-surgeon-desktop/.next/cache/
          retention-days: 3

  # Job 4: Rust/Tauri Backend Tests
  backend-tests:
    name: Backend Tests (Rust)
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    needs: code-quality
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          components: clippy, rustfmt

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: narrative-surgeon-desktop/src-tauri

      - name: Check Rust formatting
        working-directory: narrative-surgeon-desktop/src-tauri
        run: cargo fmt --all -- --check

      - name: Run Clippy
        working-directory: narrative-surgeon-desktop/src-tauri
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run Rust tests
        working-directory: narrative-surgeon-desktop/src-tauri
        run: cargo test --verbose

      - name: Check Rust build
        working-directory: narrative-surgeon-desktop/src-tauri
        run: cargo check --verbose

  # Job 5: E2E Tests (only on main/develop)
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [frontend-tests, build-tests]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: 'narrative-surgeon-desktop/package-lock.json'

      - name: Install dependencies
        working-directory: narrative-surgeon-desktop
        run: npm ci

      - name: Install Playwright browsers
        working-directory: narrative-surgeon-desktop
        run: npx playwright install --with-deps

      - name: Build application
        working-directory: narrative-surgeon-desktop
        run: npm run build

      - name: Run E2E tests
        working-directory: narrative-surgeon-desktop
        run: npm run test:e2e
        env:
          CI: true

      - name: Upload E2E artifacts
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-artifacts
          path: |
            narrative-surgeon-desktop/playwright/test-results/
            narrative-surgeon-desktop/playwright/screenshots/
            narrative-surgeon-desktop/playwright/videos/
          retention-days: 7

  # Job 6: Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: code-quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: 'narrative-surgeon-desktop/package-lock.json'

      - name: Install dependencies
        working-directory: narrative-surgeon-desktop
        run: npm ci

      - name: Run npm audit
        working-directory: narrative-surgeon-desktop
        run: npm audit --audit-level high

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, typescript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Run Semgrep security scan
        uses: semgrep/semgrep-action@v1
        with:
          publishToken: ${{ secrets.SEMGREP_TOKEN }}
        env:
          SEMGREP_RULES: >-
            p/security-audit
            p/secrets
            p/typescript
        continue-on-error: true

  # Job 7: Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: build-tests
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: 'narrative-surgeon-desktop/package-lock.json'

      - name: Install dependencies
        working-directory: narrative-surgeon-desktop
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: narrative-surgeon-desktop/

      - name: Run performance tests
        working-directory: narrative-surgeon-desktop
        run: |
          echo "Running performance test suite..."
          node src/test/PerformanceTestSuite.ts || true

      - name: Bundle size analysis
        working-directory: narrative-surgeon-desktop
        run: |
          echo "Analyzing bundle sizes..."
          npx next build --profile
          npx @next/bundle-analyzer

  # Job 8: Golden Tests (Critical Path)
  golden-tests:
    name: Golden Tests (Node ${{ matrix.node }})
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [frontend-tests, backend-tests]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    strategy:
      matrix:
        node: [20, 22]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'
          cache-dependency-path: 'narrative-surgeon-desktop/package-lock.json'

      - name: Install dependencies
        working-directory: narrative-surgeon-desktop
        run: npm ci

      - name: Run golden tests (Phase 1)
        working-directory: narrative-surgeon-desktop
        run: |
          node scripts/run-golden-phase1.mjs || (
            echo "Golden tests failed - collecting artifacts"
            mkdir -p artifacts
            cp -r .golden_out artifacts/ 2>/dev/null || true
            cp -r test-results artifacts/ 2>/dev/null || true
            ls -la artifacts/
            exit 1
          )

      - name: Upload golden test failures
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: golden-failures-node-${{ matrix.node }}
          path: artifacts/
          retention-days: 14

      - name: Create golden test report
        if: always()
        working-directory: narrative-surgeon-desktop
        run: |
          echo "## Golden Test Report (Node ${{ matrix.node }})" >> $GITHUB_STEP_SUMMARY
          echo "Status: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          if [ -f .golden_out/report.json ]; then
            echo "Test results:" >> $GITHUB_STEP_SUMMARY
            cat .golden_out/report.json >> $GITHUB_STEP_SUMMARY
          fi

  # Job 9: Final Status Check
  ci-status:
    name: CI Status Check
    runs-on: ubuntu-latest
    needs: [code-quality, frontend-tests, backend-tests, build-tests, security-scan, golden-tests]
    if: always()

    steps:
      - name: Check all jobs status
        run: |
          echo "CI Pipeline Status Summary:"
          echo "Code Quality: ${{ needs.code-quality.result }}"
          echo "Frontend Tests: ${{ needs.frontend-tests.result }}"
          echo "Backend Tests: ${{ needs.backend-tests.result }}"
          echo "Build Tests: ${{ needs.build-tests.result }}"
          echo "Security Scan: ${{ needs.security-scan.result }}"
          echo "Golden Tests: ${{ needs.golden-tests.result }}"
          
          if [[ "${{ needs.code-quality.result }}" != "success" ]] || \
             [[ "${{ needs.frontend-tests.result }}" != "success" ]] || \
             [[ "${{ needs.backend-tests.result }}" != "success" ]] || \
             [[ "${{ needs.build-tests.result }}" != "success" ]] || \
             [[ "${{ needs.security-scan.result }}" != "success" ]] || \
             [[ "${{ needs.golden-tests.result }}" != "success" ]]; then
            echo "❌ CI Pipeline Failed"
            exit 1
          else
            echo "✅ CI Pipeline Passed"
          fi

      - name: Report to PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ needs.golden-tests.result }}' === 'success' ? '✅ Passed' : '❌ Failed';
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## CI Pipeline ${status}\n\nAll tests and quality checks have been completed.`
            });
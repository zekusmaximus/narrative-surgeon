name: Code Quality & Standards

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: 20
  RUST_TOOLCHAIN: stable

jobs:
  # Job 1: TypeScript and ESLint Analysis
  typescript-lint:
    name: TypeScript & ESLint
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'narrative-surgeon-desktop/package-lock.json'

      - name: Install dependencies
        working-directory: narrative-surgeon-desktop
        run: npm ci

      - name: Run TypeScript check
        working-directory: narrative-surgeon-desktop
        run: npx tsc --noEmit --incremental false
        continue-on-error: true

      - name: Run ESLint
        working-directory: narrative-surgeon-desktop
        run: |
          npx eslint . --ext .ts,.tsx,.js,.jsx \
            --format=json --output-file=eslint-report.json || true
          npx eslint . --ext .ts,.tsx,.js,.jsx

      - name: Upload ESLint report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: eslint-report
          path: narrative-surgeon-desktop/eslint-report.json
          retention-days: 7

  # Job 2: Code Formatting Check
  formatting:
    name: Code Formatting (Prettier)
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'narrative-surgeon-desktop/package-lock.json'

      - name: Install dependencies
        working-directory: narrative-surgeon-desktop
        run: npm ci

      - name: Check Prettier formatting
        working-directory: narrative-surgeon-desktop
        run: |
          echo "Checking code formatting with Prettier..."
          npx prettier --check "src/**/*.{ts,tsx,js,jsx,json,css,md}" || (
            echo "❌ Code formatting issues found!"
            echo "💡 Run 'npm run format' to fix formatting issues"
            npx prettier --check "src/**/*.{ts,tsx,js,jsx,json,css,md}" --list-different
            exit 1
          )

      - name: Generate formatting report
        if: failure()
        working-directory: narrative-surgeon-desktop
        run: |
          echo "# Formatting Issues" > formatting-report.md
          echo "" >> formatting-report.md
          echo "The following files have formatting issues:" >> formatting-report.md
          echo "" >> formatting-report.md
          npx prettier --check "src/**/*.{ts,tsx,js,jsx,json,css,md}" --list-different | \
            sed 's/^/- /' >> formatting-report.md

      - name: Upload formatting report
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: formatting-report
          path: narrative-surgeon-desktop/formatting-report.md
          retention-days: 7

  # Job 3: Rust Code Quality
  rust-quality:
    name: Rust Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          components: clippy, rustfmt

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: narrative-surgeon-desktop/src-tauri

      - name: Check Rust formatting
        working-directory: narrative-surgeon-desktop/src-tauri
        run: |
          echo "Checking Rust code formatting..."
          cargo fmt --all -- --check || (
            echo "❌ Rust formatting issues found!"
            echo "💡 Run 'cargo fmt' to fix formatting issues"
            exit 1
          )

      - name: Run Clippy linting
        working-directory: narrative-surgeon-desktop/src-tauri
        run: |
          echo "Running Clippy analysis..."
          cargo clippy --all-targets --all-features -- \
            -D warnings \
            -W clippy::pedantic \
            -W clippy::nursery \
            -A clippy::module_name_repetitions \
            -A clippy::too_many_lines

      - name: Check for unused dependencies
        working-directory: narrative-surgeon-desktop/src-tauri
        run: |
          echo "Checking for unused dependencies..."
          cargo install cargo-udeps --locked || true
          cargo +nightly udeps || true

  # Job 4: Dependency Analysis
  dependency-analysis:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'narrative-surgeon-desktop/package-lock.json'

      - name: Install dependencies
        working-directory: narrative-surgeon-desktop
        run: npm ci

      - name: Check for outdated packages
        working-directory: narrative-surgeon-desktop
        run: |
          echo "Checking for outdated npm packages..."
          npm outdated --json > outdated-packages.json || true
          cat outdated-packages.json

      - name: Analyze bundle size
        working-directory: narrative-surgeon-desktop
        run: |
          echo "Analyzing bundle size..."
          npm run build
          du -sh .next/ || true
          
          # Check for large dependencies
          echo "Large dependencies analysis:"
          npx webpack-bundle-analyzer .next/static/chunks/*.js --mode=static --report=bundle-report.html --no-open || true

      - name: Check for duplicate dependencies
        working-directory: narrative-surgeon-desktop
        run: |
          echo "Checking for duplicate dependencies..."
          npx npm-check-duplicates || true

      - name: Upload dependency reports
        uses: actions/upload-artifact@v4
        with:
          name: dependency-analysis
          path: |
            narrative-surgeon-desktop/outdated-packages.json
            narrative-surgeon-desktop/bundle-report.html
          retention-days: 7

  # Job 5: Code Complexity Analysis
  complexity-analysis:
    name: Code Complexity Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'narrative-surgeon-desktop/package-lock.json'

      - name: Install dependencies
        working-directory: narrative-surgeon-desktop
        run: npm ci

      - name: Install complexity analysis tools
        run: |
          npm install -g jscpd@latest complexity-report@latest

      - name: Run code duplication analysis
        working-directory: narrative-surgeon-desktop
        run: |
          echo "Running code duplication analysis..."
          npx jscpd src/ --output ./code-duplication-report --format html,json || true

      - name: Run complexity analysis
        working-directory: narrative-surgeon-desktop
        run: |
          echo "Running complexity analysis..."
          find src -name "*.ts" -o -name "*.tsx" | head -20 | while read file; do
            echo "Analyzing: $file"
            complexity-report "$file" || true
          done > complexity-report.txt

      - name: Upload complexity reports
        uses: actions/upload-artifact@v4
        with:
          name: complexity-analysis
          path: |
            narrative-surgeon-desktop/code-duplication-report/
            narrative-surgeon-desktop/complexity-report.txt
          retention-days: 7

  # Job 6: Performance & Size Analysis
  performance-analysis:
    name: Performance Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'narrative-surgeon-desktop/package-lock.json'

      - name: Install dependencies
        working-directory: narrative-surgeon-desktop
        run: npm ci

      - name: Build for performance analysis
        working-directory: narrative-surgeon-desktop
        run: |
          npm run build
          
          # Analyze build performance
          echo "Build analysis:"
          echo "Total build size:"
          du -sh .next/
          echo ""
          echo "JavaScript bundle sizes:"
          find .next/static/chunks -name "*.js" -exec du -h {} \; | sort -hr | head -10

      - name: Run bundle analyzer
        working-directory: narrative-surgeon-desktop
        run: |
          # Generate bundle analysis
          echo "Generating bundle analysis..."
          npx next build --profile || true

      - name: Check Core Web Vitals readiness
        working-directory: narrative-surgeon-desktop
        run: |
          echo "Checking for Core Web Vitals optimization..."
          
          # Check for common performance issues
          echo "Image optimization check:"
          find src -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" | wc -l
          
          echo "Font loading check:"
          grep -r "font-display" src/ || echo "Consider adding font-display: swap for custom fonts"

  # Job 7: Documentation Quality
  documentation-quality:
    name: Documentation Quality
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check documentation completeness
        run: |
          echo "Documentation quality check:"
          
          # Check for README files
          echo "README files:"
          find . -name "README*" -type f
          
          # Check for documentation in code
          echo "JSDoc coverage check:"
          find narrative-surgeon-desktop/src -name "*.ts" -o -name "*.tsx" | \
            xargs grep -L "/**" | head -10 | \
            xargs -I {} echo "Missing JSDoc: {}"

      - name: Markdown linting
        run: |
          # Install markdownlint
          npm install -g markdownlint-cli2
          
          echo "Running markdown linting..."
          markdownlint-cli2 "**/*.md" || true

  # Job 8: Quality Summary
  quality-summary:
    name: Quality Summary
    runs-on: ubuntu-latest
    needs: [typescript-lint, formatting, rust-quality, dependency-analysis, complexity-analysis, performance-analysis, documentation-quality]
    if: always()

    steps:
      - name: Download all quality reports
        uses: actions/download-artifact@v4
        with:
          path: quality-reports
        continue-on-error: true

      - name: Generate quality summary
        run: |
          echo "# Code Quality Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Results Overview" >> $GITHUB_STEP_SUMMARY
          echo "- TypeScript & ESLint: ${{ needs.typescript-lint.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Code Formatting: ${{ needs.formatting.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Rust Quality: ${{ needs.rust-quality.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Dependency Analysis: ${{ needs.dependency-analysis.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Complexity Analysis: ${{ needs.complexity-analysis.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Performance Analysis: ${{ needs.performance-analysis.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Documentation Quality: ${{ needs.documentation-quality.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Calculate overall score
          SUCCESS_COUNT=0
          TOTAL_COUNT=7
          
          for result in "${{ needs.typescript-lint.result }}" "${{ needs.formatting.result }}" "${{ needs.rust-quality.result }}" "${{ needs.dependency-analysis.result }}" "${{ needs.complexity-analysis.result }}" "${{ needs.performance-analysis.result }}" "${{ needs.documentation-quality.result }}"; do
            if [ "$result" = "success" ]; then
              SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
            fi
          done
          
          SCORE=$((SUCCESS_COUNT * 100 / TOTAL_COUNT))
          echo "## Overall Quality Score: ${SCORE}%" >> $GITHUB_STEP_SUMMARY
          
          if [ $SCORE -ge 90 ]; then
            echo "🟢 Excellent code quality!" >> $GITHUB_STEP_SUMMARY
          elif [ $SCORE -ge 70 ]; then
            echo "🟡 Good code quality with room for improvement" >> $GITHUB_STEP_SUMMARY
          else
            echo "🔴 Code quality needs attention" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('Code Quality Report')
            );
            
            const results = {
              typescript: '${{ needs.typescript-lint.result }}',
              formatting: '${{ needs.formatting.result }}',
              rust: '${{ needs.rust-quality.result }}',
              deps: '${{ needs.dependency-analysis.result }}',
              complexity: '${{ needs.complexity-analysis.result }}',
              performance: '${{ needs.performance-analysis.result }}',
              docs: '${{ needs.documentation-quality.result }}'
            };
            
            const getEmoji = (result) => result === 'success' ? '✅' : result === 'failure' ? '❌' : '⚠️';
            
            const body = `## 🔍 Code Quality Report
            
            | Check | Status |
            |-------|---------|
            | TypeScript & ESLint | ${getEmoji(results.typescript)} ${results.typescript} |
            | Code Formatting | ${getEmoji(results.formatting)} ${results.formatting} |
            | Rust Quality | ${getEmoji(results.rust)} ${results.rust} |
            | Dependencies | ${getEmoji(results.deps)} ${results.deps} |
            | Complexity | ${getEmoji(results.complexity)} ${results.complexity} |
            | Performance | ${getEmoji(results.performance)} ${results.performance} |
            | Documentation | ${getEmoji(results.docs)} ${results.docs} |
            
            Reports and artifacts are available in the workflow run.`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                comment_id: botComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }
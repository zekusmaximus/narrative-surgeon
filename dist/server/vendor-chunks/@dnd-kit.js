"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@dnd-kit";
exports.ids = ["vendor-chunks/@dnd-kit"];
exports.modules = {

/***/ "(ssr)/./node_modules/@dnd-kit/accessibility/dist/accessibility.esm.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@dnd-kit/accessibility/dist/accessibility.esm.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HiddenText: () => (/* binding */ HiddenText),\n/* harmony export */   LiveRegion: () => (/* binding */ LiveRegion),\n/* harmony export */   useAnnouncement: () => (/* binding */ useAnnouncement)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\n\nconst hiddenStyles = {\n  display: 'none'\n};\nfunction HiddenText(_ref) {\n  let {\n    id,\n    value\n  } = _ref;\n  return react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n    id: id,\n    style: hiddenStyles\n  }, value);\n}\n\nfunction LiveRegion(_ref) {\n  let {\n    id,\n    announcement,\n    ariaLiveType = \"assertive\"\n  } = _ref;\n  // Hide element visually but keep it readable by screen readers\n  const visuallyHidden = {\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    width: 1,\n    height: 1,\n    margin: -1,\n    border: 0,\n    padding: 0,\n    overflow: 'hidden',\n    clip: 'rect(0 0 0 0)',\n    clipPath: 'inset(100%)',\n    whiteSpace: 'nowrap'\n  };\n  return react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n    id: id,\n    style: visuallyHidden,\n    role: \"status\",\n    \"aria-live\": ariaLiveType,\n    \"aria-atomic\": true\n  }, announcement);\n}\n\nfunction useAnnouncement() {\n  const [announcement, setAnnouncement] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)('');\n  const announce = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(value => {\n    if (value != null) {\n      setAnnouncement(value);\n    }\n  }, []);\n  return {\n    announce,\n    announcement\n  };\n}\n\n\n//# sourceMappingURL=accessibility.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRuZC1raXQvYWNjZXNzaWJpbGl0eS9kaXN0L2FjY2Vzc2liaWxpdHkuZXNtLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQXFEOztBQUVyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSixTQUFTLDBEQUFtQjtBQUM1QjtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUywwREFBbUI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBLDBDQUEwQywrQ0FBUTtBQUNsRCxtQkFBbUIsa0RBQVc7QUFDOUI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRW1EO0FBQ25EIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXHpla2VcXFByb2plY3RzXFxuYXJyYXRpdmUtc3VyZ2Vvblxcbm9kZV9tb2R1bGVzXFxAZG5kLWtpdFxcYWNjZXNzaWJpbGl0eVxcZGlzdFxcYWNjZXNzaWJpbGl0eS5lc20uanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0JztcblxuY29uc3QgaGlkZGVuU3R5bGVzID0ge1xuICBkaXNwbGF5OiAnbm9uZSdcbn07XG5mdW5jdGlvbiBIaWRkZW5UZXh0KF9yZWYpIHtcbiAgbGV0IHtcbiAgICBpZCxcbiAgICB2YWx1ZVxuICB9ID0gX3JlZjtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGlkOiBpZCxcbiAgICBzdHlsZTogaGlkZGVuU3R5bGVzXG4gIH0sIHZhbHVlKTtcbn1cblxuZnVuY3Rpb24gTGl2ZVJlZ2lvbihfcmVmKSB7XG4gIGxldCB7XG4gICAgaWQsXG4gICAgYW5ub3VuY2VtZW50LFxuICAgIGFyaWFMaXZlVHlwZSA9IFwiYXNzZXJ0aXZlXCJcbiAgfSA9IF9yZWY7XG4gIC8vIEhpZGUgZWxlbWVudCB2aXN1YWxseSBidXQga2VlcCBpdCByZWFkYWJsZSBieSBzY3JlZW4gcmVhZGVyc1xuICBjb25zdCB2aXN1YWxseUhpZGRlbiA9IHtcbiAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgICB0b3A6IDAsXG4gICAgbGVmdDogMCxcbiAgICB3aWR0aDogMSxcbiAgICBoZWlnaHQ6IDEsXG4gICAgbWFyZ2luOiAtMSxcbiAgICBib3JkZXI6IDAsXG4gICAgcGFkZGluZzogMCxcbiAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgY2xpcDogJ3JlY3QoMCAwIDAgMCknLFxuICAgIGNsaXBQYXRoOiAnaW5zZXQoMTAwJSknLFxuICAgIHdoaXRlU3BhY2U6ICdub3dyYXAnXG4gIH07XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBpZDogaWQsXG4gICAgc3R5bGU6IHZpc3VhbGx5SGlkZGVuLFxuICAgIHJvbGU6IFwic3RhdHVzXCIsXG4gICAgXCJhcmlhLWxpdmVcIjogYXJpYUxpdmVUeXBlLFxuICAgIFwiYXJpYS1hdG9taWNcIjogdHJ1ZVxuICB9LCBhbm5vdW5jZW1lbnQpO1xufVxuXG5mdW5jdGlvbiB1c2VBbm5vdW5jZW1lbnQoKSB7XG4gIGNvbnN0IFthbm5vdW5jZW1lbnQsIHNldEFubm91bmNlbWVudF0gPSB1c2VTdGF0ZSgnJyk7XG4gIGNvbnN0IGFubm91bmNlID0gdXNlQ2FsbGJhY2sodmFsdWUgPT4ge1xuICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICBzZXRBbm5vdW5jZW1lbnQodmFsdWUpO1xuICAgIH1cbiAgfSwgW10pO1xuICByZXR1cm4ge1xuICAgIGFubm91bmNlLFxuICAgIGFubm91bmNlbWVudFxuICB9O1xufVxuXG5leHBvcnQgeyBIaWRkZW5UZXh0LCBMaXZlUmVnaW9uLCB1c2VBbm5vdW5jZW1lbnQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFjY2Vzc2liaWxpdHkuZXNtLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@dnd-kit/accessibility/dist/accessibility.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@dnd-kit/core/dist/core.esm.js":
/*!*****************************************************!*\
  !*** ./node_modules/@dnd-kit/core/dist/core.esm.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AutoScrollActivator: () => (/* binding */ AutoScrollActivator),\n/* harmony export */   DndContext: () => (/* binding */ DndContext),\n/* harmony export */   DragOverlay: () => (/* binding */ DragOverlay),\n/* harmony export */   KeyboardCode: () => (/* binding */ KeyboardCode),\n/* harmony export */   KeyboardSensor: () => (/* binding */ KeyboardSensor),\n/* harmony export */   MeasuringFrequency: () => (/* binding */ MeasuringFrequency),\n/* harmony export */   MeasuringStrategy: () => (/* binding */ MeasuringStrategy),\n/* harmony export */   MouseSensor: () => (/* binding */ MouseSensor),\n/* harmony export */   PointerSensor: () => (/* binding */ PointerSensor),\n/* harmony export */   TouchSensor: () => (/* binding */ TouchSensor),\n/* harmony export */   TraversalOrder: () => (/* binding */ TraversalOrder),\n/* harmony export */   applyModifiers: () => (/* binding */ applyModifiers),\n/* harmony export */   closestCenter: () => (/* binding */ closestCenter),\n/* harmony export */   closestCorners: () => (/* binding */ closestCorners),\n/* harmony export */   defaultAnnouncements: () => (/* binding */ defaultAnnouncements),\n/* harmony export */   defaultCoordinates: () => (/* binding */ defaultCoordinates),\n/* harmony export */   defaultDropAnimation: () => (/* binding */ defaultDropAnimationConfiguration),\n/* harmony export */   defaultDropAnimationSideEffects: () => (/* binding */ defaultDropAnimationSideEffects),\n/* harmony export */   defaultKeyboardCoordinateGetter: () => (/* binding */ defaultKeyboardCoordinateGetter),\n/* harmony export */   defaultScreenReaderInstructions: () => (/* binding */ defaultScreenReaderInstructions),\n/* harmony export */   getClientRect: () => (/* binding */ getClientRect),\n/* harmony export */   getFirstCollision: () => (/* binding */ getFirstCollision),\n/* harmony export */   getScrollableAncestors: () => (/* binding */ getScrollableAncestors),\n/* harmony export */   pointerWithin: () => (/* binding */ pointerWithin),\n/* harmony export */   rectIntersection: () => (/* binding */ rectIntersection),\n/* harmony export */   useDndContext: () => (/* binding */ useDndContext),\n/* harmony export */   useDndMonitor: () => (/* binding */ useDndMonitor),\n/* harmony export */   useDraggable: () => (/* binding */ useDraggable),\n/* harmony export */   useDroppable: () => (/* binding */ useDroppable),\n/* harmony export */   useSensor: () => (/* binding */ useSensor),\n/* harmony export */   useSensors: () => (/* binding */ useSensors)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! __barrel_optimize__?names=CSS,add,canUseDOM,findFirstFocusableNode,getEventCoordinates,getOwnerDocument,getWindow,isDocument,isHTMLElement,isKeyboardEvent,isNode,isSVGElement,isWindow,subtract,useEvent,useInterval,useIsomorphicLayoutEffect,useLatestValue,useLazyMemo,useNodeRef,usePrevious,useUniqueId!=!@dnd-kit/utilities */ \"(ssr)/__barrel_optimize__?names=CSS,add,canUseDOM,findFirstFocusableNode,getEventCoordinates,getOwnerDocument,getWindow,isDocument,isHTMLElement,isKeyboardEvent,isNode,isSVGElement,isWindow,subtract,useEvent,useInterval,useIsomorphicLayoutEffect,useLatestValue,useLazyMemo,useNodeRef,usePrevious,useUniqueId!=!./node_modules/@dnd-kit/utilities/dist/utilities.esm.js\");\n/* harmony import */ var _dnd_kit_accessibility__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @dnd-kit/accessibility */ \"(ssr)/./node_modules/@dnd-kit/accessibility/dist/accessibility.esm.js\");\n\n\n\n\nconst DndMonitorContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nfunction useDndMonitor(listener) {\n    const registerListener = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(DndMonitorContext);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useDndMonitor.useEffect\": ()=>{\n            if (!registerListener) {\n                throw new Error('useDndMonitor must be used within a children of <DndContext>');\n            }\n            const unsubscribe = registerListener(listener);\n            return unsubscribe;\n        }\n    }[\"useDndMonitor.useEffect\"], [\n        listener,\n        registerListener\n    ]);\n}\nfunction useDndMonitorProvider() {\n    const [listeners] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n        \"useDndMonitorProvider.useState\": ()=>new Set()\n    }[\"useDndMonitorProvider.useState\"]);\n    const registerListener = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useDndMonitorProvider.useCallback[registerListener]\": (listener)=>{\n            listeners.add(listener);\n            return ({\n                \"useDndMonitorProvider.useCallback[registerListener]\": ()=>listeners.delete(listener)\n            })[\"useDndMonitorProvider.useCallback[registerListener]\"];\n        }\n    }[\"useDndMonitorProvider.useCallback[registerListener]\"], [\n        listeners\n    ]);\n    const dispatch = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useDndMonitorProvider.useCallback[dispatch]\": (_ref)=>{\n            let { type, event } = _ref;\n            listeners.forEach({\n                \"useDndMonitorProvider.useCallback[dispatch]\": (listener)=>{\n                    var _listener$type;\n                    return (_listener$type = listener[type]) == null ? void 0 : _listener$type.call(listener, event);\n                }\n            }[\"useDndMonitorProvider.useCallback[dispatch]\"]);\n        }\n    }[\"useDndMonitorProvider.useCallback[dispatch]\"], [\n        listeners\n    ]);\n    return [\n        dispatch,\n        registerListener\n    ];\n}\nconst defaultScreenReaderInstructions = {\n    draggable: \"\\n    To pick up a draggable item, press the space bar.\\n    While dragging, use the arrow keys to move the item.\\n    Press space again to drop the item in its new position, or press escape to cancel.\\n  \"\n};\nconst defaultAnnouncements = {\n    onDragStart (_ref) {\n        let { active } = _ref;\n        return \"Picked up draggable item \" + active.id + \".\";\n    },\n    onDragOver (_ref2) {\n        let { active, over } = _ref2;\n        if (over) {\n            return \"Draggable item \" + active.id + \" was moved over droppable area \" + over.id + \".\";\n        }\n        return \"Draggable item \" + active.id + \" is no longer over a droppable area.\";\n    },\n    onDragEnd (_ref3) {\n        let { active, over } = _ref3;\n        if (over) {\n            return \"Draggable item \" + active.id + \" was dropped over droppable area \" + over.id;\n        }\n        return \"Draggable item \" + active.id + \" was dropped.\";\n    },\n    onDragCancel (_ref4) {\n        let { active } = _ref4;\n        return \"Dragging was cancelled. Draggable item \" + active.id + \" was dropped.\";\n    }\n};\nfunction Accessibility(_ref) {\n    let { announcements = defaultAnnouncements, container, hiddenTextDescribedById, screenReaderInstructions = defaultScreenReaderInstructions } = _ref;\n    const { announce, announcement } = (0,_dnd_kit_accessibility__WEBPACK_IMPORTED_MODULE_3__.useAnnouncement)();\n    const liveRegionId = (0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.useUniqueId)(\"DndLiveRegion\");\n    const [mounted, setMounted] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"Accessibility.useEffect\": ()=>{\n            setMounted(true);\n        }\n    }[\"Accessibility.useEffect\"], []);\n    useDndMonitor((0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"Accessibility.useDndMonitor.useMemo\": ()=>({\n                onDragStart (_ref2) {\n                    let { active } = _ref2;\n                    announce(announcements.onDragStart({\n                        active\n                    }));\n                },\n                onDragMove (_ref3) {\n                    let { active, over } = _ref3;\n                    if (announcements.onDragMove) {\n                        announce(announcements.onDragMove({\n                            active,\n                            over\n                        }));\n                    }\n                },\n                onDragOver (_ref4) {\n                    let { active, over } = _ref4;\n                    announce(announcements.onDragOver({\n                        active,\n                        over\n                    }));\n                },\n                onDragEnd (_ref5) {\n                    let { active, over } = _ref5;\n                    announce(announcements.onDragEnd({\n                        active,\n                        over\n                    }));\n                },\n                onDragCancel (_ref6) {\n                    let { active, over } = _ref6;\n                    announce(announcements.onDragCancel({\n                        active,\n                        over\n                    }));\n                }\n            })\n    }[\"Accessibility.useDndMonitor.useMemo\"], [\n        announce,\n        announcements\n    ]));\n    if (!mounted) {\n        return null;\n    }\n    const markup = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_dnd_kit_accessibility__WEBPACK_IMPORTED_MODULE_3__.HiddenText, {\n        id: hiddenTextDescribedById,\n        value: screenReaderInstructions.draggable\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_dnd_kit_accessibility__WEBPACK_IMPORTED_MODULE_3__.LiveRegion, {\n        id: liveRegionId,\n        announcement: announcement\n    }));\n    return container ? /*#__PURE__*/ (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal)(markup, container) : markup;\n}\nvar Action;\n(function(Action) {\n    Action[\"DragStart\"] = \"dragStart\";\n    Action[\"DragMove\"] = \"dragMove\";\n    Action[\"DragEnd\"] = \"dragEnd\";\n    Action[\"DragCancel\"] = \"dragCancel\";\n    Action[\"DragOver\"] = \"dragOver\";\n    Action[\"RegisterDroppable\"] = \"registerDroppable\";\n    Action[\"SetDroppableDisabled\"] = \"setDroppableDisabled\";\n    Action[\"UnregisterDroppable\"] = \"unregisterDroppable\";\n})(Action || (Action = {}));\nfunction noop() {}\nfunction useSensor(sensor, options) {\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"useSensor.useMemo\": ()=>({\n                sensor,\n                options: options != null ? options : {}\n            })\n    }[\"useSensor.useMemo\"], [\n        sensor,\n        options\n    ]);\n}\nfunction useSensors() {\n    for(var _len = arguments.length, sensors = new Array(_len), _key = 0; _key < _len; _key++){\n        sensors[_key] = arguments[_key];\n    }\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"useSensors.useMemo\": ()=>[\n                ...sensors\n            ].filter({\n                \"useSensors.useMemo\": (sensor)=>sensor != null\n            }[\"useSensors.useMemo\"])\n    }[\"useSensors.useMemo\"], [\n        ...sensors\n    ]);\n}\nconst defaultCoordinates = /*#__PURE__*/ Object.freeze({\n    x: 0,\n    y: 0\n});\n/**\r\n * Returns the distance between two points\r\n */ function distanceBetween(p1, p2) {\n    return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));\n}\nfunction getRelativeTransformOrigin(event, rect) {\n    const eventCoordinates = (0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.getEventCoordinates)(event);\n    if (!eventCoordinates) {\n        return '0 0';\n    }\n    const transformOrigin = {\n        x: (eventCoordinates.x - rect.left) / rect.width * 100,\n        y: (eventCoordinates.y - rect.top) / rect.height * 100\n    };\n    return transformOrigin.x + \"% \" + transformOrigin.y + \"%\";\n}\n/**\r\n * Sort collisions from smallest to greatest value\r\n */ function sortCollisionsAsc(_ref, _ref2) {\n    let { data: { value: a } } = _ref;\n    let { data: { value: b } } = _ref2;\n    return a - b;\n}\n/**\r\n * Sort collisions from greatest to smallest value\r\n */ function sortCollisionsDesc(_ref3, _ref4) {\n    let { data: { value: a } } = _ref3;\n    let { data: { value: b } } = _ref4;\n    return b - a;\n}\n/**\r\n * Returns the coordinates of the corners of a given rectangle:\r\n * [TopLeft {x, y}, TopRight {x, y}, BottomLeft {x, y}, BottomRight {x, y}]\r\n */ function cornersOfRectangle(_ref5) {\n    let { left, top, height, width } = _ref5;\n    return [\n        {\n            x: left,\n            y: top\n        },\n        {\n            x: left + width,\n            y: top\n        },\n        {\n            x: left,\n            y: top + height\n        },\n        {\n            x: left + width,\n            y: top + height\n        }\n    ];\n}\nfunction getFirstCollision(collisions, property) {\n    if (!collisions || collisions.length === 0) {\n        return null;\n    }\n    const [firstCollision] = collisions;\n    return property ? firstCollision[property] : firstCollision;\n}\n/**\r\n * Returns the coordinates of the center of a given ClientRect\r\n */ function centerOfRectangle(rect, left, top) {\n    if (left === void 0) {\n        left = rect.left;\n    }\n    if (top === void 0) {\n        top = rect.top;\n    }\n    return {\n        x: left + rect.width * 0.5,\n        y: top + rect.height * 0.5\n    };\n}\n/**\r\n * Returns the closest rectangles from an array of rectangles to the center of a given\r\n * rectangle.\r\n */ const closestCenter = (_ref)=>{\n    let { collisionRect, droppableRects, droppableContainers } = _ref;\n    const centerRect = centerOfRectangle(collisionRect, collisionRect.left, collisionRect.top);\n    const collisions = [];\n    for (const droppableContainer of droppableContainers){\n        const { id } = droppableContainer;\n        const rect = droppableRects.get(id);\n        if (rect) {\n            const distBetween = distanceBetween(centerOfRectangle(rect), centerRect);\n            collisions.push({\n                id,\n                data: {\n                    droppableContainer,\n                    value: distBetween\n                }\n            });\n        }\n    }\n    return collisions.sort(sortCollisionsAsc);\n};\n/**\r\n * Returns the closest rectangles from an array of rectangles to the corners of\r\n * another rectangle.\r\n */ const closestCorners = (_ref)=>{\n    let { collisionRect, droppableRects, droppableContainers } = _ref;\n    const corners = cornersOfRectangle(collisionRect);\n    const collisions = [];\n    for (const droppableContainer of droppableContainers){\n        const { id } = droppableContainer;\n        const rect = droppableRects.get(id);\n        if (rect) {\n            const rectCorners = cornersOfRectangle(rect);\n            const distances = corners.reduce((accumulator, corner, index)=>{\n                return accumulator + distanceBetween(rectCorners[index], corner);\n            }, 0);\n            const effectiveDistance = Number((distances / 4).toFixed(4));\n            collisions.push({\n                id,\n                data: {\n                    droppableContainer,\n                    value: effectiveDistance\n                }\n            });\n        }\n    }\n    return collisions.sort(sortCollisionsAsc);\n};\n/**\r\n * Returns the intersecting rectangle area between two rectangles\r\n */ function getIntersectionRatio(entry, target) {\n    const top = Math.max(target.top, entry.top);\n    const left = Math.max(target.left, entry.left);\n    const right = Math.min(target.left + target.width, entry.left + entry.width);\n    const bottom = Math.min(target.top + target.height, entry.top + entry.height);\n    const width = right - left;\n    const height = bottom - top;\n    if (left < right && top < bottom) {\n        const targetArea = target.width * target.height;\n        const entryArea = entry.width * entry.height;\n        const intersectionArea = width * height;\n        const intersectionRatio = intersectionArea / (targetArea + entryArea - intersectionArea);\n        return Number(intersectionRatio.toFixed(4));\n    } // Rectangles do not overlap, or overlap has an area of zero (edge/corner overlap)\n    return 0;\n}\n/**\r\n * Returns the rectangles that has the greatest intersection area with a given\r\n * rectangle in an array of rectangles.\r\n */ const rectIntersection = (_ref)=>{\n    let { collisionRect, droppableRects, droppableContainers } = _ref;\n    const collisions = [];\n    for (const droppableContainer of droppableContainers){\n        const { id } = droppableContainer;\n        const rect = droppableRects.get(id);\n        if (rect) {\n            const intersectionRatio = getIntersectionRatio(rect, collisionRect);\n            if (intersectionRatio > 0) {\n                collisions.push({\n                    id,\n                    data: {\n                        droppableContainer,\n                        value: intersectionRatio\n                    }\n                });\n            }\n        }\n    }\n    return collisions.sort(sortCollisionsDesc);\n};\n/**\r\n * Check if a given point is contained within a bounding rectangle\r\n */ function isPointWithinRect(point, rect) {\n    const { top, left, bottom, right } = rect;\n    return top <= point.y && point.y <= bottom && left <= point.x && point.x <= right;\n}\n/**\r\n * Returns the rectangles that the pointer is hovering over\r\n */ const pointerWithin = (_ref)=>{\n    let { droppableContainers, droppableRects, pointerCoordinates } = _ref;\n    if (!pointerCoordinates) {\n        return [];\n    }\n    const collisions = [];\n    for (const droppableContainer of droppableContainers){\n        const { id } = droppableContainer;\n        const rect = droppableRects.get(id);\n        if (rect && isPointWithinRect(pointerCoordinates, rect)) {\n            /* There may be more than a single rectangle intersecting\r\n       * with the pointer coordinates. In order to sort the\r\n       * colliding rectangles, we measure the distance between\r\n       * the pointer and the corners of the intersecting rectangle\r\n       */ const corners = cornersOfRectangle(rect);\n            const distances = corners.reduce((accumulator, corner)=>{\n                return accumulator + distanceBetween(pointerCoordinates, corner);\n            }, 0);\n            const effectiveDistance = Number((distances / 4).toFixed(4));\n            collisions.push({\n                id,\n                data: {\n                    droppableContainer,\n                    value: effectiveDistance\n                }\n            });\n        }\n    }\n    return collisions.sort(sortCollisionsAsc);\n};\nfunction adjustScale(transform, rect1, rect2) {\n    return {\n        ...transform,\n        scaleX: rect1 && rect2 ? rect1.width / rect2.width : 1,\n        scaleY: rect1 && rect2 ? rect1.height / rect2.height : 1\n    };\n}\nfunction getRectDelta(rect1, rect2) {\n    return rect1 && rect2 ? {\n        x: rect1.left - rect2.left,\n        y: rect1.top - rect2.top\n    } : defaultCoordinates;\n}\nfunction createRectAdjustmentFn(modifier) {\n    return function adjustClientRect(rect) {\n        for(var _len = arguments.length, adjustments = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n            adjustments[_key - 1] = arguments[_key];\n        }\n        return adjustments.reduce((acc, adjustment)=>({\n                ...acc,\n                top: acc.top + modifier * adjustment.y,\n                bottom: acc.bottom + modifier * adjustment.y,\n                left: acc.left + modifier * adjustment.x,\n                right: acc.right + modifier * adjustment.x\n            }), {\n            ...rect\n        });\n    };\n}\nconst getAdjustedRect = /*#__PURE__*/ createRectAdjustmentFn(1);\nfunction parseTransform(transform) {\n    if (transform.startsWith('matrix3d(')) {\n        const transformArray = transform.slice(9, -1).split(/, /);\n        return {\n            x: +transformArray[12],\n            y: +transformArray[13],\n            scaleX: +transformArray[0],\n            scaleY: +transformArray[5]\n        };\n    } else if (transform.startsWith('matrix(')) {\n        const transformArray = transform.slice(7, -1).split(/, /);\n        return {\n            x: +transformArray[4],\n            y: +transformArray[5],\n            scaleX: +transformArray[0],\n            scaleY: +transformArray[3]\n        };\n    }\n    return null;\n}\nfunction inverseTransform(rect, transform, transformOrigin) {\n    const parsedTransform = parseTransform(transform);\n    if (!parsedTransform) {\n        return rect;\n    }\n    const { scaleX, scaleY, x: translateX, y: translateY } = parsedTransform;\n    const x = rect.left - translateX - (1 - scaleX) * parseFloat(transformOrigin);\n    const y = rect.top - translateY - (1 - scaleY) * parseFloat(transformOrigin.slice(transformOrigin.indexOf(' ') + 1));\n    const w = scaleX ? rect.width / scaleX : rect.width;\n    const h = scaleY ? rect.height / scaleY : rect.height;\n    return {\n        width: w,\n        height: h,\n        top: y,\n        right: x + w,\n        bottom: y + h,\n        left: x\n    };\n}\nconst defaultOptions = {\n    ignoreTransform: false\n};\n/**\r\n * Returns the bounding client rect of an element relative to the viewport.\r\n */ function getClientRect(element, options) {\n    if (options === void 0) {\n        options = defaultOptions;\n    }\n    let rect = element.getBoundingClientRect();\n    if (options.ignoreTransform) {\n        const { transform, transformOrigin } = (0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.getWindow)(element).getComputedStyle(element);\n        if (transform) {\n            rect = inverseTransform(rect, transform, transformOrigin);\n        }\n    }\n    const { top, left, width, height, bottom, right } = rect;\n    return {\n        top,\n        left,\n        width,\n        height,\n        bottom,\n        right\n    };\n}\n/**\r\n * Returns the bounding client rect of an element relative to the viewport.\r\n *\r\n * @remarks\r\n * The ClientRect returned by this method does not take into account transforms\r\n * applied to the element it measures.\r\n *\r\n */ function getTransformAgnosticClientRect(element) {\n    return getClientRect(element, {\n        ignoreTransform: true\n    });\n}\nfunction getWindowClientRect(element) {\n    const width = element.innerWidth;\n    const height = element.innerHeight;\n    return {\n        top: 0,\n        left: 0,\n        right: width,\n        bottom: height,\n        width,\n        height\n    };\n}\nfunction isFixed(node, computedStyle) {\n    if (computedStyle === void 0) {\n        computedStyle = (0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.getWindow)(node).getComputedStyle(node);\n    }\n    return computedStyle.position === 'fixed';\n}\nfunction isScrollable(element, computedStyle) {\n    if (computedStyle === void 0) {\n        computedStyle = (0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.getWindow)(element).getComputedStyle(element);\n    }\n    const overflowRegex = /(auto|scroll|overlay)/;\n    const properties = [\n        'overflow',\n        'overflowX',\n        'overflowY'\n    ];\n    return properties.some((property)=>{\n        const value = computedStyle[property];\n        return typeof value === 'string' ? overflowRegex.test(value) : false;\n    });\n}\nfunction getScrollableAncestors(element, limit) {\n    const scrollParents = [];\n    function findScrollableAncestors(node) {\n        if (limit != null && scrollParents.length >= limit) {\n            return scrollParents;\n        }\n        if (!node) {\n            return scrollParents;\n        }\n        if ((0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.isDocument)(node) && node.scrollingElement != null && !scrollParents.includes(node.scrollingElement)) {\n            scrollParents.push(node.scrollingElement);\n            return scrollParents;\n        }\n        if (!(0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.isHTMLElement)(node) || (0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.isSVGElement)(node)) {\n            return scrollParents;\n        }\n        if (scrollParents.includes(node)) {\n            return scrollParents;\n        }\n        const computedStyle = (0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.getWindow)(element).getComputedStyle(node);\n        if (node !== element) {\n            if (isScrollable(node, computedStyle)) {\n                scrollParents.push(node);\n            }\n        }\n        if (isFixed(node, computedStyle)) {\n            return scrollParents;\n        }\n        return findScrollableAncestors(node.parentNode);\n    }\n    if (!element) {\n        return scrollParents;\n    }\n    return findScrollableAncestors(element);\n}\nfunction getFirstScrollableAncestor(node) {\n    const [firstScrollableAncestor] = getScrollableAncestors(node, 1);\n    return firstScrollableAncestor != null ? firstScrollableAncestor : null;\n}\nfunction getScrollableElement(element) {\n    if (!_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.canUseDOM || !element) {\n        return null;\n    }\n    if ((0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.isWindow)(element)) {\n        return element;\n    }\n    if (!(0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.isNode)(element)) {\n        return null;\n    }\n    if ((0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.isDocument)(element) || element === (0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.getOwnerDocument)(element).scrollingElement) {\n        return window;\n    }\n    if ((0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.isHTMLElement)(element)) {\n        return element;\n    }\n    return null;\n}\nfunction getScrollXCoordinate(element) {\n    if ((0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.isWindow)(element)) {\n        return element.scrollX;\n    }\n    return element.scrollLeft;\n}\nfunction getScrollYCoordinate(element) {\n    if ((0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.isWindow)(element)) {\n        return element.scrollY;\n    }\n    return element.scrollTop;\n}\nfunction getScrollCoordinates(element) {\n    return {\n        x: getScrollXCoordinate(element),\n        y: getScrollYCoordinate(element)\n    };\n}\nvar Direction;\n(function(Direction) {\n    Direction[Direction[\"Forward\"] = 1] = \"Forward\";\n    Direction[Direction[\"Backward\"] = -1] = \"Backward\";\n})(Direction || (Direction = {}));\nfunction isDocumentScrollingElement(element) {\n    if (!_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.canUseDOM || !element) {\n        return false;\n    }\n    return element === document.scrollingElement;\n}\nfunction getScrollPosition(scrollingContainer) {\n    const minScroll = {\n        x: 0,\n        y: 0\n    };\n    const dimensions = isDocumentScrollingElement(scrollingContainer) ? {\n        height: window.innerHeight,\n        width: window.innerWidth\n    } : {\n        height: scrollingContainer.clientHeight,\n        width: scrollingContainer.clientWidth\n    };\n    const maxScroll = {\n        x: scrollingContainer.scrollWidth - dimensions.width,\n        y: scrollingContainer.scrollHeight - dimensions.height\n    };\n    const isTop = scrollingContainer.scrollTop <= minScroll.y;\n    const isLeft = scrollingContainer.scrollLeft <= minScroll.x;\n    const isBottom = scrollingContainer.scrollTop >= maxScroll.y;\n    const isRight = scrollingContainer.scrollLeft >= maxScroll.x;\n    return {\n        isTop,\n        isLeft,\n        isBottom,\n        isRight,\n        maxScroll,\n        minScroll\n    };\n}\nconst defaultThreshold = {\n    x: 0.2,\n    y: 0.2\n};\nfunction getScrollDirectionAndSpeed(scrollContainer, scrollContainerRect, _ref, acceleration, thresholdPercentage) {\n    let { top, left, right, bottom } = _ref;\n    if (acceleration === void 0) {\n        acceleration = 10;\n    }\n    if (thresholdPercentage === void 0) {\n        thresholdPercentage = defaultThreshold;\n    }\n    const { isTop, isBottom, isLeft, isRight } = getScrollPosition(scrollContainer);\n    const direction = {\n        x: 0,\n        y: 0\n    };\n    const speed = {\n        x: 0,\n        y: 0\n    };\n    const threshold = {\n        height: scrollContainerRect.height * thresholdPercentage.y,\n        width: scrollContainerRect.width * thresholdPercentage.x\n    };\n    if (!isTop && top <= scrollContainerRect.top + threshold.height) {\n        // Scroll Up\n        direction.y = Direction.Backward;\n        speed.y = acceleration * Math.abs((scrollContainerRect.top + threshold.height - top) / threshold.height);\n    } else if (!isBottom && bottom >= scrollContainerRect.bottom - threshold.height) {\n        // Scroll Down\n        direction.y = Direction.Forward;\n        speed.y = acceleration * Math.abs((scrollContainerRect.bottom - threshold.height - bottom) / threshold.height);\n    }\n    if (!isRight && right >= scrollContainerRect.right - threshold.width) {\n        // Scroll Right\n        direction.x = Direction.Forward;\n        speed.x = acceleration * Math.abs((scrollContainerRect.right - threshold.width - right) / threshold.width);\n    } else if (!isLeft && left <= scrollContainerRect.left + threshold.width) {\n        // Scroll Left\n        direction.x = Direction.Backward;\n        speed.x = acceleration * Math.abs((scrollContainerRect.left + threshold.width - left) / threshold.width);\n    }\n    return {\n        direction,\n        speed\n    };\n}\nfunction getScrollElementRect(element) {\n    if (element === document.scrollingElement) {\n        const { innerWidth, innerHeight } = window;\n        return {\n            top: 0,\n            left: 0,\n            right: innerWidth,\n            bottom: innerHeight,\n            width: innerWidth,\n            height: innerHeight\n        };\n    }\n    const { top, left, right, bottom } = element.getBoundingClientRect();\n    return {\n        top,\n        left,\n        right,\n        bottom,\n        width: element.clientWidth,\n        height: element.clientHeight\n    };\n}\nfunction getScrollOffsets(scrollableAncestors) {\n    return scrollableAncestors.reduce((acc, node)=>{\n        return (0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.add)(acc, getScrollCoordinates(node));\n    }, defaultCoordinates);\n}\nfunction getScrollXOffset(scrollableAncestors) {\n    return scrollableAncestors.reduce((acc, node)=>{\n        return acc + getScrollXCoordinate(node);\n    }, 0);\n}\nfunction getScrollYOffset(scrollableAncestors) {\n    return scrollableAncestors.reduce((acc, node)=>{\n        return acc + getScrollYCoordinate(node);\n    }, 0);\n}\nfunction scrollIntoViewIfNeeded(element, measure) {\n    if (measure === void 0) {\n        measure = getClientRect;\n    }\n    if (!element) {\n        return;\n    }\n    const { top, left, bottom, right } = measure(element);\n    const firstScrollableAncestor = getFirstScrollableAncestor(element);\n    if (!firstScrollableAncestor) {\n        return;\n    }\n    if (bottom <= 0 || right <= 0 || top >= window.innerHeight || left >= window.innerWidth) {\n        element.scrollIntoView({\n            block: 'center',\n            inline: 'center'\n        });\n    }\n}\nconst properties = [\n    [\n        'x',\n        [\n            'left',\n            'right'\n        ],\n        getScrollXOffset\n    ],\n    [\n        'y',\n        [\n            'top',\n            'bottom'\n        ],\n        getScrollYOffset\n    ]\n];\nclass Rect {\n    constructor(rect, element){\n        this.rect = void 0;\n        this.width = void 0;\n        this.height = void 0;\n        this.top = void 0;\n        this.bottom = void 0;\n        this.right = void 0;\n        this.left = void 0;\n        const scrollableAncestors = getScrollableAncestors(element);\n        const scrollOffsets = getScrollOffsets(scrollableAncestors);\n        this.rect = {\n            ...rect\n        };\n        this.width = rect.width;\n        this.height = rect.height;\n        for (const [axis, keys, getScrollOffset] of properties){\n            for (const key of keys){\n                Object.defineProperty(this, key, {\n                    get: ()=>{\n                        const currentOffsets = getScrollOffset(scrollableAncestors);\n                        const scrollOffsetsDeltla = scrollOffsets[axis] - currentOffsets;\n                        return this.rect[key] + scrollOffsetsDeltla;\n                    },\n                    enumerable: true\n                });\n            }\n        }\n        Object.defineProperty(this, 'rect', {\n            enumerable: false\n        });\n    }\n}\nclass Listeners {\n    constructor(target){\n        this.target = void 0;\n        this.listeners = [];\n        this.removeAll = ()=>{\n            this.listeners.forEach((listener)=>{\n                var _this$target;\n                return (_this$target = this.target) == null ? void 0 : _this$target.removeEventListener(...listener);\n            });\n        };\n        this.target = target;\n    }\n    add(eventName, handler, options) {\n        var _this$target2;\n        (_this$target2 = this.target) == null ? void 0 : _this$target2.addEventListener(eventName, handler, options);\n        this.listeners.push([\n            eventName,\n            handler,\n            options\n        ]);\n    }\n}\nfunction getEventListenerTarget(target) {\n    // If the `event.target` element is removed from the document events will still be targeted\n    // at it, and hence won't always bubble up to the window or document anymore.\n    // If there is any risk of an element being removed while it is being dragged,\n    // the best practice is to attach the event listeners directly to the target.\n    // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget\n    const { EventTarget } = (0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.getWindow)(target);\n    return target instanceof EventTarget ? target : (0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.getOwnerDocument)(target);\n}\nfunction hasExceededDistance(delta, measurement) {\n    const dx = Math.abs(delta.x);\n    const dy = Math.abs(delta.y);\n    if (typeof measurement === 'number') {\n        return Math.sqrt(dx ** 2 + dy ** 2) > measurement;\n    }\n    if ('x' in measurement && 'y' in measurement) {\n        return dx > measurement.x && dy > measurement.y;\n    }\n    if ('x' in measurement) {\n        return dx > measurement.x;\n    }\n    if ('y' in measurement) {\n        return dy > measurement.y;\n    }\n    return false;\n}\nvar EventName;\n(function(EventName) {\n    EventName[\"Click\"] = \"click\";\n    EventName[\"DragStart\"] = \"dragstart\";\n    EventName[\"Keydown\"] = \"keydown\";\n    EventName[\"ContextMenu\"] = \"contextmenu\";\n    EventName[\"Resize\"] = \"resize\";\n    EventName[\"SelectionChange\"] = \"selectionchange\";\n    EventName[\"VisibilityChange\"] = \"visibilitychange\";\n})(EventName || (EventName = {}));\nfunction preventDefault(event) {\n    event.preventDefault();\n}\nfunction stopPropagation(event) {\n    event.stopPropagation();\n}\nvar KeyboardCode;\n(function(KeyboardCode) {\n    KeyboardCode[\"Space\"] = \"Space\";\n    KeyboardCode[\"Down\"] = \"ArrowDown\";\n    KeyboardCode[\"Right\"] = \"ArrowRight\";\n    KeyboardCode[\"Left\"] = \"ArrowLeft\";\n    KeyboardCode[\"Up\"] = \"ArrowUp\";\n    KeyboardCode[\"Esc\"] = \"Escape\";\n    KeyboardCode[\"Enter\"] = \"Enter\";\n    KeyboardCode[\"Tab\"] = \"Tab\";\n})(KeyboardCode || (KeyboardCode = {}));\nconst defaultKeyboardCodes = {\n    start: [\n        KeyboardCode.Space,\n        KeyboardCode.Enter\n    ],\n    cancel: [\n        KeyboardCode.Esc\n    ],\n    end: [\n        KeyboardCode.Space,\n        KeyboardCode.Enter,\n        KeyboardCode.Tab\n    ]\n};\nconst defaultKeyboardCoordinateGetter = (event, _ref)=>{\n    let { currentCoordinates } = _ref;\n    switch(event.code){\n        case KeyboardCode.Right:\n            return {\n                ...currentCoordinates,\n                x: currentCoordinates.x + 25\n            };\n        case KeyboardCode.Left:\n            return {\n                ...currentCoordinates,\n                x: currentCoordinates.x - 25\n            };\n        case KeyboardCode.Down:\n            return {\n                ...currentCoordinates,\n                y: currentCoordinates.y + 25\n            };\n        case KeyboardCode.Up:\n            return {\n                ...currentCoordinates,\n                y: currentCoordinates.y - 25\n            };\n    }\n    return undefined;\n};\nclass KeyboardSensor {\n    constructor(props){\n        this.props = void 0;\n        this.autoScrollEnabled = false;\n        this.referenceCoordinates = void 0;\n        this.listeners = void 0;\n        this.windowListeners = void 0;\n        this.props = props;\n        const { event: { target } } = props;\n        this.props = props;\n        this.listeners = new Listeners((0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.getOwnerDocument)(target));\n        this.windowListeners = new Listeners((0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.getWindow)(target));\n        this.handleKeyDown = this.handleKeyDown.bind(this);\n        this.handleCancel = this.handleCancel.bind(this);\n        this.attach();\n    }\n    attach() {\n        this.handleStart();\n        this.windowListeners.add(EventName.Resize, this.handleCancel);\n        this.windowListeners.add(EventName.VisibilityChange, this.handleCancel);\n        setTimeout(()=>this.listeners.add(EventName.Keydown, this.handleKeyDown));\n    }\n    handleStart() {\n        const { activeNode, onStart } = this.props;\n        const node = activeNode.node.current;\n        if (node) {\n            scrollIntoViewIfNeeded(node);\n        }\n        onStart(defaultCoordinates);\n    }\n    handleKeyDown(event) {\n        if ((0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.isKeyboardEvent)(event)) {\n            const { active, context, options } = this.props;\n            const { keyboardCodes = defaultKeyboardCodes, coordinateGetter = defaultKeyboardCoordinateGetter, scrollBehavior = 'smooth' } = options;\n            const { code } = event;\n            if (keyboardCodes.end.includes(code)) {\n                this.handleEnd(event);\n                return;\n            }\n            if (keyboardCodes.cancel.includes(code)) {\n                this.handleCancel(event);\n                return;\n            }\n            const { collisionRect } = context.current;\n            const currentCoordinates = collisionRect ? {\n                x: collisionRect.left,\n                y: collisionRect.top\n            } : defaultCoordinates;\n            if (!this.referenceCoordinates) {\n                this.referenceCoordinates = currentCoordinates;\n            }\n            const newCoordinates = coordinateGetter(event, {\n                active,\n                context: context.current,\n                currentCoordinates\n            });\n            if (newCoordinates) {\n                const coordinatesDelta = (0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.subtract)(newCoordinates, currentCoordinates);\n                const scrollDelta = {\n                    x: 0,\n                    y: 0\n                };\n                const { scrollableAncestors } = context.current;\n                for (const scrollContainer of scrollableAncestors){\n                    const direction = event.code;\n                    const { isTop, isRight, isLeft, isBottom, maxScroll, minScroll } = getScrollPosition(scrollContainer);\n                    const scrollElementRect = getScrollElementRect(scrollContainer);\n                    const clampedCoordinates = {\n                        x: Math.min(direction === KeyboardCode.Right ? scrollElementRect.right - scrollElementRect.width / 2 : scrollElementRect.right, Math.max(direction === KeyboardCode.Right ? scrollElementRect.left : scrollElementRect.left + scrollElementRect.width / 2, newCoordinates.x)),\n                        y: Math.min(direction === KeyboardCode.Down ? scrollElementRect.bottom - scrollElementRect.height / 2 : scrollElementRect.bottom, Math.max(direction === KeyboardCode.Down ? scrollElementRect.top : scrollElementRect.top + scrollElementRect.height / 2, newCoordinates.y))\n                    };\n                    const canScrollX = direction === KeyboardCode.Right && !isRight || direction === KeyboardCode.Left && !isLeft;\n                    const canScrollY = direction === KeyboardCode.Down && !isBottom || direction === KeyboardCode.Up && !isTop;\n                    if (canScrollX && clampedCoordinates.x !== newCoordinates.x) {\n                        const newScrollCoordinates = scrollContainer.scrollLeft + coordinatesDelta.x;\n                        const canScrollToNewCoordinates = direction === KeyboardCode.Right && newScrollCoordinates <= maxScroll.x || direction === KeyboardCode.Left && newScrollCoordinates >= minScroll.x;\n                        if (canScrollToNewCoordinates && !coordinatesDelta.y) {\n                            // We don't need to update coordinates, the scroll adjustment alone will trigger\n                            // logic to auto-detect the new container we are over\n                            scrollContainer.scrollTo({\n                                left: newScrollCoordinates,\n                                behavior: scrollBehavior\n                            });\n                            return;\n                        }\n                        if (canScrollToNewCoordinates) {\n                            scrollDelta.x = scrollContainer.scrollLeft - newScrollCoordinates;\n                        } else {\n                            scrollDelta.x = direction === KeyboardCode.Right ? scrollContainer.scrollLeft - maxScroll.x : scrollContainer.scrollLeft - minScroll.x;\n                        }\n                        if (scrollDelta.x) {\n                            scrollContainer.scrollBy({\n                                left: -scrollDelta.x,\n                                behavior: scrollBehavior\n                            });\n                        }\n                        break;\n                    } else if (canScrollY && clampedCoordinates.y !== newCoordinates.y) {\n                        const newScrollCoordinates = scrollContainer.scrollTop + coordinatesDelta.y;\n                        const canScrollToNewCoordinates = direction === KeyboardCode.Down && newScrollCoordinates <= maxScroll.y || direction === KeyboardCode.Up && newScrollCoordinates >= minScroll.y;\n                        if (canScrollToNewCoordinates && !coordinatesDelta.x) {\n                            // We don't need to update coordinates, the scroll adjustment alone will trigger\n                            // logic to auto-detect the new container we are over\n                            scrollContainer.scrollTo({\n                                top: newScrollCoordinates,\n                                behavior: scrollBehavior\n                            });\n                            return;\n                        }\n                        if (canScrollToNewCoordinates) {\n                            scrollDelta.y = scrollContainer.scrollTop - newScrollCoordinates;\n                        } else {\n                            scrollDelta.y = direction === KeyboardCode.Down ? scrollContainer.scrollTop - maxScroll.y : scrollContainer.scrollTop - minScroll.y;\n                        }\n                        if (scrollDelta.y) {\n                            scrollContainer.scrollBy({\n                                top: -scrollDelta.y,\n                                behavior: scrollBehavior\n                            });\n                        }\n                        break;\n                    }\n                }\n                this.handleMove(event, (0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.add)((0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.subtract)(newCoordinates, this.referenceCoordinates), scrollDelta));\n            }\n        }\n    }\n    handleMove(event, coordinates) {\n        const { onMove } = this.props;\n        event.preventDefault();\n        onMove(coordinates);\n    }\n    handleEnd(event) {\n        const { onEnd } = this.props;\n        event.preventDefault();\n        this.detach();\n        onEnd();\n    }\n    handleCancel(event) {\n        const { onCancel } = this.props;\n        event.preventDefault();\n        this.detach();\n        onCancel();\n    }\n    detach() {\n        this.listeners.removeAll();\n        this.windowListeners.removeAll();\n    }\n}\nKeyboardSensor.activators = [\n    {\n        eventName: 'onKeyDown',\n        handler: (event, _ref, _ref2)=>{\n            let { keyboardCodes = defaultKeyboardCodes, onActivation } = _ref;\n            let { active } = _ref2;\n            const { code } = event.nativeEvent;\n            if (keyboardCodes.start.includes(code)) {\n                const activator = active.activatorNode.current;\n                if (activator && event.target !== activator) {\n                    return false;\n                }\n                event.preventDefault();\n                onActivation == null ? void 0 : onActivation({\n                    event: event.nativeEvent\n                });\n                return true;\n            }\n            return false;\n        }\n    }\n];\nfunction isDistanceConstraint(constraint) {\n    return Boolean(constraint && 'distance' in constraint);\n}\nfunction isDelayConstraint(constraint) {\n    return Boolean(constraint && 'delay' in constraint);\n}\nclass AbstractPointerSensor {\n    constructor(props, events, listenerTarget){\n        var _getEventCoordinates;\n        if (listenerTarget === void 0) {\n            listenerTarget = getEventListenerTarget(props.event.target);\n        }\n        this.props = void 0;\n        this.events = void 0;\n        this.autoScrollEnabled = true;\n        this.document = void 0;\n        this.activated = false;\n        this.initialCoordinates = void 0;\n        this.timeoutId = null;\n        this.listeners = void 0;\n        this.documentListeners = void 0;\n        this.windowListeners = void 0;\n        this.props = props;\n        this.events = events;\n        const { event } = props;\n        const { target } = event;\n        this.props = props;\n        this.events = events;\n        this.document = (0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.getOwnerDocument)(target);\n        this.documentListeners = new Listeners(this.document);\n        this.listeners = new Listeners(listenerTarget);\n        this.windowListeners = new Listeners((0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.getWindow)(target));\n        this.initialCoordinates = (_getEventCoordinates = (0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.getEventCoordinates)(event)) != null ? _getEventCoordinates : defaultCoordinates;\n        this.handleStart = this.handleStart.bind(this);\n        this.handleMove = this.handleMove.bind(this);\n        this.handleEnd = this.handleEnd.bind(this);\n        this.handleCancel = this.handleCancel.bind(this);\n        this.handleKeydown = this.handleKeydown.bind(this);\n        this.removeTextSelection = this.removeTextSelection.bind(this);\n        this.attach();\n    }\n    attach() {\n        const { events, props: { options: { activationConstraint, bypassActivationConstraint } } } = this;\n        this.listeners.add(events.move.name, this.handleMove, {\n            passive: false\n        });\n        this.listeners.add(events.end.name, this.handleEnd);\n        if (events.cancel) {\n            this.listeners.add(events.cancel.name, this.handleCancel);\n        }\n        this.windowListeners.add(EventName.Resize, this.handleCancel);\n        this.windowListeners.add(EventName.DragStart, preventDefault);\n        this.windowListeners.add(EventName.VisibilityChange, this.handleCancel);\n        this.windowListeners.add(EventName.ContextMenu, preventDefault);\n        this.documentListeners.add(EventName.Keydown, this.handleKeydown);\n        if (activationConstraint) {\n            if (bypassActivationConstraint != null && bypassActivationConstraint({\n                event: this.props.event,\n                activeNode: this.props.activeNode,\n                options: this.props.options\n            })) {\n                return this.handleStart();\n            }\n            if (isDelayConstraint(activationConstraint)) {\n                this.timeoutId = setTimeout(this.handleStart, activationConstraint.delay);\n                this.handlePending(activationConstraint);\n                return;\n            }\n            if (isDistanceConstraint(activationConstraint)) {\n                this.handlePending(activationConstraint);\n                return;\n            }\n        }\n        this.handleStart();\n    }\n    detach() {\n        this.listeners.removeAll();\n        this.windowListeners.removeAll(); // Wait until the next event loop before removing document listeners\n        // This is necessary because we listen for `click` and `selection` events on the document\n        setTimeout(this.documentListeners.removeAll, 50);\n        if (this.timeoutId !== null) {\n            clearTimeout(this.timeoutId);\n            this.timeoutId = null;\n        }\n    }\n    handlePending(constraint, offset) {\n        const { active, onPending } = this.props;\n        onPending(active, constraint, this.initialCoordinates, offset);\n    }\n    handleStart() {\n        const { initialCoordinates } = this;\n        const { onStart } = this.props;\n        if (initialCoordinates) {\n            this.activated = true; // Stop propagation of click events once activation constraints are met\n            this.documentListeners.add(EventName.Click, stopPropagation, {\n                capture: true\n            }); // Remove any text selection from the document\n            this.removeTextSelection(); // Prevent further text selection while dragging\n            this.documentListeners.add(EventName.SelectionChange, this.removeTextSelection);\n            onStart(initialCoordinates);\n        }\n    }\n    handleMove(event) {\n        var _getEventCoordinates2;\n        const { activated, initialCoordinates, props } = this;\n        const { onMove, options: { activationConstraint } } = props;\n        if (!initialCoordinates) {\n            return;\n        }\n        const coordinates = (_getEventCoordinates2 = (0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.getEventCoordinates)(event)) != null ? _getEventCoordinates2 : defaultCoordinates;\n        const delta = (0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.subtract)(initialCoordinates, coordinates); // Constraint validation\n        if (!activated && activationConstraint) {\n            if (isDistanceConstraint(activationConstraint)) {\n                if (activationConstraint.tolerance != null && hasExceededDistance(delta, activationConstraint.tolerance)) {\n                    return this.handleCancel();\n                }\n                if (hasExceededDistance(delta, activationConstraint.distance)) {\n                    return this.handleStart();\n                }\n            }\n            if (isDelayConstraint(activationConstraint)) {\n                if (hasExceededDistance(delta, activationConstraint.tolerance)) {\n                    return this.handleCancel();\n                }\n            }\n            this.handlePending(activationConstraint, delta);\n            return;\n        }\n        if (event.cancelable) {\n            event.preventDefault();\n        }\n        onMove(coordinates);\n    }\n    handleEnd() {\n        const { onAbort, onEnd } = this.props;\n        this.detach();\n        if (!this.activated) {\n            onAbort(this.props.active);\n        }\n        onEnd();\n    }\n    handleCancel() {\n        const { onAbort, onCancel } = this.props;\n        this.detach();\n        if (!this.activated) {\n            onAbort(this.props.active);\n        }\n        onCancel();\n    }\n    handleKeydown(event) {\n        if (event.code === KeyboardCode.Esc) {\n            this.handleCancel();\n        }\n    }\n    removeTextSelection() {\n        var _this$document$getSel;\n        (_this$document$getSel = this.document.getSelection()) == null ? void 0 : _this$document$getSel.removeAllRanges();\n    }\n}\nconst events = {\n    cancel: {\n        name: 'pointercancel'\n    },\n    move: {\n        name: 'pointermove'\n    },\n    end: {\n        name: 'pointerup'\n    }\n};\nclass PointerSensor extends AbstractPointerSensor {\n    constructor(props){\n        const { event } = props; // Pointer events stop firing if the target is unmounted while dragging\n        // Therefore we attach listeners to the owner document instead\n        const listenerTarget = (0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.getOwnerDocument)(event.target);\n        super(props, events, listenerTarget);\n    }\n}\nPointerSensor.activators = [\n    {\n        eventName: 'onPointerDown',\n        handler: (_ref, _ref2)=>{\n            let { nativeEvent: event } = _ref;\n            let { onActivation } = _ref2;\n            if (!event.isPrimary || event.button !== 0) {\n                return false;\n            }\n            onActivation == null ? void 0 : onActivation({\n                event\n            });\n            return true;\n        }\n    }\n];\nconst events$1 = {\n    move: {\n        name: 'mousemove'\n    },\n    end: {\n        name: 'mouseup'\n    }\n};\nvar MouseButton;\n(function(MouseButton) {\n    MouseButton[MouseButton[\"RightClick\"] = 2] = \"RightClick\";\n})(MouseButton || (MouseButton = {}));\nclass MouseSensor extends AbstractPointerSensor {\n    constructor(props){\n        super(props, events$1, (0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.getOwnerDocument)(props.event.target));\n    }\n}\nMouseSensor.activators = [\n    {\n        eventName: 'onMouseDown',\n        handler: (_ref, _ref2)=>{\n            let { nativeEvent: event } = _ref;\n            let { onActivation } = _ref2;\n            if (event.button === MouseButton.RightClick) {\n                return false;\n            }\n            onActivation == null ? void 0 : onActivation({\n                event\n            });\n            return true;\n        }\n    }\n];\nconst events$2 = {\n    cancel: {\n        name: 'touchcancel'\n    },\n    move: {\n        name: 'touchmove'\n    },\n    end: {\n        name: 'touchend'\n    }\n};\nclass TouchSensor extends AbstractPointerSensor {\n    constructor(props){\n        super(props, events$2);\n    }\n    static setup() {\n        // Adding a non-capture and non-passive `touchmove` listener in order\n        // to force `event.preventDefault()` calls to work in dynamically added\n        // touchmove event handlers. This is required for iOS Safari.\n        window.addEventListener(events$2.move.name, noop, {\n            capture: false,\n            passive: false\n        });\n        return function teardown() {\n            window.removeEventListener(events$2.move.name, noop);\n        }; // We create a new handler because the teardown function of another sensor\n        // could remove our event listener if we use a referentially equal listener.\n        function noop() {}\n    }\n}\nTouchSensor.activators = [\n    {\n        eventName: 'onTouchStart',\n        handler: (_ref, _ref2)=>{\n            let { nativeEvent: event } = _ref;\n            let { onActivation } = _ref2;\n            const { touches } = event;\n            if (touches.length > 1) {\n                return false;\n            }\n            onActivation == null ? void 0 : onActivation({\n                event\n            });\n            return true;\n        }\n    }\n];\nvar AutoScrollActivator;\n(function(AutoScrollActivator) {\n    AutoScrollActivator[AutoScrollActivator[\"Pointer\"] = 0] = \"Pointer\";\n    AutoScrollActivator[AutoScrollActivator[\"DraggableRect\"] = 1] = \"DraggableRect\";\n})(AutoScrollActivator || (AutoScrollActivator = {}));\nvar TraversalOrder;\n(function(TraversalOrder) {\n    TraversalOrder[TraversalOrder[\"TreeOrder\"] = 0] = \"TreeOrder\";\n    TraversalOrder[TraversalOrder[\"ReversedTreeOrder\"] = 1] = \"ReversedTreeOrder\";\n})(TraversalOrder || (TraversalOrder = {}));\nfunction useAutoScroller(_ref) {\n    let { acceleration, activator = AutoScrollActivator.Pointer, canScroll, draggingRect, enabled, interval = 5, order = TraversalOrder.TreeOrder, pointerCoordinates, scrollableAncestors, scrollableAncestorRects, delta, threshold } = _ref;\n    const scrollIntent = useScrollIntent({\n        delta,\n        disabled: !enabled\n    });\n    const [setAutoScrollInterval, clearAutoScrollInterval] = (0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.useInterval)();\n    const scrollSpeed = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({\n        x: 0,\n        y: 0\n    });\n    const scrollDirection = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({\n        x: 0,\n        y: 0\n    });\n    const rect = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"useAutoScroller.useMemo[rect]\": ()=>{\n            switch(activator){\n                case AutoScrollActivator.Pointer:\n                    return pointerCoordinates ? {\n                        top: pointerCoordinates.y,\n                        bottom: pointerCoordinates.y,\n                        left: pointerCoordinates.x,\n                        right: pointerCoordinates.x\n                    } : null;\n                case AutoScrollActivator.DraggableRect:\n                    return draggingRect;\n            }\n        }\n    }[\"useAutoScroller.useMemo[rect]\"], [\n        activator,\n        draggingRect,\n        pointerCoordinates\n    ]);\n    const scrollContainerRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const autoScroll = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useAutoScroller.useCallback[autoScroll]\": ()=>{\n            const scrollContainer = scrollContainerRef.current;\n            if (!scrollContainer) {\n                return;\n            }\n            const scrollLeft = scrollSpeed.current.x * scrollDirection.current.x;\n            const scrollTop = scrollSpeed.current.y * scrollDirection.current.y;\n            scrollContainer.scrollBy(scrollLeft, scrollTop);\n        }\n    }[\"useAutoScroller.useCallback[autoScroll]\"], []);\n    const sortedScrollableAncestors = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"useAutoScroller.useMemo[sortedScrollableAncestors]\": ()=>order === TraversalOrder.TreeOrder ? [\n                ...scrollableAncestors\n            ].reverse() : scrollableAncestors\n    }[\"useAutoScroller.useMemo[sortedScrollableAncestors]\"], [\n        order,\n        scrollableAncestors\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useAutoScroller.useEffect\": ()=>{\n            if (!enabled || !scrollableAncestors.length || !rect) {\n                clearAutoScrollInterval();\n                return;\n            }\n            for (const scrollContainer of sortedScrollableAncestors){\n                if ((canScroll == null ? void 0 : canScroll(scrollContainer)) === false) {\n                    continue;\n                }\n                const index = scrollableAncestors.indexOf(scrollContainer);\n                const scrollContainerRect = scrollableAncestorRects[index];\n                if (!scrollContainerRect) {\n                    continue;\n                }\n                const { direction, speed } = getScrollDirectionAndSpeed(scrollContainer, scrollContainerRect, rect, acceleration, threshold);\n                for (const axis of [\n                    'x',\n                    'y'\n                ]){\n                    if (!scrollIntent[axis][direction[axis]]) {\n                        speed[axis] = 0;\n                        direction[axis] = 0;\n                    }\n                }\n                if (speed.x > 0 || speed.y > 0) {\n                    clearAutoScrollInterval();\n                    scrollContainerRef.current = scrollContainer;\n                    setAutoScrollInterval(autoScroll, interval);\n                    scrollSpeed.current = speed;\n                    scrollDirection.current = direction;\n                    return;\n                }\n            }\n            scrollSpeed.current = {\n                x: 0,\n                y: 0\n            };\n            scrollDirection.current = {\n                x: 0,\n                y: 0\n            };\n            clearAutoScrollInterval();\n        }\n    }[\"useAutoScroller.useEffect\"], [\n        acceleration,\n        autoScroll,\n        canScroll,\n        clearAutoScrollInterval,\n        enabled,\n        interval,\n        JSON.stringify(rect),\n        JSON.stringify(scrollIntent),\n        setAutoScrollInterval,\n        scrollableAncestors,\n        sortedScrollableAncestors,\n        scrollableAncestorRects,\n        JSON.stringify(threshold)\n    ]);\n}\nconst defaultScrollIntent = {\n    x: {\n        [Direction.Backward]: false,\n        [Direction.Forward]: false\n    },\n    y: {\n        [Direction.Backward]: false,\n        [Direction.Forward]: false\n    }\n};\nfunction useScrollIntent(_ref2) {\n    let { delta, disabled } = _ref2;\n    const previousDelta = (0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.usePrevious)(delta);\n    return (0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.useLazyMemo)({\n        \"useScrollIntent.useLazyMemo\": (previousIntent)=>{\n            if (disabled || !previousDelta || !previousIntent) {\n                // Reset scroll intent tracking when auto-scrolling is disabled\n                return defaultScrollIntent;\n            }\n            const direction = {\n                x: Math.sign(delta.x - previousDelta.x),\n                y: Math.sign(delta.y - previousDelta.y)\n            }; // Keep track of the user intent to scroll in each direction for both axis\n            return {\n                x: {\n                    [Direction.Backward]: previousIntent.x[Direction.Backward] || direction.x === -1,\n                    [Direction.Forward]: previousIntent.x[Direction.Forward] || direction.x === 1\n                },\n                y: {\n                    [Direction.Backward]: previousIntent.y[Direction.Backward] || direction.y === -1,\n                    [Direction.Forward]: previousIntent.y[Direction.Forward] || direction.y === 1\n                }\n            };\n        }\n    }[\"useScrollIntent.useLazyMemo\"], [\n        disabled,\n        delta,\n        previousDelta\n    ]);\n}\nfunction useCachedNode(draggableNodes, id) {\n    const draggableNode = id != null ? draggableNodes.get(id) : undefined;\n    const node = draggableNode ? draggableNode.node.current : null;\n    return (0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.useLazyMemo)({\n        \"useCachedNode.useLazyMemo\": (cachedNode)=>{\n            var _ref;\n            if (id == null) {\n                return null;\n            } // In some cases, the draggable node can unmount while dragging\n            // This is the case for virtualized lists. In those situations,\n            // we fall back to the last known value for that node.\n            return (_ref = node != null ? node : cachedNode) != null ? _ref : null;\n        }\n    }[\"useCachedNode.useLazyMemo\"], [\n        node,\n        id\n    ]);\n}\nfunction useCombineActivators(sensors, getSyntheticHandler) {\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"useCombineActivators.useMemo\": ()=>sensors.reduce({\n                \"useCombineActivators.useMemo\": (accumulator, sensor)=>{\n                    const { sensor: Sensor } = sensor;\n                    const sensorActivators = Sensor.activators.map({\n                        \"useCombineActivators.useMemo.sensorActivators\": (activator)=>({\n                                eventName: activator.eventName,\n                                handler: getSyntheticHandler(activator.handler, sensor)\n                            })\n                    }[\"useCombineActivators.useMemo.sensorActivators\"]);\n                    return [\n                        ...accumulator,\n                        ...sensorActivators\n                    ];\n                }\n            }[\"useCombineActivators.useMemo\"], [])\n    }[\"useCombineActivators.useMemo\"], [\n        sensors,\n        getSyntheticHandler\n    ]);\n}\nvar MeasuringStrategy;\n(function(MeasuringStrategy) {\n    MeasuringStrategy[MeasuringStrategy[\"Always\"] = 0] = \"Always\";\n    MeasuringStrategy[MeasuringStrategy[\"BeforeDragging\"] = 1] = \"BeforeDragging\";\n    MeasuringStrategy[MeasuringStrategy[\"WhileDragging\"] = 2] = \"WhileDragging\";\n})(MeasuringStrategy || (MeasuringStrategy = {}));\nvar MeasuringFrequency;\n(function(MeasuringFrequency) {\n    MeasuringFrequency[\"Optimized\"] = \"optimized\";\n})(MeasuringFrequency || (MeasuringFrequency = {}));\nconst defaultValue = /*#__PURE__*/ new Map();\nfunction useDroppableMeasuring(containers, _ref) {\n    let { dragging, dependencies, config } = _ref;\n    const [queue, setQueue] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const { frequency, measure, strategy } = config;\n    const containersRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(containers);\n    const disabled = isDisabled();\n    const disabledRef = (0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.useLatestValue)(disabled);\n    const measureDroppableContainers = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useDroppableMeasuring.useCallback[measureDroppableContainers]\": function(ids) {\n            if (ids === void 0) {\n                ids = [];\n            }\n            if (disabledRef.current) {\n                return;\n            }\n            setQueue({\n                \"useDroppableMeasuring.useCallback[measureDroppableContainers]\": (value)=>{\n                    if (value === null) {\n                        return ids;\n                    }\n                    return value.concat(ids.filter({\n                        \"useDroppableMeasuring.useCallback[measureDroppableContainers]\": (id)=>!value.includes(id)\n                    }[\"useDroppableMeasuring.useCallback[measureDroppableContainers]\"]));\n                }\n            }[\"useDroppableMeasuring.useCallback[measureDroppableContainers]\"]);\n        }\n    }[\"useDroppableMeasuring.useCallback[measureDroppableContainers]\"], [\n        disabledRef\n    ]);\n    const timeoutId = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const droppableRects = (0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.useLazyMemo)({\n        \"useDroppableMeasuring.useLazyMemo[droppableRects]\": (previousValue)=>{\n            if (disabled && !dragging) {\n                return defaultValue;\n            }\n            if (!previousValue || previousValue === defaultValue || containersRef.current !== containers || queue != null) {\n                const map = new Map();\n                for (let container of containers){\n                    if (!container) {\n                        continue;\n                    }\n                    if (queue && queue.length > 0 && !queue.includes(container.id) && container.rect.current) {\n                        // This container does not need to be re-measured\n                        map.set(container.id, container.rect.current);\n                        continue;\n                    }\n                    const node = container.node.current;\n                    const rect = node ? new Rect(measure(node), node) : null;\n                    container.rect.current = rect;\n                    if (rect) {\n                        map.set(container.id, rect);\n                    }\n                }\n                return map;\n            }\n            return previousValue;\n        }\n    }[\"useDroppableMeasuring.useLazyMemo[droppableRects]\"], [\n        containers,\n        queue,\n        dragging,\n        disabled,\n        measure\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useDroppableMeasuring.useEffect\": ()=>{\n            containersRef.current = containers;\n        }\n    }[\"useDroppableMeasuring.useEffect\"], [\n        containers\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useDroppableMeasuring.useEffect\": ()=>{\n            if (disabled) {\n                return;\n            }\n            measureDroppableContainers();\n        }\n    }[\"useDroppableMeasuring.useEffect\"], [\n        dragging,\n        disabled\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useDroppableMeasuring.useEffect\": ()=>{\n            if (queue && queue.length > 0) {\n                setQueue(null);\n            }\n        }\n    }[\"useDroppableMeasuring.useEffect\"], [\n        JSON.stringify(queue)\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useDroppableMeasuring.useEffect\": ()=>{\n            if (disabled || typeof frequency !== 'number' || timeoutId.current !== null) {\n                return;\n            }\n            timeoutId.current = setTimeout({\n                \"useDroppableMeasuring.useEffect\": ()=>{\n                    measureDroppableContainers();\n                    timeoutId.current = null;\n                }\n            }[\"useDroppableMeasuring.useEffect\"], frequency);\n        }\n    }[\"useDroppableMeasuring.useEffect\"], [\n        frequency,\n        disabled,\n        measureDroppableContainers,\n        ...dependencies\n    ]);\n    return {\n        droppableRects,\n        measureDroppableContainers,\n        measuringScheduled: queue != null\n    };\n    function isDisabled() {\n        switch(strategy){\n            case MeasuringStrategy.Always:\n                return false;\n            case MeasuringStrategy.BeforeDragging:\n                return dragging;\n            default:\n                return !dragging;\n        }\n    }\n}\nfunction useInitialValue(value, computeFn) {\n    return (0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.useLazyMemo)({\n        \"useInitialValue.useLazyMemo\": (previousValue)=>{\n            if (!value) {\n                return null;\n            }\n            if (previousValue) {\n                return previousValue;\n            }\n            return typeof computeFn === 'function' ? computeFn(value) : value;\n        }\n    }[\"useInitialValue.useLazyMemo\"], [\n        computeFn,\n        value\n    ]);\n}\nfunction useInitialRect(node, measure) {\n    return useInitialValue(node, measure);\n}\n/**\r\n * Returns a new MutationObserver instance.\r\n * If `MutationObserver` is undefined in the execution environment, returns `undefined`.\r\n */ function useMutationObserver(_ref) {\n    let { callback, disabled } = _ref;\n    const handleMutations = (0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.useEvent)(callback);\n    const mutationObserver = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"useMutationObserver.useMemo[mutationObserver]\": ()=>{\n            if (disabled || \"undefined\" === 'undefined' || 0) {\n                return undefined;\n            }\n            const { MutationObserver } = window;\n            return new MutationObserver(handleMutations);\n        }\n    }[\"useMutationObserver.useMemo[mutationObserver]\"], [\n        handleMutations,\n        disabled\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useMutationObserver.useEffect\": ()=>{\n            return ({\n                \"useMutationObserver.useEffect\": ()=>mutationObserver == null ? void 0 : mutationObserver.disconnect()\n            })[\"useMutationObserver.useEffect\"];\n        }\n    }[\"useMutationObserver.useEffect\"], [\n        mutationObserver\n    ]);\n    return mutationObserver;\n}\n/**\r\n * Returns a new ResizeObserver instance bound to the `onResize` callback.\r\n * If `ResizeObserver` is undefined in the execution environment, returns `undefined`.\r\n */ function useResizeObserver(_ref) {\n    let { callback, disabled } = _ref;\n    const handleResize = (0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.useEvent)(callback);\n    const resizeObserver = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"useResizeObserver.useMemo[resizeObserver]\": ()=>{\n            if (disabled || \"undefined\" === 'undefined' || 0) {\n                return undefined;\n            }\n            const { ResizeObserver } = window;\n            return new ResizeObserver(handleResize);\n        }\n    }[\"useResizeObserver.useMemo[resizeObserver]\"], [\n        disabled\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useResizeObserver.useEffect\": ()=>{\n            return ({\n                \"useResizeObserver.useEffect\": ()=>resizeObserver == null ? void 0 : resizeObserver.disconnect()\n            })[\"useResizeObserver.useEffect\"];\n        }\n    }[\"useResizeObserver.useEffect\"], [\n        resizeObserver\n    ]);\n    return resizeObserver;\n}\nfunction defaultMeasure(element) {\n    return new Rect(getClientRect(element), element);\n}\nfunction useRect(element, measure, fallbackRect) {\n    if (measure === void 0) {\n        measure = defaultMeasure;\n    }\n    const [rect, setRect] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    function measureRect() {\n        setRect((currentRect)=>{\n            if (!element) {\n                return null;\n            }\n            if (element.isConnected === false) {\n                var _ref;\n                // Fall back to last rect we measured if the element is\n                // no longer connected to the DOM.\n                return (_ref = currentRect != null ? currentRect : fallbackRect) != null ? _ref : null;\n            }\n            const newRect = measure(element);\n            if (JSON.stringify(currentRect) === JSON.stringify(newRect)) {\n                return currentRect;\n            }\n            return newRect;\n        });\n    }\n    const mutationObserver = useMutationObserver({\n        callback (records) {\n            if (!element) {\n                return;\n            }\n            for (const record of records){\n                const { type, target } = record;\n                if (type === 'childList' && target instanceof HTMLElement && target.contains(element)) {\n                    measureRect();\n                    break;\n                }\n            }\n        }\n    });\n    const resizeObserver = useResizeObserver({\n        callback: measureRect\n    });\n    (0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.useIsomorphicLayoutEffect)({\n        \"useRect.useIsomorphicLayoutEffect\": ()=>{\n            measureRect();\n            if (element) {\n                resizeObserver == null ? void 0 : resizeObserver.observe(element);\n                mutationObserver == null ? void 0 : mutationObserver.observe(document.body, {\n                    childList: true,\n                    subtree: true\n                });\n            } else {\n                resizeObserver == null ? void 0 : resizeObserver.disconnect();\n                mutationObserver == null ? void 0 : mutationObserver.disconnect();\n            }\n        }\n    }[\"useRect.useIsomorphicLayoutEffect\"], [\n        element\n    ]);\n    return rect;\n}\nfunction useRectDelta(rect) {\n    const initialRect = useInitialValue(rect);\n    return getRectDelta(rect, initialRect);\n}\nconst defaultValue$1 = [];\nfunction useScrollableAncestors(node) {\n    const previousNode = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(node);\n    const ancestors = (0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.useLazyMemo)({\n        \"useScrollableAncestors.useLazyMemo[ancestors]\": (previousValue)=>{\n            if (!node) {\n                return defaultValue$1;\n            }\n            if (previousValue && previousValue !== defaultValue$1 && node && previousNode.current && node.parentNode === previousNode.current.parentNode) {\n                return previousValue;\n            }\n            return getScrollableAncestors(node);\n        }\n    }[\"useScrollableAncestors.useLazyMemo[ancestors]\"], [\n        node\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useScrollableAncestors.useEffect\": ()=>{\n            previousNode.current = node;\n        }\n    }[\"useScrollableAncestors.useEffect\"], [\n        node\n    ]);\n    return ancestors;\n}\nfunction useScrollOffsets(elements) {\n    const [scrollCoordinates, setScrollCoordinates] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const prevElements = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(elements); // To-do: Throttle the handleScroll callback\n    const handleScroll = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useScrollOffsets.useCallback[handleScroll]\": (event)=>{\n            const scrollingElement = getScrollableElement(event.target);\n            if (!scrollingElement) {\n                return;\n            }\n            setScrollCoordinates({\n                \"useScrollOffsets.useCallback[handleScroll]\": (scrollCoordinates)=>{\n                    if (!scrollCoordinates) {\n                        return null;\n                    }\n                    scrollCoordinates.set(scrollingElement, getScrollCoordinates(scrollingElement));\n                    return new Map(scrollCoordinates);\n                }\n            }[\"useScrollOffsets.useCallback[handleScroll]\"]);\n        }\n    }[\"useScrollOffsets.useCallback[handleScroll]\"], []);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useScrollOffsets.useEffect\": ()=>{\n            const previousElements = prevElements.current;\n            if (elements !== previousElements) {\n                cleanup(previousElements);\n                const entries = elements.map({\n                    \"useScrollOffsets.useEffect.entries\": (element)=>{\n                        const scrollableElement = getScrollableElement(element);\n                        if (scrollableElement) {\n                            scrollableElement.addEventListener('scroll', handleScroll, {\n                                passive: true\n                            });\n                            return [\n                                scrollableElement,\n                                getScrollCoordinates(scrollableElement)\n                            ];\n                        }\n                        return null;\n                    }\n                }[\"useScrollOffsets.useEffect.entries\"]).filter({\n                    \"useScrollOffsets.useEffect.entries\": (entry)=>entry != null\n                }[\"useScrollOffsets.useEffect.entries\"]);\n                setScrollCoordinates(entries.length ? new Map(entries) : null);\n                prevElements.current = elements;\n            }\n            return ({\n                \"useScrollOffsets.useEffect\": ()=>{\n                    cleanup(elements);\n                    cleanup(previousElements);\n                }\n            })[\"useScrollOffsets.useEffect\"];\n            function cleanup(elements) {\n                elements.forEach({\n                    \"useScrollOffsets.useEffect.cleanup\": (element)=>{\n                        const scrollableElement = getScrollableElement(element);\n                        scrollableElement == null ? void 0 : scrollableElement.removeEventListener('scroll', handleScroll);\n                    }\n                }[\"useScrollOffsets.useEffect.cleanup\"]);\n            }\n        }\n    }[\"useScrollOffsets.useEffect\"], [\n        handleScroll,\n        elements\n    ]);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"useScrollOffsets.useMemo\": ()=>{\n            if (elements.length) {\n                return scrollCoordinates ? Array.from(scrollCoordinates.values()).reduce({\n                    \"useScrollOffsets.useMemo\": (acc, coordinates)=>(0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.add)(acc, coordinates)\n                }[\"useScrollOffsets.useMemo\"], defaultCoordinates) : getScrollOffsets(elements);\n            }\n            return defaultCoordinates;\n        }\n    }[\"useScrollOffsets.useMemo\"], [\n        elements,\n        scrollCoordinates\n    ]);\n}\nfunction useScrollOffsetsDelta(scrollOffsets, dependencies) {\n    if (dependencies === void 0) {\n        dependencies = [];\n    }\n    const initialScrollOffsets = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useScrollOffsetsDelta.useEffect\": ()=>{\n            initialScrollOffsets.current = null;\n        }\n    }[\"useScrollOffsetsDelta.useEffect\"], dependencies);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useScrollOffsetsDelta.useEffect\": ()=>{\n            const hasScrollOffsets = scrollOffsets !== defaultCoordinates;\n            if (hasScrollOffsets && !initialScrollOffsets.current) {\n                initialScrollOffsets.current = scrollOffsets;\n            }\n            if (!hasScrollOffsets && initialScrollOffsets.current) {\n                initialScrollOffsets.current = null;\n            }\n        }\n    }[\"useScrollOffsetsDelta.useEffect\"], [\n        scrollOffsets\n    ]);\n    return initialScrollOffsets.current ? (0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.subtract)(scrollOffsets, initialScrollOffsets.current) : defaultCoordinates;\n}\nfunction useSensorSetup(sensors) {\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useSensorSetup.useEffect\": ()=>{\n            if (!_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.canUseDOM) {\n                return;\n            }\n            const teardownFns = sensors.map({\n                \"useSensorSetup.useEffect.teardownFns\": (_ref)=>{\n                    let { sensor } = _ref;\n                    return sensor.setup == null ? void 0 : sensor.setup();\n                }\n            }[\"useSensorSetup.useEffect.teardownFns\"]);\n            return ({\n                \"useSensorSetup.useEffect\": ()=>{\n                    for (const teardown of teardownFns){\n                        teardown == null ? void 0 : teardown();\n                    }\n                }\n            })[\"useSensorSetup.useEffect\"];\n        }\n    }[\"useSensorSetup.useEffect\"], // eslint-disable-next-line react-hooks/exhaustive-deps\n    sensors.map({\n        \"useSensorSetup.useEffect\": (_ref2)=>{\n            let { sensor } = _ref2;\n            return sensor;\n        }\n    }[\"useSensorSetup.useEffect\"]));\n}\nfunction useSyntheticListeners(listeners, id) {\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"useSyntheticListeners.useMemo\": ()=>{\n            return listeners.reduce({\n                \"useSyntheticListeners.useMemo\": (acc, _ref)=>{\n                    let { eventName, handler } = _ref;\n                    acc[eventName] = ({\n                        \"useSyntheticListeners.useMemo\": (event)=>{\n                            handler(event, id);\n                        }\n                    })[\"useSyntheticListeners.useMemo\"];\n                    return acc;\n                }\n            }[\"useSyntheticListeners.useMemo\"], {});\n        }\n    }[\"useSyntheticListeners.useMemo\"], [\n        listeners,\n        id\n    ]);\n}\nfunction useWindowRect(element) {\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"useWindowRect.useMemo\": ()=>element ? getWindowClientRect(element) : null\n    }[\"useWindowRect.useMemo\"], [\n        element\n    ]);\n}\nconst defaultValue$2 = [];\nfunction useRects(elements, measure) {\n    if (measure === void 0) {\n        measure = getClientRect;\n    }\n    const [firstElement] = elements;\n    const windowRect = useWindowRect(firstElement ? (0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.getWindow)(firstElement) : null);\n    const [rects, setRects] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(defaultValue$2);\n    function measureRects() {\n        setRects(()=>{\n            if (!elements.length) {\n                return defaultValue$2;\n            }\n            return elements.map((element)=>isDocumentScrollingElement(element) ? windowRect : new Rect(measure(element), element));\n        });\n    }\n    const resizeObserver = useResizeObserver({\n        callback: measureRects\n    });\n    (0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.useIsomorphicLayoutEffect)({\n        \"useRects.useIsomorphicLayoutEffect\": ()=>{\n            resizeObserver == null ? void 0 : resizeObserver.disconnect();\n            measureRects();\n            elements.forEach({\n                \"useRects.useIsomorphicLayoutEffect\": (element)=>resizeObserver == null ? void 0 : resizeObserver.observe(element)\n            }[\"useRects.useIsomorphicLayoutEffect\"]);\n        }\n    }[\"useRects.useIsomorphicLayoutEffect\"], [\n        elements\n    ]);\n    return rects;\n}\nfunction getMeasurableNode(node) {\n    if (!node) {\n        return null;\n    }\n    if (node.children.length > 1) {\n        return node;\n    }\n    const firstChild = node.children[0];\n    return (0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.isHTMLElement)(firstChild) ? firstChild : node;\n}\nfunction useDragOverlayMeasuring(_ref) {\n    let { measure } = _ref;\n    const [rect, setRect] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const handleResize = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useDragOverlayMeasuring.useCallback[handleResize]\": (entries)=>{\n            for (const { target } of entries){\n                if ((0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.isHTMLElement)(target)) {\n                    setRect({\n                        \"useDragOverlayMeasuring.useCallback[handleResize]\": (rect)=>{\n                            const newRect = measure(target);\n                            return rect ? {\n                                ...rect,\n                                width: newRect.width,\n                                height: newRect.height\n                            } : newRect;\n                        }\n                    }[\"useDragOverlayMeasuring.useCallback[handleResize]\"]);\n                    break;\n                }\n            }\n        }\n    }[\"useDragOverlayMeasuring.useCallback[handleResize]\"], [\n        measure\n    ]);\n    const resizeObserver = useResizeObserver({\n        callback: handleResize\n    });\n    const handleNodeChange = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useDragOverlayMeasuring.useCallback[handleNodeChange]\": (element)=>{\n            const node = getMeasurableNode(element);\n            resizeObserver == null ? void 0 : resizeObserver.disconnect();\n            if (node) {\n                resizeObserver == null ? void 0 : resizeObserver.observe(node);\n            }\n            setRect(node ? measure(node) : null);\n        }\n    }[\"useDragOverlayMeasuring.useCallback[handleNodeChange]\"], [\n        measure,\n        resizeObserver\n    ]);\n    const [nodeRef, setRef] = (0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.useNodeRef)(handleNodeChange);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"useDragOverlayMeasuring.useMemo\": ()=>({\n                nodeRef,\n                rect,\n                setRef\n            })\n    }[\"useDragOverlayMeasuring.useMemo\"], [\n        rect,\n        nodeRef,\n        setRef\n    ]);\n}\nconst defaultSensors = [\n    {\n        sensor: PointerSensor,\n        options: {}\n    },\n    {\n        sensor: KeyboardSensor,\n        options: {}\n    }\n];\nconst defaultData = {\n    current: {}\n};\nconst defaultMeasuringConfiguration = {\n    draggable: {\n        measure: getTransformAgnosticClientRect\n    },\n    droppable: {\n        measure: getTransformAgnosticClientRect,\n        strategy: MeasuringStrategy.WhileDragging,\n        frequency: MeasuringFrequency.Optimized\n    },\n    dragOverlay: {\n        measure: getClientRect\n    }\n};\nclass DroppableContainersMap extends Map {\n    get(id) {\n        var _super$get;\n        return id != null ? (_super$get = super.get(id)) != null ? _super$get : undefined : undefined;\n    }\n    toArray() {\n        return Array.from(this.values());\n    }\n    getEnabled() {\n        return this.toArray().filter((_ref)=>{\n            let { disabled } = _ref;\n            return !disabled;\n        });\n    }\n    getNodeFor(id) {\n        var _this$get$node$curren, _this$get;\n        return (_this$get$node$curren = (_this$get = this.get(id)) == null ? void 0 : _this$get.node.current) != null ? _this$get$node$curren : undefined;\n    }\n}\nconst defaultPublicContext = {\n    activatorEvent: null,\n    active: null,\n    activeNode: null,\n    activeNodeRect: null,\n    collisions: null,\n    containerNodeRect: null,\n    draggableNodes: /*#__PURE__*/ new Map(),\n    droppableRects: /*#__PURE__*/ new Map(),\n    droppableContainers: /*#__PURE__*/ new DroppableContainersMap(),\n    over: null,\n    dragOverlay: {\n        nodeRef: {\n            current: null\n        },\n        rect: null,\n        setRef: noop\n    },\n    scrollableAncestors: [],\n    scrollableAncestorRects: [],\n    measuringConfiguration: defaultMeasuringConfiguration,\n    measureDroppableContainers: noop,\n    windowRect: null,\n    measuringScheduled: false\n};\nconst defaultInternalContext = {\n    activatorEvent: null,\n    activators: [],\n    active: null,\n    activeNodeRect: null,\n    ariaDescribedById: {\n        draggable: ''\n    },\n    dispatch: noop,\n    draggableNodes: /*#__PURE__*/ new Map(),\n    over: null,\n    measureDroppableContainers: noop\n};\nconst InternalContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(defaultInternalContext);\nconst PublicContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(defaultPublicContext);\nfunction getInitialState() {\n    return {\n        draggable: {\n            active: null,\n            initialCoordinates: {\n                x: 0,\n                y: 0\n            },\n            nodes: new Map(),\n            translate: {\n                x: 0,\n                y: 0\n            }\n        },\n        droppable: {\n            containers: new DroppableContainersMap()\n        }\n    };\n}\nfunction reducer(state, action) {\n    switch(action.type){\n        case Action.DragStart:\n            return {\n                ...state,\n                draggable: {\n                    ...state.draggable,\n                    initialCoordinates: action.initialCoordinates,\n                    active: action.active\n                }\n            };\n        case Action.DragMove:\n            if (state.draggable.active == null) {\n                return state;\n            }\n            return {\n                ...state,\n                draggable: {\n                    ...state.draggable,\n                    translate: {\n                        x: action.coordinates.x - state.draggable.initialCoordinates.x,\n                        y: action.coordinates.y - state.draggable.initialCoordinates.y\n                    }\n                }\n            };\n        case Action.DragEnd:\n        case Action.DragCancel:\n            return {\n                ...state,\n                draggable: {\n                    ...state.draggable,\n                    active: null,\n                    initialCoordinates: {\n                        x: 0,\n                        y: 0\n                    },\n                    translate: {\n                        x: 0,\n                        y: 0\n                    }\n                }\n            };\n        case Action.RegisterDroppable:\n            {\n                const { element } = action;\n                const { id } = element;\n                const containers = new DroppableContainersMap(state.droppable.containers);\n                containers.set(id, element);\n                return {\n                    ...state,\n                    droppable: {\n                        ...state.droppable,\n                        containers\n                    }\n                };\n            }\n        case Action.SetDroppableDisabled:\n            {\n                const { id, key, disabled } = action;\n                const element = state.droppable.containers.get(id);\n                if (!element || key !== element.key) {\n                    return state;\n                }\n                const containers = new DroppableContainersMap(state.droppable.containers);\n                containers.set(id, {\n                    ...element,\n                    disabled\n                });\n                return {\n                    ...state,\n                    droppable: {\n                        ...state.droppable,\n                        containers\n                    }\n                };\n            }\n        case Action.UnregisterDroppable:\n            {\n                const { id, key } = action;\n                const element = state.droppable.containers.get(id);\n                if (!element || key !== element.key) {\n                    return state;\n                }\n                const containers = new DroppableContainersMap(state.droppable.containers);\n                containers.delete(id);\n                return {\n                    ...state,\n                    droppable: {\n                        ...state.droppable,\n                        containers\n                    }\n                };\n            }\n        default:\n            {\n                return state;\n            }\n    }\n}\nfunction RestoreFocus(_ref) {\n    let { disabled } = _ref;\n    const { active, activatorEvent, draggableNodes } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(InternalContext);\n    const previousActivatorEvent = (0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.usePrevious)(activatorEvent);\n    const previousActiveId = (0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.usePrevious)(active == null ? void 0 : active.id); // Restore keyboard focus on the activator node\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"RestoreFocus.useEffect\": ()=>{\n            if (disabled) {\n                return;\n            }\n            if (!activatorEvent && previousActivatorEvent && previousActiveId != null) {\n                if (!(0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.isKeyboardEvent)(previousActivatorEvent)) {\n                    return;\n                }\n                if (document.activeElement === previousActivatorEvent.target) {\n                    // No need to restore focus\n                    return;\n                }\n                const draggableNode = draggableNodes.get(previousActiveId);\n                if (!draggableNode) {\n                    return;\n                }\n                const { activatorNode, node } = draggableNode;\n                if (!activatorNode.current && !node.current) {\n                    return;\n                }\n                requestAnimationFrame({\n                    \"RestoreFocus.useEffect\": ()=>{\n                        for (const element of [\n                            activatorNode.current,\n                            node.current\n                        ]){\n                            if (!element) {\n                                continue;\n                            }\n                            const focusableNode = (0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.findFirstFocusableNode)(element);\n                            if (focusableNode) {\n                                focusableNode.focus();\n                                break;\n                            }\n                        }\n                    }\n                }[\"RestoreFocus.useEffect\"]);\n            }\n        }\n    }[\"RestoreFocus.useEffect\"], [\n        activatorEvent,\n        disabled,\n        draggableNodes,\n        previousActiveId,\n        previousActivatorEvent\n    ]);\n    return null;\n}\nfunction applyModifiers(modifiers, _ref) {\n    let { transform, ...args } = _ref;\n    return modifiers != null && modifiers.length ? modifiers.reduce((accumulator, modifier)=>{\n        return modifier({\n            transform: accumulator,\n            ...args\n        });\n    }, transform) : transform;\n}\nfunction useMeasuringConfiguration(config) {\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"useMeasuringConfiguration.useMemo\": ()=>({\n                draggable: {\n                    ...defaultMeasuringConfiguration.draggable,\n                    ...config == null ? void 0 : config.draggable\n                },\n                droppable: {\n                    ...defaultMeasuringConfiguration.droppable,\n                    ...config == null ? void 0 : config.droppable\n                },\n                dragOverlay: {\n                    ...defaultMeasuringConfiguration.dragOverlay,\n                    ...config == null ? void 0 : config.dragOverlay\n                }\n            })\n    }[\"useMeasuringConfiguration.useMemo\"], [\n        config == null ? void 0 : config.draggable,\n        config == null ? void 0 : config.droppable,\n        config == null ? void 0 : config.dragOverlay\n    ]);\n}\nfunction useLayoutShiftScrollCompensation(_ref) {\n    let { activeNode, measure, initialRect, config = true } = _ref;\n    const initialized = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    const { x, y } = typeof config === 'boolean' ? {\n        x: config,\n        y: config\n    } : config;\n    (0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.useIsomorphicLayoutEffect)({\n        \"useLayoutShiftScrollCompensation.useIsomorphicLayoutEffect\": ()=>{\n            const disabled = !x && !y;\n            if (disabled || !activeNode) {\n                initialized.current = false;\n                return;\n            }\n            if (initialized.current || !initialRect) {\n                // Return early if layout shift scroll compensation was already attempted\n                // or if there is no initialRect to compare to.\n                return;\n            } // Get the most up to date node ref for the active draggable\n            const node = activeNode == null ? void 0 : activeNode.node.current;\n            if (!node || node.isConnected === false) {\n                // Return early if there is no attached node ref or if the node is\n                // disconnected from the document.\n                return;\n            }\n            const rect = measure(node);\n            const rectDelta = getRectDelta(rect, initialRect);\n            if (!x) {\n                rectDelta.x = 0;\n            }\n            if (!y) {\n                rectDelta.y = 0;\n            } // Only perform layout shift scroll compensation once\n            initialized.current = true;\n            if (Math.abs(rectDelta.x) > 0 || Math.abs(rectDelta.y) > 0) {\n                const firstScrollableAncestor = getFirstScrollableAncestor(node);\n                if (firstScrollableAncestor) {\n                    firstScrollableAncestor.scrollBy({\n                        top: rectDelta.y,\n                        left: rectDelta.x\n                    });\n                }\n            }\n        }\n    }[\"useLayoutShiftScrollCompensation.useIsomorphicLayoutEffect\"], [\n        activeNode,\n        x,\n        y,\n        initialRect,\n        measure\n    ]);\n}\nconst ActiveDraggableContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({\n    ...defaultCoordinates,\n    scaleX: 1,\n    scaleY: 1\n});\nvar Status;\n(function(Status) {\n    Status[Status[\"Uninitialized\"] = 0] = \"Uninitialized\";\n    Status[Status[\"Initializing\"] = 1] = \"Initializing\";\n    Status[Status[\"Initialized\"] = 2] = \"Initialized\";\n})(Status || (Status = {}));\nconst DndContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(function DndContext(_ref) {\n    var _sensorContext$curren, _dragOverlay$nodeRef$, _dragOverlay$rect, _over$rect;\n    let { id, accessibility, autoScroll = true, children, sensors = defaultSensors, collisionDetection = rectIntersection, measuring, modifiers, ...props } = _ref;\n    const store = (0,react__WEBPACK_IMPORTED_MODULE_0__.useReducer)(reducer, undefined, getInitialState);\n    const [state, dispatch] = store;\n    const [dispatchMonitorEvent, registerMonitorListener] = useDndMonitorProvider();\n    const [status, setStatus] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(Status.Uninitialized);\n    const isInitialized = status === Status.Initialized;\n    const { draggable: { active: activeId, nodes: draggableNodes, translate }, droppable: { containers: droppableContainers } } = state;\n    const node = activeId != null ? draggableNodes.get(activeId) : null;\n    const activeRects = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({\n        initial: null,\n        translated: null\n    });\n    const active = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"DndContext.DndContext.useMemo[active]\": ()=>{\n            var _node$data;\n            return activeId != null ? {\n                id: activeId,\n                // It's possible for the active node to unmount while dragging\n                data: (_node$data = node == null ? void 0 : node.data) != null ? _node$data : defaultData,\n                rect: activeRects\n            } : null;\n        }\n    }[\"DndContext.DndContext.useMemo[active]\"], [\n        activeId,\n        node\n    ]);\n    const activeRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const [activeSensor, setActiveSensor] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [activatorEvent, setActivatorEvent] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const latestProps = (0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.useLatestValue)(props, Object.values(props));\n    const draggableDescribedById = (0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.useUniqueId)(\"DndDescribedBy\", id);\n    const enabledDroppableContainers = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"DndContext.DndContext.useMemo[enabledDroppableContainers]\": ()=>droppableContainers.getEnabled()\n    }[\"DndContext.DndContext.useMemo[enabledDroppableContainers]\"], [\n        droppableContainers\n    ]);\n    const measuringConfiguration = useMeasuringConfiguration(measuring);\n    const { droppableRects, measureDroppableContainers, measuringScheduled } = useDroppableMeasuring(enabledDroppableContainers, {\n        dragging: isInitialized,\n        dependencies: [\n            translate.x,\n            translate.y\n        ],\n        config: measuringConfiguration.droppable\n    });\n    const activeNode = useCachedNode(draggableNodes, activeId);\n    const activationCoordinates = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"DndContext.DndContext.useMemo[activationCoordinates]\": ()=>activatorEvent ? (0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.getEventCoordinates)(activatorEvent) : null\n    }[\"DndContext.DndContext.useMemo[activationCoordinates]\"], [\n        activatorEvent\n    ]);\n    const autoScrollOptions = getAutoScrollerOptions();\n    const initialActiveNodeRect = useInitialRect(activeNode, measuringConfiguration.draggable.measure);\n    useLayoutShiftScrollCompensation({\n        activeNode: activeId != null ? draggableNodes.get(activeId) : null,\n        config: autoScrollOptions.layoutShiftCompensation,\n        initialRect: initialActiveNodeRect,\n        measure: measuringConfiguration.draggable.measure\n    });\n    const activeNodeRect = useRect(activeNode, measuringConfiguration.draggable.measure, initialActiveNodeRect);\n    const containerNodeRect = useRect(activeNode ? activeNode.parentElement : null);\n    const sensorContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({\n        activatorEvent: null,\n        active: null,\n        activeNode,\n        collisionRect: null,\n        collisions: null,\n        droppableRects,\n        draggableNodes,\n        draggingNode: null,\n        draggingNodeRect: null,\n        droppableContainers,\n        over: null,\n        scrollableAncestors: [],\n        scrollAdjustedTranslate: null\n    });\n    const overNode = droppableContainers.getNodeFor((_sensorContext$curren = sensorContext.current.over) == null ? void 0 : _sensorContext$curren.id);\n    const dragOverlay = useDragOverlayMeasuring({\n        measure: measuringConfiguration.dragOverlay.measure\n    }); // Use the rect of the drag overlay if it is mounted\n    const draggingNode = (_dragOverlay$nodeRef$ = dragOverlay.nodeRef.current) != null ? _dragOverlay$nodeRef$ : activeNode;\n    const draggingNodeRect = isInitialized ? (_dragOverlay$rect = dragOverlay.rect) != null ? _dragOverlay$rect : activeNodeRect : null;\n    const usesDragOverlay = Boolean(dragOverlay.nodeRef.current && dragOverlay.rect); // The delta between the previous and new position of the draggable node\n    // is only relevant when there is no drag overlay\n    const nodeRectDelta = useRectDelta(usesDragOverlay ? null : activeNodeRect); // Get the window rect of the dragging node\n    const windowRect = useWindowRect(draggingNode ? (0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.getWindow)(draggingNode) : null); // Get scrollable ancestors of the dragging node\n    const scrollableAncestors = useScrollableAncestors(isInitialized ? overNode != null ? overNode : activeNode : null);\n    const scrollableAncestorRects = useRects(scrollableAncestors); // Apply modifiers\n    const modifiedTranslate = applyModifiers(modifiers, {\n        transform: {\n            x: translate.x - nodeRectDelta.x,\n            y: translate.y - nodeRectDelta.y,\n            scaleX: 1,\n            scaleY: 1\n        },\n        activatorEvent,\n        active,\n        activeNodeRect,\n        containerNodeRect,\n        draggingNodeRect,\n        over: sensorContext.current.over,\n        overlayNodeRect: dragOverlay.rect,\n        scrollableAncestors,\n        scrollableAncestorRects,\n        windowRect\n    });\n    const pointerCoordinates = activationCoordinates ? (0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.add)(activationCoordinates, translate) : null;\n    const scrollOffsets = useScrollOffsets(scrollableAncestors); // Represents the scroll delta since dragging was initiated\n    const scrollAdjustment = useScrollOffsetsDelta(scrollOffsets); // Represents the scroll delta since the last time the active node rect was measured\n    const activeNodeScrollDelta = useScrollOffsetsDelta(scrollOffsets, [\n        activeNodeRect\n    ]);\n    const scrollAdjustedTranslate = (0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.add)(modifiedTranslate, scrollAdjustment);\n    const collisionRect = draggingNodeRect ? getAdjustedRect(draggingNodeRect, modifiedTranslate) : null;\n    const collisions = active && collisionRect ? collisionDetection({\n        active,\n        collisionRect,\n        droppableRects,\n        droppableContainers: enabledDroppableContainers,\n        pointerCoordinates\n    }) : null;\n    const overId = getFirstCollision(collisions, 'id');\n    const [over, setOver] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null); // When there is no drag overlay used, we need to account for the\n    // window scroll delta\n    const appliedTranslate = usesDragOverlay ? modifiedTranslate : (0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.add)(modifiedTranslate, activeNodeScrollDelta);\n    const transform = adjustScale(appliedTranslate, (_over$rect = over == null ? void 0 : over.rect) != null ? _over$rect : null, activeNodeRect);\n    const activeSensorRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const instantiateSensor = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"DndContext.DndContext.useCallback[instantiateSensor]\": (event, _ref2)=>{\n            let { sensor: Sensor, options } = _ref2;\n            if (activeRef.current == null) {\n                return;\n            }\n            const activeNode = draggableNodes.get(activeRef.current);\n            if (!activeNode) {\n                return;\n            }\n            const activatorEvent = event.nativeEvent;\n            const sensorInstance = new Sensor({\n                active: activeRef.current,\n                activeNode,\n                event: activatorEvent,\n                options,\n                // Sensors need to be instantiated with refs for arguments that change over time\n                // otherwise they are frozen in time with the stale arguments\n                context: sensorContext,\n                onAbort (id) {\n                    const draggableNode = draggableNodes.get(id);\n                    if (!draggableNode) {\n                        return;\n                    }\n                    const { onDragAbort } = latestProps.current;\n                    const event = {\n                        id\n                    };\n                    onDragAbort == null ? void 0 : onDragAbort(event);\n                    dispatchMonitorEvent({\n                        type: 'onDragAbort',\n                        event\n                    });\n                },\n                onPending (id, constraint, initialCoordinates, offset) {\n                    const draggableNode = draggableNodes.get(id);\n                    if (!draggableNode) {\n                        return;\n                    }\n                    const { onDragPending } = latestProps.current;\n                    const event = {\n                        id,\n                        constraint,\n                        initialCoordinates,\n                        offset\n                    };\n                    onDragPending == null ? void 0 : onDragPending(event);\n                    dispatchMonitorEvent({\n                        type: 'onDragPending',\n                        event\n                    });\n                },\n                onStart (initialCoordinates) {\n                    const id = activeRef.current;\n                    if (id == null) {\n                        return;\n                    }\n                    const draggableNode = draggableNodes.get(id);\n                    if (!draggableNode) {\n                        return;\n                    }\n                    const { onDragStart } = latestProps.current;\n                    const event = {\n                        activatorEvent,\n                        active: {\n                            id,\n                            data: draggableNode.data,\n                            rect: activeRects\n                        }\n                    };\n                    (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.unstable_batchedUpdates)({\n                        \"DndContext.DndContext.useCallback[instantiateSensor]\": ()=>{\n                            onDragStart == null ? void 0 : onDragStart(event);\n                            setStatus(Status.Initializing);\n                            dispatch({\n                                type: Action.DragStart,\n                                initialCoordinates,\n                                active: id\n                            });\n                            dispatchMonitorEvent({\n                                type: 'onDragStart',\n                                event\n                            });\n                            setActiveSensor(activeSensorRef.current);\n                            setActivatorEvent(activatorEvent);\n                        }\n                    }[\"DndContext.DndContext.useCallback[instantiateSensor]\"]);\n                },\n                onMove (coordinates) {\n                    dispatch({\n                        type: Action.DragMove,\n                        coordinates\n                    });\n                },\n                onEnd: createHandler(Action.DragEnd),\n                onCancel: createHandler(Action.DragCancel)\n            });\n            activeSensorRef.current = sensorInstance;\n            function createHandler(type) {\n                return async function handler() {\n                    const { active, collisions, over, scrollAdjustedTranslate } = sensorContext.current;\n                    let event = null;\n                    if (active && scrollAdjustedTranslate) {\n                        const { cancelDrop } = latestProps.current;\n                        event = {\n                            activatorEvent,\n                            active: active,\n                            collisions,\n                            delta: scrollAdjustedTranslate,\n                            over\n                        };\n                        if (type === Action.DragEnd && typeof cancelDrop === 'function') {\n                            const shouldCancel = await Promise.resolve(cancelDrop(event));\n                            if (shouldCancel) {\n                                type = Action.DragCancel;\n                            }\n                        }\n                    }\n                    activeRef.current = null;\n                    (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.unstable_batchedUpdates)({\n                        \"DndContext.DndContext.useCallback[instantiateSensor].createHandler.handler\": ()=>{\n                            dispatch({\n                                type\n                            });\n                            setStatus(Status.Uninitialized);\n                            setOver(null);\n                            setActiveSensor(null);\n                            setActivatorEvent(null);\n                            activeSensorRef.current = null;\n                            const eventName = type === Action.DragEnd ? 'onDragEnd' : 'onDragCancel';\n                            if (event) {\n                                const handler = latestProps.current[eventName];\n                                handler == null ? void 0 : handler(event);\n                                dispatchMonitorEvent({\n                                    type: eventName,\n                                    event\n                                });\n                            }\n                        }\n                    }[\"DndContext.DndContext.useCallback[instantiateSensor].createHandler.handler\"]);\n                };\n            }\n        }\n    }[\"DndContext.DndContext.useCallback[instantiateSensor]\"], [\n        draggableNodes\n    ]);\n    const bindActivatorToSensorInstantiator = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"DndContext.DndContext.useCallback[bindActivatorToSensorInstantiator]\": (handler, sensor)=>{\n            return ({\n                \"DndContext.DndContext.useCallback[bindActivatorToSensorInstantiator]\": (event, active)=>{\n                    const nativeEvent = event.nativeEvent;\n                    const activeDraggableNode = draggableNodes.get(active);\n                    if (activeRef.current !== null || // No active draggable\n                    !activeDraggableNode || // Event has already been captured\n                    nativeEvent.dndKit || nativeEvent.defaultPrevented) {\n                        return;\n                    }\n                    const activationContext = {\n                        active: activeDraggableNode\n                    };\n                    const shouldActivate = handler(event, sensor.options, activationContext);\n                    if (shouldActivate === true) {\n                        nativeEvent.dndKit = {\n                            capturedBy: sensor.sensor\n                        };\n                        activeRef.current = active;\n                        instantiateSensor(event, sensor);\n                    }\n                }\n            })[\"DndContext.DndContext.useCallback[bindActivatorToSensorInstantiator]\"];\n        }\n    }[\"DndContext.DndContext.useCallback[bindActivatorToSensorInstantiator]\"], [\n        draggableNodes,\n        instantiateSensor\n    ]);\n    const activators = useCombineActivators(sensors, bindActivatorToSensorInstantiator);\n    useSensorSetup(sensors);\n    (0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.useIsomorphicLayoutEffect)({\n        \"DndContext.DndContext.useIsomorphicLayoutEffect\": ()=>{\n            if (activeNodeRect && status === Status.Initializing) {\n                setStatus(Status.Initialized);\n            }\n        }\n    }[\"DndContext.DndContext.useIsomorphicLayoutEffect\"], [\n        activeNodeRect,\n        status\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"DndContext.DndContext.useEffect\": ()=>{\n            const { onDragMove } = latestProps.current;\n            const { active, activatorEvent, collisions, over } = sensorContext.current;\n            if (!active || !activatorEvent) {\n                return;\n            }\n            const event = {\n                active,\n                activatorEvent,\n                collisions,\n                delta: {\n                    x: scrollAdjustedTranslate.x,\n                    y: scrollAdjustedTranslate.y\n                },\n                over\n            };\n            (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.unstable_batchedUpdates)({\n                \"DndContext.DndContext.useEffect\": ()=>{\n                    onDragMove == null ? void 0 : onDragMove(event);\n                    dispatchMonitorEvent({\n                        type: 'onDragMove',\n                        event\n                    });\n                }\n            }[\"DndContext.DndContext.useEffect\"]);\n        }\n    }[\"DndContext.DndContext.useEffect\"], [\n        scrollAdjustedTranslate.x,\n        scrollAdjustedTranslate.y\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"DndContext.DndContext.useEffect\": ()=>{\n            const { active, activatorEvent, collisions, droppableContainers, scrollAdjustedTranslate } = sensorContext.current;\n            if (!active || activeRef.current == null || !activatorEvent || !scrollAdjustedTranslate) {\n                return;\n            }\n            const { onDragOver } = latestProps.current;\n            const overContainer = droppableContainers.get(overId);\n            const over = overContainer && overContainer.rect.current ? {\n                id: overContainer.id,\n                rect: overContainer.rect.current,\n                data: overContainer.data,\n                disabled: overContainer.disabled\n            } : null;\n            const event = {\n                active,\n                activatorEvent,\n                collisions,\n                delta: {\n                    x: scrollAdjustedTranslate.x,\n                    y: scrollAdjustedTranslate.y\n                },\n                over\n            };\n            (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.unstable_batchedUpdates)({\n                \"DndContext.DndContext.useEffect\": ()=>{\n                    setOver(over);\n                    onDragOver == null ? void 0 : onDragOver(event);\n                    dispatchMonitorEvent({\n                        type: 'onDragOver',\n                        event\n                    });\n                }\n            }[\"DndContext.DndContext.useEffect\"]);\n        }\n    }[\"DndContext.DndContext.useEffect\"], [\n        overId\n    ]);\n    (0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.useIsomorphicLayoutEffect)({\n        \"DndContext.DndContext.useIsomorphicLayoutEffect\": ()=>{\n            sensorContext.current = {\n                activatorEvent,\n                active,\n                activeNode,\n                collisionRect,\n                collisions,\n                droppableRects,\n                draggableNodes,\n                draggingNode,\n                draggingNodeRect,\n                droppableContainers,\n                over,\n                scrollableAncestors,\n                scrollAdjustedTranslate\n            };\n            activeRects.current = {\n                initial: draggingNodeRect,\n                translated: collisionRect\n            };\n        }\n    }[\"DndContext.DndContext.useIsomorphicLayoutEffect\"], [\n        active,\n        activeNode,\n        collisions,\n        collisionRect,\n        draggableNodes,\n        draggingNode,\n        draggingNodeRect,\n        droppableRects,\n        droppableContainers,\n        over,\n        scrollableAncestors,\n        scrollAdjustedTranslate\n    ]);\n    useAutoScroller({\n        ...autoScrollOptions,\n        delta: translate,\n        draggingRect: collisionRect,\n        pointerCoordinates,\n        scrollableAncestors,\n        scrollableAncestorRects\n    });\n    const publicContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"DndContext.DndContext.useMemo[publicContext]\": ()=>{\n            const context = {\n                active,\n                activeNode,\n                activeNodeRect,\n                activatorEvent,\n                collisions,\n                containerNodeRect,\n                dragOverlay,\n                draggableNodes,\n                droppableContainers,\n                droppableRects,\n                over,\n                measureDroppableContainers,\n                scrollableAncestors,\n                scrollableAncestorRects,\n                measuringConfiguration,\n                measuringScheduled,\n                windowRect\n            };\n            return context;\n        }\n    }[\"DndContext.DndContext.useMemo[publicContext]\"], [\n        active,\n        activeNode,\n        activeNodeRect,\n        activatorEvent,\n        collisions,\n        containerNodeRect,\n        dragOverlay,\n        draggableNodes,\n        droppableContainers,\n        droppableRects,\n        over,\n        measureDroppableContainers,\n        scrollableAncestors,\n        scrollableAncestorRects,\n        measuringConfiguration,\n        measuringScheduled,\n        windowRect\n    ]);\n    const internalContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"DndContext.DndContext.useMemo[internalContext]\": ()=>{\n            const context = {\n                activatorEvent,\n                activators,\n                active,\n                activeNodeRect,\n                ariaDescribedById: {\n                    draggable: draggableDescribedById\n                },\n                dispatch,\n                draggableNodes,\n                over,\n                measureDroppableContainers\n            };\n            return context;\n        }\n    }[\"DndContext.DndContext.useMemo[internalContext]\"], [\n        activatorEvent,\n        activators,\n        active,\n        activeNodeRect,\n        dispatch,\n        draggableDescribedById,\n        draggableNodes,\n        over,\n        measureDroppableContainers\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(DndMonitorContext.Provider, {\n        value: registerMonitorListener\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(InternalContext.Provider, {\n        value: internalContext\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(PublicContext.Provider, {\n        value: publicContext\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(ActiveDraggableContext.Provider, {\n        value: transform\n    }, children)), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(RestoreFocus, {\n        disabled: (accessibility == null ? void 0 : accessibility.restoreFocus) === false\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Accessibility, {\n        ...accessibility,\n        hiddenTextDescribedById: draggableDescribedById\n    }));\n    function getAutoScrollerOptions() {\n        const activeSensorDisablesAutoscroll = (activeSensor == null ? void 0 : activeSensor.autoScrollEnabled) === false;\n        const autoScrollGloballyDisabled = typeof autoScroll === 'object' ? autoScroll.enabled === false : autoScroll === false;\n        const enabled = isInitialized && !activeSensorDisablesAutoscroll && !autoScrollGloballyDisabled;\n        if (typeof autoScroll === 'object') {\n            return {\n                ...autoScroll,\n                enabled\n            };\n        }\n        return {\n            enabled\n        };\n    }\n});\nconst NullContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nconst defaultRole = 'button';\nconst ID_PREFIX = 'Draggable';\nfunction useDraggable(_ref) {\n    let { id, data, disabled = false, attributes } = _ref;\n    const key = (0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.useUniqueId)(ID_PREFIX);\n    const { activators, activatorEvent, active, activeNodeRect, ariaDescribedById, draggableNodes, over } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(InternalContext);\n    const { role = defaultRole, roleDescription = 'draggable', tabIndex = 0 } = attributes != null ? attributes : {};\n    const isDragging = (active == null ? void 0 : active.id) === id;\n    const transform = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(isDragging ? ActiveDraggableContext : NullContext);\n    const [node, setNodeRef] = (0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.useNodeRef)();\n    const [activatorNode, setActivatorNodeRef] = (0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.useNodeRef)();\n    const listeners = useSyntheticListeners(activators, id);\n    const dataRef = (0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.useLatestValue)(data);\n    (0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.useIsomorphicLayoutEffect)({\n        \"useDraggable.useIsomorphicLayoutEffect\": ()=>{\n            draggableNodes.set(id, {\n                id,\n                key,\n                node,\n                activatorNode,\n                data: dataRef\n            });\n            return ({\n                \"useDraggable.useIsomorphicLayoutEffect\": ()=>{\n                    const node = draggableNodes.get(id);\n                    if (node && node.key === key) {\n                        draggableNodes.delete(id);\n                    }\n                }\n            })[\"useDraggable.useIsomorphicLayoutEffect\"];\n        }\n    }[\"useDraggable.useIsomorphicLayoutEffect\"], [\n        draggableNodes,\n        id\n    ]);\n    const memoizedAttributes = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"useDraggable.useMemo[memoizedAttributes]\": ()=>({\n                role,\n                tabIndex,\n                'aria-disabled': disabled,\n                'aria-pressed': isDragging && role === defaultRole ? true : undefined,\n                'aria-roledescription': roleDescription,\n                'aria-describedby': ariaDescribedById.draggable\n            })\n    }[\"useDraggable.useMemo[memoizedAttributes]\"], [\n        disabled,\n        role,\n        tabIndex,\n        isDragging,\n        roleDescription,\n        ariaDescribedById.draggable\n    ]);\n    return {\n        active,\n        activatorEvent,\n        activeNodeRect,\n        attributes: memoizedAttributes,\n        isDragging,\n        listeners: disabled ? undefined : listeners,\n        node,\n        over,\n        setNodeRef,\n        setActivatorNodeRef,\n        transform\n    };\n}\nfunction useDndContext() {\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(PublicContext);\n}\nconst ID_PREFIX$1 = 'Droppable';\nconst defaultResizeObserverConfig = {\n    timeout: 25\n};\nfunction useDroppable(_ref) {\n    let { data, disabled = false, id, resizeObserverConfig } = _ref;\n    const key = (0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.useUniqueId)(ID_PREFIX$1);\n    const { active, dispatch, over, measureDroppableContainers } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(InternalContext);\n    const previous = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({\n        disabled\n    });\n    const resizeObserverConnected = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    const rect = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const callbackId = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const { disabled: resizeObserverDisabled, updateMeasurementsFor, timeout: resizeObserverTimeout } = {\n        ...defaultResizeObserverConfig,\n        ...resizeObserverConfig\n    };\n    const ids = (0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.useLatestValue)(updateMeasurementsFor != null ? updateMeasurementsFor : id);\n    const handleResize = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useDroppable.useCallback[handleResize]\": ()=>{\n            if (!resizeObserverConnected.current) {\n                // ResizeObserver invokes the `handleResize` callback as soon as `observe` is called,\n                // assuming the element is rendered and displayed.\n                resizeObserverConnected.current = true;\n                return;\n            }\n            if (callbackId.current != null) {\n                clearTimeout(callbackId.current);\n            }\n            callbackId.current = setTimeout({\n                \"useDroppable.useCallback[handleResize]\": ()=>{\n                    measureDroppableContainers(Array.isArray(ids.current) ? ids.current : [\n                        ids.current\n                    ]);\n                    callbackId.current = null;\n                }\n            }[\"useDroppable.useCallback[handleResize]\"], resizeObserverTimeout);\n        }\n    }[\"useDroppable.useCallback[handleResize]\"], [\n        resizeObserverTimeout\n    ]);\n    const resizeObserver = useResizeObserver({\n        callback: handleResize,\n        disabled: resizeObserverDisabled || !active\n    });\n    const handleNodeChange = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useDroppable.useCallback[handleNodeChange]\": (newElement, previousElement)=>{\n            if (!resizeObserver) {\n                return;\n            }\n            if (previousElement) {\n                resizeObserver.unobserve(previousElement);\n                resizeObserverConnected.current = false;\n            }\n            if (newElement) {\n                resizeObserver.observe(newElement);\n            }\n        }\n    }[\"useDroppable.useCallback[handleNodeChange]\"], [\n        resizeObserver\n    ]);\n    const [nodeRef, setNodeRef] = (0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.useNodeRef)(handleNodeChange);\n    const dataRef = (0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.useLatestValue)(data);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useDroppable.useEffect\": ()=>{\n            if (!resizeObserver || !nodeRef.current) {\n                return;\n            }\n            resizeObserver.disconnect();\n            resizeObserverConnected.current = false;\n            resizeObserver.observe(nodeRef.current);\n        }\n    }[\"useDroppable.useEffect\"], [\n        nodeRef,\n        resizeObserver\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useDroppable.useEffect\": ()=>{\n            dispatch({\n                type: Action.RegisterDroppable,\n                element: {\n                    id,\n                    key,\n                    disabled,\n                    node: nodeRef,\n                    rect,\n                    data: dataRef\n                }\n            });\n            return ({\n                \"useDroppable.useEffect\": ()=>dispatch({\n                        type: Action.UnregisterDroppable,\n                        key,\n                        id\n                    })\n            })[\"useDroppable.useEffect\"];\n        }\n    }[\"useDroppable.useEffect\"], [\n        id\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useDroppable.useEffect\": ()=>{\n            if (disabled !== previous.current.disabled) {\n                dispatch({\n                    type: Action.SetDroppableDisabled,\n                    id,\n                    key,\n                    disabled\n                });\n                previous.current.disabled = disabled;\n            }\n        }\n    }[\"useDroppable.useEffect\"], [\n        id,\n        key,\n        disabled,\n        dispatch\n    ]);\n    return {\n        active,\n        rect,\n        isOver: (over == null ? void 0 : over.id) === id,\n        node: nodeRef,\n        over,\n        setNodeRef\n    };\n}\nfunction AnimationManager(_ref) {\n    let { animation, children } = _ref;\n    const [clonedChildren, setClonedChildren] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [element, setElement] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const previousChildren = (0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.usePrevious)(children);\n    if (!children && !clonedChildren && previousChildren) {\n        setClonedChildren(previousChildren);\n    }\n    (0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.useIsomorphicLayoutEffect)({\n        \"AnimationManager.useIsomorphicLayoutEffect\": ()=>{\n            if (!element) {\n                return;\n            }\n            const key = clonedChildren == null ? void 0 : clonedChildren.key;\n            const id = clonedChildren == null ? void 0 : clonedChildren.props.id;\n            if (key == null || id == null) {\n                setClonedChildren(null);\n                return;\n            }\n            Promise.resolve(animation(id, element)).then({\n                \"AnimationManager.useIsomorphicLayoutEffect\": ()=>{\n                    setClonedChildren(null);\n                }\n            }[\"AnimationManager.useIsomorphicLayoutEffect\"]);\n        }\n    }[\"AnimationManager.useIsomorphicLayoutEffect\"], [\n        animation,\n        clonedChildren,\n        element\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, children, clonedChildren ? /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.cloneElement)(clonedChildren, {\n        ref: setElement\n    }) : null);\n}\nconst defaultTransform = {\n    x: 0,\n    y: 0,\n    scaleX: 1,\n    scaleY: 1\n};\nfunction NullifiedContextProvider(_ref) {\n    let { children } = _ref;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(InternalContext.Provider, {\n        value: defaultInternalContext\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(ActiveDraggableContext.Provider, {\n        value: defaultTransform\n    }, children));\n}\nconst baseStyles = {\n    position: 'fixed',\n    touchAction: 'none'\n};\nconst defaultTransition = (activatorEvent)=>{\n    const isKeyboardActivator = (0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.isKeyboardEvent)(activatorEvent);\n    return isKeyboardActivator ? 'transform 250ms ease' : undefined;\n};\nconst PositionedOverlay = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((_ref, ref)=>{\n    let { as, activatorEvent, adjustScale, children, className, rect, style, transform, transition = defaultTransition } = _ref;\n    if (!rect) {\n        return null;\n    }\n    const scaleAdjustedTransform = adjustScale ? transform : {\n        ...transform,\n        scaleX: 1,\n        scaleY: 1\n    };\n    const styles = {\n        ...baseStyles,\n        width: rect.width,\n        height: rect.height,\n        top: rect.top,\n        left: rect.left,\n        transform: _barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.CSS.Transform.toString(scaleAdjustedTransform),\n        transformOrigin: adjustScale && activatorEvent ? getRelativeTransformOrigin(activatorEvent, rect) : undefined,\n        transition: typeof transition === 'function' ? transition(activatorEvent) : transition,\n        ...style\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(as, {\n        className,\n        style: styles,\n        ref\n    }, children);\n});\nconst defaultDropAnimationSideEffects = (options)=>(_ref)=>{\n        let { active, dragOverlay } = _ref;\n        const originalStyles = {};\n        const { styles, className } = options;\n        if (styles != null && styles.active) {\n            for (const [key, value] of Object.entries(styles.active)){\n                if (value === undefined) {\n                    continue;\n                }\n                originalStyles[key] = active.node.style.getPropertyValue(key);\n                active.node.style.setProperty(key, value);\n            }\n        }\n        if (styles != null && styles.dragOverlay) {\n            for (const [key, value] of Object.entries(styles.dragOverlay)){\n                if (value === undefined) {\n                    continue;\n                }\n                dragOverlay.node.style.setProperty(key, value);\n            }\n        }\n        if (className != null && className.active) {\n            active.node.classList.add(className.active);\n        }\n        if (className != null && className.dragOverlay) {\n            dragOverlay.node.classList.add(className.dragOverlay);\n        }\n        return function cleanup() {\n            for (const [key, value] of Object.entries(originalStyles)){\n                active.node.style.setProperty(key, value);\n            }\n            if (className != null && className.active) {\n                active.node.classList.remove(className.active);\n            }\n        };\n    };\nconst defaultKeyframeResolver = (_ref2)=>{\n    let { transform: { initial, final } } = _ref2;\n    return [\n        {\n            transform: _barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.CSS.Transform.toString(initial)\n        },\n        {\n            transform: _barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.CSS.Transform.toString(final)\n        }\n    ];\n};\nconst defaultDropAnimationConfiguration = {\n    duration: 250,\n    easing: 'ease',\n    keyframes: defaultKeyframeResolver,\n    sideEffects: /*#__PURE__*/ defaultDropAnimationSideEffects({\n        styles: {\n            active: {\n                opacity: '0'\n            }\n        }\n    })\n};\nfunction useDropAnimation(_ref3) {\n    let { config, draggableNodes, droppableContainers, measuringConfiguration } = _ref3;\n    return (0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.useEvent)({\n        \"useDropAnimation.useEvent\": (id, node)=>{\n            if (config === null) {\n                return;\n            }\n            const activeDraggable = draggableNodes.get(id);\n            if (!activeDraggable) {\n                return;\n            }\n            const activeNode = activeDraggable.node.current;\n            if (!activeNode) {\n                return;\n            }\n            const measurableNode = getMeasurableNode(node);\n            if (!measurableNode) {\n                return;\n            }\n            const { transform } = (0,_barrel_optimize_names_CSS_add_canUseDOM_findFirstFocusableNode_getEventCoordinates_getOwnerDocument_getWindow_isDocument_isHTMLElement_isKeyboardEvent_isNode_isSVGElement_isWindow_subtract_useEvent_useInterval_useIsomorphicLayoutEffect_useLatestValue_useLazyMemo_useNodeRef_usePrevious_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.getWindow)(node).getComputedStyle(node);\n            const parsedTransform = parseTransform(transform);\n            if (!parsedTransform) {\n                return;\n            }\n            const animation = typeof config === 'function' ? config : createDefaultDropAnimation(config);\n            scrollIntoViewIfNeeded(activeNode, measuringConfiguration.draggable.measure);\n            return animation({\n                active: {\n                    id,\n                    data: activeDraggable.data,\n                    node: activeNode,\n                    rect: measuringConfiguration.draggable.measure(activeNode)\n                },\n                draggableNodes,\n                dragOverlay: {\n                    node,\n                    rect: measuringConfiguration.dragOverlay.measure(measurableNode)\n                },\n                droppableContainers,\n                measuringConfiguration,\n                transform: parsedTransform\n            });\n        }\n    }[\"useDropAnimation.useEvent\"]);\n}\nfunction createDefaultDropAnimation(options) {\n    const { duration, easing, sideEffects, keyframes } = {\n        ...defaultDropAnimationConfiguration,\n        ...options\n    };\n    return (_ref4)=>{\n        let { active, dragOverlay, transform, ...rest } = _ref4;\n        if (!duration) {\n            // Do not animate if animation duration is zero.\n            return;\n        }\n        const delta = {\n            x: dragOverlay.rect.left - active.rect.left,\n            y: dragOverlay.rect.top - active.rect.top\n        };\n        const scale = {\n            scaleX: transform.scaleX !== 1 ? active.rect.width * transform.scaleX / dragOverlay.rect.width : 1,\n            scaleY: transform.scaleY !== 1 ? active.rect.height * transform.scaleY / dragOverlay.rect.height : 1\n        };\n        const finalTransform = {\n            x: transform.x - delta.x,\n            y: transform.y - delta.y,\n            ...scale\n        };\n        const animationKeyframes = keyframes({\n            ...rest,\n            active,\n            dragOverlay,\n            transform: {\n                initial: transform,\n                final: finalTransform\n            }\n        });\n        const [firstKeyframe] = animationKeyframes;\n        const lastKeyframe = animationKeyframes[animationKeyframes.length - 1];\n        if (JSON.stringify(firstKeyframe) === JSON.stringify(lastKeyframe)) {\n            // The start and end keyframes are the same, infer that there is no animation needed.\n            return;\n        }\n        const cleanup = sideEffects == null ? void 0 : sideEffects({\n            active,\n            dragOverlay,\n            ...rest\n        });\n        const animation = dragOverlay.node.animate(animationKeyframes, {\n            duration,\n            easing,\n            fill: 'forwards'\n        });\n        return new Promise((resolve)=>{\n            animation.onfinish = ()=>{\n                cleanup == null ? void 0 : cleanup();\n                resolve();\n            };\n        });\n    };\n}\nlet key = 0;\nfunction useKey(id) {\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"useKey.useMemo\": ()=>{\n            if (id == null) {\n                return;\n            }\n            key++;\n            return key;\n        }\n    }[\"useKey.useMemo\"], [\n        id\n    ]);\n}\nconst DragOverlay = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().memo((_ref)=>{\n    let { adjustScale = false, children, dropAnimation: dropAnimationConfig, style, transition, modifiers, wrapperElement = 'div', className, zIndex = 999 } = _ref;\n    const { activatorEvent, active, activeNodeRect, containerNodeRect, draggableNodes, droppableContainers, dragOverlay, over, measuringConfiguration, scrollableAncestors, scrollableAncestorRects, windowRect } = useDndContext();\n    const transform = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ActiveDraggableContext);\n    const key = useKey(active == null ? void 0 : active.id);\n    const modifiedTransform = applyModifiers(modifiers, {\n        activatorEvent,\n        active,\n        activeNodeRect,\n        containerNodeRect,\n        draggingNodeRect: dragOverlay.rect,\n        over,\n        overlayNodeRect: dragOverlay.rect,\n        scrollableAncestors,\n        scrollableAncestorRects,\n        transform,\n        windowRect\n    });\n    const initialRect = useInitialValue(activeNodeRect);\n    const dropAnimation = useDropAnimation({\n        config: dropAnimationConfig,\n        draggableNodes,\n        droppableContainers,\n        measuringConfiguration\n    }); // We need to wait for the active node to be measured before connecting the drag overlay ref\n    // otherwise collisions can be computed against a mispositioned drag overlay\n    const ref = initialRect ? dragOverlay.setRef : undefined;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(NullifiedContextProvider, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(AnimationManager, {\n        animation: dropAnimation\n    }, active && key ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(PositionedOverlay, {\n        key: key,\n        id: active.id,\n        ref: ref,\n        as: wrapperElement,\n        activatorEvent: activatorEvent,\n        adjustScale: adjustScale,\n        className: className,\n        transition: transition,\n        rect: initialRect,\n        style: {\n            zIndex,\n            ...style\n        },\n        transform: modifiedTransform\n    }, children) : null));\n});\n //# sourceMappingURL=core.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRuZC1raXQvY29yZS9kaXN0L2NvcmUuZXNtLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBSU8sTUFBTUEsaUJBQWlCLGlCQUFHQyxvREFBYSxDQUEwQixJQUExQixDQUF2QztTQ0NTQyxjQUFjQyxRQUFBQTtJQUM1QixNQUFNQyxnQkFBZ0IsR0FBR0MsaURBQVUsQ0FBQ0wsaUJBQUQsQ0FBbkM7SUFFQU0sZ0RBQVM7bUNBQUM7WUFDUixJQUFJLENBQUNGLGdCQUFMLEVBQXVCO2dCQUNyQixNQUFNLElBQUlHLEtBQUosQ0FDSiw4REFESSxDQUFOOztZQUtGLE1BQU1DLFdBQVcsR0FBR0osZ0JBQWdCLENBQUNELFFBQUQsQ0FBcEM7WUFFQSxPQUFPSyxXQUFQO1NBVE87a0NBVU47UUFBQ0wsUUFBRDtRQUFXQyxnQkFBWDtLQVZNLENBQVQ7QUFXRDtTQ2ZlSztJQUNkLE1BQU0sQ0FBQ0MsU0FBRCxJQUFjQywrQ0FBUTswQ0FBQyxJQUFNLElBQUlDLEdBQUosRUFBUDs7SUFFNUIsTUFBTVIsZ0JBQWdCLEdBQUdTLGtEQUFXO2dFQUNqQ1YsUUFBRDtZQUNFTyxTQUFTLENBQUNJLEdBQVYsQ0FBY1gsUUFBZDtZQUNBO3VFQUFPLElBQU1PLFNBQVMsQ0FBQ0ssTUFBVixDQUFpQlosUUFBakIsQ0FBYjs7U0FIZ0M7OERBS2xDO1FBQUNPLFNBQUQ7S0FMa0MsQ0FBcEM7SUFRQSxNQUFNTSxRQUFRLEdBQUdILGtEQUFXO3dEQUMxQjtnQkFBQyxFQUFDSSxJQUFELEVBQU9DLEtBQUFBO1lBQ05SLFNBQVMsQ0FBQ1MsT0FBVjtnRUFBbUJoQixRQUFEO29CQUFBO29CQUFBLHlCQUFjQSxRQUFRLENBQUNjLEtBQUQsS0FBdEIsZ0JBQWMsb0JBQUFkLFFBQVEsRUFBU2UsS0FBVCxDQUF0QjtpQkFBbEI7O1NBRndCO3NEQUkxQjtRQUFDUixTQUFEO0tBSjBCLENBQTVCO0lBT0Es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QUNOK00sS0FBSyxFQUFFO1lBQ0x3QyxNQURLO1lBRUwsR0FBR3hDLEtBQUFBOztRQUVMdmlCLFNBQVMsRUFBRWdsQjtLQWRiLEVBZ0JHeE4sUUFoQkgsQ0FERCxHQW1CRyxJQXBCTixDQURGLENBREY7QUEwQkQsQ0E5RXdCLENBQXBCIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXHpla2VcXFByb2plY3RzXFxzcmNcXGNvbXBvbmVudHNcXERuZE1vbml0b3JcXGNvbnRleHQudHMiLCJDOlxcVXNlcnNcXHpla2VcXFByb2plY3RzXFxzcmNcXGNvbXBvbmVudHNcXERuZE1vbml0b3JcXHVzZURuZE1vbml0b3IudHMiLCJDOlxcVXNlcnNcXHpla2VcXFByb2plY3RzXFxzcmNcXGNvbXBvbmVudHNcXERuZE1vbml0b3JcXHVzZURuZE1vbml0b3JQcm92aWRlci50c3giLCJDOlxcVXNlcnNcXHpla2VcXFByb2plY3RzXFxzcmNcXGNvbXBvbmVudHNcXEFjY2Vzc2liaWxpdHlcXGRlZmF1bHRzLnRzIiwiQzpcXFVzZXJzXFx6ZWtlXFxQcm9qZWN0c1xcc3JjXFxjb21wb25lbnRzXFxBY2Nlc3NpYmlsaXR5XFxBY2Nlc3NpYmlsaXR5LnRzeCIsIkM6XFxVc2Vyc1xcemVrZVxcUHJvamVjdHNcXHNyY1xcc3RvcmVcXGFjdGlvbnMudHMiLCJDOlxcVXNlcnNcXHpla2VcXFByb2plY3RzXFxzcmNcXHV0aWxpdGllc1xcb3RoZXJcXG5vb3AudHMiLCJDOlxcVXNlcnNcXHpla2VcXFByb2plY3RzXFxzcmNcXHNlbnNvcnNcXHVzZVNlbnNvci50cyIsIkM6XFxVc2Vyc1xcemVrZVxcUHJvamVjdHNcXHNyY1xcc2Vuc29yc1xcdXNlU2Vuc29ycy50cyIsIkM6XFxVc2Vyc1xcemVrZVxcUHJvamVjdHNcXHNyY1xcdXRpbGl0aWVzXFxjb29yZGluYXRlc1xcY29uc3RhbnRzLnRzIiwiQzpcXFVzZXJzXFx6ZWtlXFxQcm9qZWN0c1xcc3JjXFx1dGlsaXRpZXNcXGNvb3JkaW5hdGVzXFxkaXN0YW5jZUJldHdlZW5Qb2ludHMudHMiLCJDOlxcVXNlcnNcXHpla2VcXFByb2plY3RzXFxzcmNcXHV0aWxpdGllc1xcY29vcmRpbmF0ZXNcXGdldFJlbGF0aXZlVHJhbnNmb3JtT3JpZ2luLnRzIiwiQzpcXFVzZXJzXFx6ZWtlXFxQcm9qZWN0c1xcc3JjXFx1dGlsaXRpZXNcXGFsZ29yaXRobXNcXGhlbHBlcnMudHMiLCJDOlxcVXNlcnNcXHpla2VcXFByb2plY3RzXFxzcmNcXHV0aWxpdGllc1xcYWxnb3JpdGhtc1xcY2xvc2VzdENlbnRlci50cyIsIkM6XFxVc2Vyc1xcemVrZVxcUHJvamVjdHNcXHNyY1xcdXRpbGl0aWVzXFxhbGdvcml0aG1zXFxjbG9zZXN0Q29ybmVycy50cyIsIkM6XFxVc2Vyc1xcemVrZVxcUHJvamVjdHNcXHNyY1xcdXRpbGl0aWVzXFxhbGdvcml0aG1zXFxyZWN0SW50ZXJzZWN0aW9uLnRzIiwiQzpcXFVzZXJzXFx6ZWtlXFxQcm9qZWN0c1xcc3JjXFx1dGlsaXRpZXNcXGFsZ29yaXRobXNcXHBvaW50ZXJXaXRoaW4udHMiLCJDOlxcVXNlcnNcXHpla2VcXFByb2plY3RzXFxzcmNcXHV0aWxpdGllc1xccmVjdFxcYWRqdXN0U2NhbGUudHMiLCJDOlxcVXNlcnNcXHpla2VcXFByb2plY3RzXFxzcmNcXHV0aWxpdGllc1xccmVjdFxcZ2V0UmVjdERlbHRhLnRzIiwiQzpcXFVzZXJzXFx6ZWtlXFxQcm9qZWN0c1xcc3JjXFx1dGlsaXRpZXNcXHJlY3RcXHJlY3RBZGp1c3RtZW50LnRzIiwiQzpcXFVzZXJzXFx6ZWtlXFxQcm9qZWN0c1xcc3JjXFx1dGlsaXRpZXNcXHRyYW5zZm9ybVxccGFyc2VUcmFuc2Zvcm0udHMiLCJDOlxcVXNlcnNcXHpla2VcXFByb2plY3RzXFxzcmNcXHV0aWxpdGllc1xcdHJhbnNmb3JtXFxpbnZlcnNlVHJhbnNmb3JtLnRzIiwiQzpcXFVzZXJzXFx6ZWtlXFxQcm9qZWN0c1xcc3JjXFx1dGlsaXRpZXNcXHJlY3RcXGdldFJlY3QudHMiLCJDOlxcVXNlcnNcXHpla2VcXFByb2plY3RzXFxzcmNcXHV0aWxpdGllc1xccmVjdFxcZ2V0V2luZG93Q2xpZW50UmVjdC50cyIsIkM6XFxVc2Vyc1xcemVrZVxcUHJvamVjdHNcXHNyY1xcdXRpbGl0aWVzXFxzY3JvbGxcXGlzRml4ZWQudHMiLCJDOlxcVXNlcnNcXHpla2VcXFByb2plY3RzXFxzcmNcXHV0aWxpdGllc1xcc2Nyb2xsXFxpc1Njcm9sbGFibGUudHMiLCJDOlxcVXNlcnNcXHpla2VcXFByb2plY3RzXFxzcmNcXHV0aWxpdGllc1xcc2Nyb2xsXFxnZXRTY3JvbGxhYmxlQW5jZXN0b3JzLnRzIiwiQzpcXFVzZXJzXFx6ZWtlXFxQcm9qZWN0c1xcc3JjXFx1dGlsaXRpZXNcXHNjcm9sbFxcZ2V0U2Nyb2xsYWJsZUVsZW1lbnQudHMiLCJDOlxcVXNlcnNcXHpla2VcXFByb2plY3RzXFxzcmNcXHV0aWxpdGllc1xcc2Nyb2xsXFxnZXRTY3JvbGxDb29yZGluYXRlcy50cyIsIkM6XFxVc2Vyc1xcemVrZVxcUHJvamVjdHNcXHNyY1xcdHlwZXNcXGRpcmVjdGlvbi50cyIsIkM6XFxVc2Vyc1xcemVrZVxcUHJvamVjdHNcXHNyY1xcdXRpbGl0aWVzXFxzY3JvbGxcXGRvY3VtZW50U2Nyb2xsaW5nRWxlbWVudC50cyIsIkM6XFxVc2Vyc1xcemVrZVxcUHJvamVjdHNcXHNyY1xcdXRpbGl0aWVzXFxzY3JvbGxcXGdldFNjcm9sbFBvc2l0aW9uLnRzIiwiQzpcXFVzZXJzXFx6ZWtlXFxQcm9qZWN0c1xcc3JjXFx1dGlsaXRpZXNcXHNjcm9sbFxcZ2V0U2Nyb2xsRGlyZWN0aW9uQW5kU3BlZWQudHMiLCJDOlxcVXNlcnNcXHpla2VcXFByb2plY3RzXFxzcmNcXHV0aWxpdGllc1xcc2Nyb2xsXFxnZXRTY3JvbGxFbGVtZW50UmVjdC50cyIsIkM6XFxVc2Vyc1xcemVrZVxcUHJvamVjdHNcXHNyY1xcdXRpbGl0aWVzXFxzY3JvbGxcXGdldFNjcm9sbE9mZnNldHMudHMiLCJDOlxcVXNlcnNcXHpla2VcXFByb2plY3RzXFxzcmNcXHV0aWxpdGllc1xcc2Nyb2xsXFxzY3JvbGxJbnRvVmlld0lmTmVlZGVkLnRzIiwiQzpcXFVzZXJzXFx6ZWtlXFxQcm9qZWN0c1xcc3JjXFx1dGlsaXRpZXNcXHJlY3RcXFJlY3QudHMiLCJDOlxcVXNlcnNcXHpla2VcXFByb2plY3RzXFxzcmNcXHNlbnNvcnNcXHV0aWxpdGllc1xcTGlzdGVuZXJzLnRzIiwiQzpcXFVzZXJzXFx6ZWtlXFxQcm9qZWN0c1xcc3JjXFxzZW5zb3JzXFx1dGlsaXRpZXNcXGdldEV2ZW50TGlzdGVuZXJUYXJnZXQudHMiLCJDOlxcVXNlcnNcXHpla2VcXFByb2plY3RzXFxzcmNcXHNlbnNvcnNcXHV0aWxpdGllc1xcaGFzRXhjZWVkZWREaXN0YW5jZS50cyIsIkM6XFxVc2Vyc1xcemVrZVxcUHJvamVjdHNcXHNyY1xcc2Vuc29yc1xcZXZlbnRzLnRzIiwiQzpcXFVzZXJzXFx6ZWtlXFxQcm9qZWN0c1xcc3JjXFxzZW5zb3JzXFxrZXlib2FyZFxcdHlwZXMudHMiLCJDOlxcVXNlcnNcXHpla2VcXFByb2plY3RzXFxzcmNcXHNlbnNvcnNcXGtleWJvYXJkXFxkZWZhdWx0cy50cyIsIkM6XFxVc2Vyc1xcemVrZVxcUHJvamVjdHNcXHNyY1xcc2Vuc29yc1xca2V5Ym9hcmRcXEtleWJvYXJkU2Vuc29yLnRzIiwiQzpcXFVzZXJzXFx6ZWtlXFxQcm9qZWN0c1xcc3JjXFxzZW5zb3JzXFxwb2ludGVyXFxBYnN0cmFjdFBvaW50ZXJTZW5zb3IudHMiLCJDOlxcVXNlcnNcXHpla2VcXFByb2plY3RzXFxzcmNcXHNlbnNvcnNcXHBvaW50ZXJcXFBvaW50ZXJTZW5zb3IudHMiLCJDOlxcVXNlcnNcXHpla2VcXFByb2plY3RzXFxzcmNcXHNlbnNvcnNcXG1vdXNlXFxNb3VzZVNlbnNvci50cyIsIkM6XFxVc2Vyc1xcemVrZVxcUHJvamVjdHNcXHNyY1xcc2Vuc29yc1xcdG91Y2hcXFRvdWNoU2Vuc29yLnRzIiwiQzpcXFVzZXJzXFx6ZWtlXFxQcm9qZWN0c1xcc3JjXFxob29rc1xcdXRpbGl0aWVzXFx1c2VBdXRvU2Nyb2xsZXIudHMiLCJDOlxcVXNlcnNcXHpla2VcXFByb2plY3RzXFxzcmNcXGhvb2tzXFx1dGlsaXRpZXNcXHVzZUNhY2hlZE5vZGUudHMiLCJDOlxcVXNlcnNcXHpla2VcXFByb2plY3RzXFxzcmNcXGhvb2tzXFx1dGlsaXRpZXNcXHVzZUNvbWJpbmVBY3RpdmF0b3JzLnRzIiwiQzpcXFVzZXJzXFx6ZWtlXFxQcm9qZWN0c1xcc3JjXFxob29rc1xcdXRpbGl0aWVzXFx1c2VEcm9wcGFibGVNZWFzdXJpbmcudHMiLCJDOlxcVXNlcnNcXHpla2VcXFByb2plY3RzXFxzcmNcXGhvb2tzXFx1dGlsaXRpZXNcXHVzZUluaXRpYWxWYWx1ZS50cyIsIkM6XFxVc2Vyc1xcemVrZVxcUHJvamVjdHNcXHNyY1xcaG9va3NcXHV0aWxpdGllc1xcdXNlSW5pdGlhbFJlY3QudHMiLCJDOlxcVXNlcnNcXHpla2VcXFByb2plY3RzXFxzcmNcXGhvb2tzXFx1dGlsaXRpZXNcXHVzZU11dGF0aW9uT2JzZXJ2ZXIudHMiLCJDOlxcVXNlcnNcXHpla2VcXFByb2plY3RzXFxzcmNcXGhvb2tzXFx1dGlsaXRpZXNcXHVzZVJlc2l6ZU9ic2VydmVyLnRzIiwiQzpcXFVzZXJzXFx6ZWtlXFxQcm9qZWN0c1xcc3JjXFxob29rc1xcdXRpbGl0aWVzXFx1c2VSZWN0LnRzIiwiQzpcXFVzZXJzXFx6ZWtlXFxQcm9qZWN0c1xcc3JjXFxob29rc1xcdXRpbGl0aWVzXFx1c2VSZWN0RGVsdGEudHMiLCJDOlxcVXNlcnNcXHpla2VcXFByb2plY3RzXFxzcmNcXGhvb2tzXFx1dGlsaXRpZXNcXHVzZVNjcm9sbGFibGVBbmNlc3RvcnMudHMiLCJDOlxcVXNlcnNcXHpla2VcXFByb2plY3RzXFxzcmNcXGhvb2tzXFx1dGlsaXRpZXNcXHVzZVNjcm9sbE9mZnNldHMudHMiLCJDOlxcVXNlcnNcXHpla2VcXFByb2plY3RzXFxzcmNcXGhvb2tzXFx1dGlsaXRpZXNcXHVzZVNjcm9sbE9mZnNldHNEZWx0YS50cyIsIkM6XFxVc2Vyc1xcemVrZVxcUHJvamVjdHNcXHNyY1xcaG9va3NcXHV0aWxpdGllc1xcdXNlU2Vuc29yU2V0dXAudHMiLCJDOlxcVXNlcnNcXHpla2VcXFByb2plY3RzXFxzcmNcXGhvb2tzXFx1dGlsaXRpZXNcXHVzZVN5bnRoZXRpY0xpc3RlbmVycy50cyIsIkM6XFxVc2Vyc1xcemVrZVxcUHJvamVjdHNcXHNyY1xcaG9va3NcXHV0aWxpdGllc1xcdXNlV2luZG93UmVjdC50cyIsIkM6XFxVc2Vyc1xcemVrZVxcUHJvamVjdHNcXHNyY1xcaG9va3NcXHV0aWxpdGllc1xcdXNlUmVjdHMudHMiLCJDOlxcVXNlcnNcXHpla2VcXFByb2plY3RzXFxzcmNcXHV0aWxpdGllc1xcbm9kZXNcXGdldE1lYXN1cmFibGVOb2RlLnRzIiwiQzpcXFVzZXJzXFx6ZWtlXFxQcm9qZWN0c1xcc3JjXFxob29rc1xcdXRpbGl0aWVzXFx1c2VEcmFnT3ZlcmxheU1lYXN1cmluZy50cyIsIkM6XFxVc2Vyc1xcemVrZVxcUHJvamVjdHNcXHNyY1xcY29tcG9uZW50c1xcRG5kQ29udGV4dFxcZGVmYXVsdHMudHMiLCJDOlxcVXNlcnNcXHpla2VcXFByb2plY3RzXFxzcmNcXHN0b3JlXFxjb25zdHJ1Y3RvcnMudHMiLCJDOlxcVXNlcnNcXHpla2VcXFByb2plY3RzXFxzcmNcXHN0b3JlXFxjb250ZXh0LnRzIiwiQzpcXFVzZXJzXFx6ZWtlXFxQcm9qZWN0c1xcc3JjXFxzdG9yZVxccmVkdWNlci50cyIsIkM6XFxVc2Vyc1xcemVrZVxcUHJvamVjdHNcXHNyY1xcY29tcG9uZW50c1xcQWNjZXNzaWJpbGl0eVxcY29tcG9uZW50c1xcUmVzdG9yZUZvY3VzLnRzeCIsIkM6XFxVc2Vyc1xcemVrZVxcUHJvamVjdHNcXHNyY1xcbW9kaWZpZXJzXFxhcHBseU1vZGlmaWVycy50cyIsIkM6XFxVc2Vyc1xcemVrZVxcUHJvamVjdHNcXHNyY1xcY29tcG9uZW50c1xcRG5kQ29udGV4dFxcaG9va3NcXHVzZU1lYXN1cmluZ0NvbmZpZ3VyYXRpb24udHMiLCJDOlxcVXNlcnNcXHpla2VcXFByb2plY3RzXFxzcmNcXGNvbXBvbmVudHNcXERuZENvbnRleHRcXGhvb2tzXFx1c2VMYXlvdXRTaGlmdFNjcm9sbENvbXBlbnNhdGlvbi50cyIsIkM6XFxVc2Vyc1xcemVrZVxcUHJvamVjdHNcXHNyY1xcY29tcG9uZW50c1xcRG5kQ29udGV4dFxcRG5kQ29udGV4dC50c3giLCJDOlxcVXNlcnNcXHpla2VcXFByb2plY3RzXFxzcmNcXGhvb2tzXFx1c2VEcmFnZ2FibGUudHMiLCJDOlxcVXNlcnNcXHpla2VcXFByb2plY3RzXFxzcmNcXGhvb2tzXFx1c2VEbmRDb250ZXh0LnRzIiwiQzpcXFVzZXJzXFx6ZWtlXFxQcm9qZWN0c1xcc3JjXFxob29rc1xcdXNlRHJvcHBhYmxlLnRzIiwiQzpcXFVzZXJzXFx6ZWtlXFxQcm9qZWN0c1xcc3JjXFxjb21wb25lbnRzXFxEcmFnT3ZlcmxheVxcY29tcG9uZW50c1xcQW5pbWF0aW9uTWFuYWdlclxcQW5pbWF0aW9uTWFuYWdlci50c3giLCJDOlxcVXNlcnNcXHpla2VcXFByb2plY3RzXFxzcmNcXGNvbXBvbmVudHNcXERyYWdPdmVybGF5XFxjb21wb25lbnRzXFxOdWxsaWZpZWRDb250ZXh0UHJvdmlkZXJcXE51bGxpZmllZENvbnRleHRQcm92aWRlci50c3giLCJDOlxcVXNlcnNcXHpla2VcXFByb2plY3RzXFxzcmNcXGNvbXBvbmVudHNcXERyYWdPdmVybGF5XFxjb21wb25lbnRzXFxQb3NpdGlvbmVkT3ZlcmxheVxcUG9zaXRpb25lZE92ZXJsYXkudHN4IiwiQzpcXFVzZXJzXFx6ZWtlXFxQcm9qZWN0c1xcc3JjXFxjb21wb25lbnRzXFxEcmFnT3ZlcmxheVxcaG9va3NcXHVzZURyb3BBbmltYXRpb24udHMiLCJDOlxcVXNlcnNcXHpla2VcXFByb2plY3RzXFxzcmNcXGNvbXBvbmVudHNcXERyYWdPdmVybGF5XFxob29rc1xcdXNlS2V5LnRzIiwiQzpcXFVzZXJzXFx6ZWtlXFxQcm9qZWN0c1xcc3JjXFxjb21wb25lbnRzXFxEcmFnT3ZlcmxheVxcRHJhZ092ZXJsYXkudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Y3JlYXRlQ29udGV4dH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgdHlwZSB7UmVnaXN0ZXJMaXN0ZW5lcn0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCBjb25zdCBEbmRNb25pdG9yQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQ8UmVnaXN0ZXJMaXN0ZW5lciB8IG51bGw+KG51bGwpO1xuIiwiaW1wb3J0IHt1c2VDb250ZXh0LCB1c2VFZmZlY3R9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHtEbmRNb25pdG9yQ29udGV4dH0gZnJvbSAnLi9jb250ZXh0JztcbmltcG9ydCB0eXBlIHtEbmRNb25pdG9yTGlzdGVuZXJ9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlRG5kTW9uaXRvcihsaXN0ZW5lcjogRG5kTW9uaXRvckxpc3RlbmVyKSB7XG4gIGNvbnN0IHJlZ2lzdGVyTGlzdGVuZXIgPSB1c2VDb250ZXh0KERuZE1vbml0b3JDb250ZXh0KTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghcmVnaXN0ZXJMaXN0ZW5lcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAndXNlRG5kTW9uaXRvciBtdXN0IGJlIHVzZWQgd2l0aGluIGEgY2hpbGRyZW4gb2YgPERuZENvbnRleHQ+J1xuICAgICAgKTtcbiAgICB9XG5cbiAgICBjb25zdCB1bnN1YnNjcmliZSA9IHJlZ2lzdGVyTGlzdGVuZXIobGlzdGVuZXIpO1xuXG4gICAgcmV0dXJuIHVuc3Vic2NyaWJlO1xuICB9LCBbbGlzdGVuZXIsIHJlZ2lzdGVyTGlzdGVuZXJdKTtcbn1cbiIsImltcG9ydCB7dXNlQ2FsbGJhY2ssIHVzZVN0YXRlfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB0eXBlIHtEbmRNb25pdG9yTGlzdGVuZXIsIERuZE1vbml0b3JFdmVudH0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VEbmRNb25pdG9yUHJvdmlkZXIoKSB7XG4gIGNvbnN0IFtsaXN0ZW5lcnNdID0gdXNlU3RhdGUoKCkgPT4gbmV3IFNldDxEbmRNb25pdG9yTGlzdGVuZXI+KCkpO1xuXG4gIGNvbnN0IHJlZ2lzdGVyTGlzdGVuZXIgPSB1c2VDYWxsYmFjayhcbiAgICAobGlzdGVuZXIpID0+IHtcbiAgICAgIGxpc3RlbmVycy5hZGQobGlzdGVuZXIpO1xuICAgICAgcmV0dXJuICgpID0+IGxpc3RlbmVycy5kZWxldGUobGlzdGVuZXIpO1xuICAgIH0sXG4gICAgW2xpc3RlbmVyc11cbiAgKTtcblxuICBjb25zdCBkaXNwYXRjaCA9IHVzZUNhbGxiYWNrKFxuICAgICh7dHlwZSwgZXZlbnR9OiBEbmRNb25pdG9yRXZlbnQpID0+IHtcbiAgICAgIGxpc3RlbmVycy5mb3JFYWNoKChsaXN0ZW5lcikgPT4gbGlzdGVuZXJbdHlwZV0/LihldmVudCBhcyBhbnkpKTtcbiAgICB9LFxuICAgIFtsaXN0ZW5lcnNdXG4gICk7XG5cbiAgcmV0dXJuIFtkaXNwYXRjaCwgcmVnaXN0ZXJMaXN0ZW5lcl0gYXMgY29uc3Q7XG59XG4iLCJpbXBvcnQgdHlwZSB7QW5ub3VuY2VtZW50cywgU2NyZWVuUmVhZGVySW5zdHJ1Y3Rpb25zfSBmcm9tICcuL3R5cGVzJztcblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRTY3JlZW5SZWFkZXJJbnN0cnVjdGlvbnM6IFNjcmVlblJlYWRlckluc3RydWN0aW9ucyA9IHtcbiAgZHJhZ2dhYmxlOiBgXG4gICAgVG8gcGljayB1cCBhIGRyYWdnYWJsZSBpdGVtLCBwcmVzcyB0aGUgc3BhY2UgYmFyLlxuICAgIFdoaWxlIGRyYWdnaW5nLCB1c2UgdGhlIGFycm93IGtleXMgdG8gbW92ZSB0aGUgaXRlbS5cbiAgICBQcmVzcyBzcGFjZSBhZ2FpbiB0byBkcm9wIHRoZSBpdGVtIGluIGl0cyBuZXcgcG9zaXRpb24sIG9yIHByZXNzIGVzY2FwZSB0byBjYW5jZWwuXG4gIGAsXG59O1xuXG5leHBvcnQgY29uc3QgZGVmYXVsdEFubm91bmNlbWVudHM6IEFubm91bmNlbWVudHMgPSB7XG4gIG9uRHJhZ1N0YXJ0KHthY3RpdmV9KSB7XG4gICAgcmV0dXJuIGBQaWNrZWQgdXAgZHJhZ2dhYmxlIGl0ZW0gJHthY3RpdmUuaWR9LmA7XG4gIH0sXG4gIG9uRHJhZ092ZXIoe2FjdGl2ZSwgb3Zlcn0pIHtcbiAgICBpZiAob3Zlcikge1xuICAgICAgcmV0dXJuIGBEcmFnZ2FibGUgaXRlbSAke2FjdGl2ZS5pZH0gd2FzIG1vdmVkIG92ZXIgZHJvcHBhYmxlIGFyZWEgJHtvdmVyLmlkfS5gO1xuICAgIH1cblxuICAgIHJldHVybiBgRHJhZ2dhYmxlIGl0ZW0gJHthY3RpdmUuaWR9IGlzIG5vIGxvbmdlciBvdmVyIGEgZHJvcHBhYmxlIGFyZWEuYDtcbiAgfSxcbiAgb25EcmFnRW5kKHthY3RpdmUsIG92ZXJ9KSB7XG4gICAgaWYgKG92ZXIpIHtcbiAgICAgIHJldHVybiBgRHJhZ2dhYmxlIGl0ZW0gJHthY3RpdmUuaWR9IHdhcyBkcm9wcGVkIG92ZXIgZHJvcHBhYmxlIGFyZWEgJHtvdmVyLmlkfWA7XG4gICAgfVxuXG4gICAgcmV0dXJuIGBEcmFnZ2FibGUgaXRlbSAke2FjdGl2ZS5pZH0gd2FzIGRyb3BwZWQuYDtcbiAgfSxcbiAgb25EcmFnQ2FuY2VsKHthY3RpdmV9KSB7XG4gICAgcmV0dXJuIGBEcmFnZ2luZyB3YXMgY2FuY2VsbGVkLiBEcmFnZ2FibGUgaXRlbSAke2FjdGl2ZS5pZH0gd2FzIGRyb3BwZWQuYDtcbiAgfSxcbn07XG4iLCJpbXBvcnQgUmVhY3QsIHt1c2VFZmZlY3QsIHVzZU1lbW8sIHVzZVN0YXRlfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQge2NyZWF0ZVBvcnRhbH0gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCB7dXNlVW5pcXVlSWR9IGZyb20gJ0BkbmQta2l0L3V0aWxpdGllcyc7XG5pbXBvcnQge0hpZGRlblRleHQsIExpdmVSZWdpb24sIHVzZUFubm91bmNlbWVudH0gZnJvbSAnQGRuZC1raXQvYWNjZXNzaWJpbGl0eSc7XG5cbmltcG9ydCB7RG5kTW9uaXRvckxpc3RlbmVyLCB1c2VEbmRNb25pdG9yfSBmcm9tICcuLi9EbmRNb25pdG9yJztcblxuaW1wb3J0IHR5cGUge0Fubm91bmNlbWVudHMsIFNjcmVlblJlYWRlckluc3RydWN0aW9uc30gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQge1xuICBkZWZhdWx0QW5ub3VuY2VtZW50cyxcbiAgZGVmYXVsdFNjcmVlblJlYWRlckluc3RydWN0aW9ucyxcbn0gZnJvbSAnLi9kZWZhdWx0cyc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIGFubm91bmNlbWVudHM/OiBBbm5vdW5jZW1lbnRzO1xuICBjb250YWluZXI/OiBFbGVtZW50O1xuICBzY3JlZW5SZWFkZXJJbnN0cnVjdGlvbnM/OiBTY3JlZW5SZWFkZXJJbnN0cnVjdGlvbnM7XG4gIGhpZGRlblRleHREZXNjcmliZWRCeUlkOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBBY2Nlc3NpYmlsaXR5KHtcbiAgYW5ub3VuY2VtZW50cyA9IGRlZmF1bHRBbm5vdW5jZW1lbnRzLFxuICBjb250YWluZXIsXG4gIGhpZGRlblRleHREZXNjcmliZWRCeUlkLFxuICBzY3JlZW5SZWFkZXJJbnN0cnVjdGlvbnMgPSBkZWZhdWx0U2NyZWVuUmVhZGVySW5zdHJ1Y3Rpb25zLFxufTogUHJvcHMpIHtcbiAgY29uc3Qge2Fubm91bmNlLCBhbm5vdW5jZW1lbnR9ID0gdXNlQW5ub3VuY2VtZW50KCk7XG4gIGNvbnN0IGxpdmVSZWdpb25JZCA9IHVzZVVuaXF1ZUlkKGBEbmRMaXZlUmVnaW9uYCk7XG4gIGNvbnN0IFttb3VudGVkLCBzZXRNb3VudGVkXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHNldE1vdW50ZWQodHJ1ZSk7XG4gIH0sIFtdKTtcblxuICB1c2VEbmRNb25pdG9yKFxuICAgIHVzZU1lbW88RG5kTW9uaXRvckxpc3RlbmVyPihcbiAgICAgICgpID0+ICh7XG4gICAgICAgIG9uRHJhZ1N0YXJ0KHthY3RpdmV9KSB7XG4gICAgICAgICAgYW5ub3VuY2UoYW5ub3VuY2VtZW50cy5vbkRyYWdTdGFydCh7YWN0aXZlfSkpO1xuICAgICAgICB9LFxuICAgICAgICBvbkRyYWdNb3ZlKHthY3RpdmUsIG92ZXJ9KSB7XG4gICAgICAgICAgaWYgKGFubm91bmNlbWVudHMub25EcmFnTW92ZSkge1xuICAgICAgICAgICAgYW5ub3VuY2UoYW5ub3VuY2VtZW50cy5vbkRyYWdNb3ZlKHthY3RpdmUsIG92ZXJ9KSk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBvbkRyYWdPdmVyKHthY3RpdmUsIG92ZXJ9KSB7XG4gICAgICAgICAgYW5ub3VuY2UoYW5ub3VuY2VtZW50cy5vbkRyYWdPdmVyKHthY3RpdmUsIG92ZXJ9KSk7XG4gICAgICAgIH0sXG4gICAgICAgIG9uRHJhZ0VuZCh7YWN0aXZlLCBvdmVyfSkge1xuICAgICAgICAgIGFubm91bmNlKGFubm91bmNlbWVudHMub25EcmFnRW5kKHthY3RpdmUsIG92ZXJ9KSk7XG4gICAgICAgIH0sXG4gICAgICAgIG9uRHJhZ0NhbmNlbCh7YWN0aXZlLCBvdmVyfSkge1xuICAgICAgICAgIGFubm91bmNlKGFubm91bmNlbWVudHMub25EcmFnQ2FuY2VsKHthY3RpdmUsIG92ZXJ9KSk7XG4gICAgICAgIH0sXG4gICAgICB9KSxcbiAgICAgIFthbm5vdW5jZSwgYW5ub3VuY2VtZW50c11cbiAgICApXG4gICk7XG5cbiAgaWYgKCFtb3VudGVkKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBjb25zdCBtYXJrdXAgPSAoXG4gICAgPD5cbiAgICAgIDxIaWRkZW5UZXh0XG4gICAgICAgIGlkPXtoaWRkZW5UZXh0RGVzY3JpYmVkQnlJZH1cbiAgICAgICAgdmFsdWU9e3NjcmVlblJlYWRlckluc3RydWN0aW9ucy5kcmFnZ2FibGV9XG4gICAgICAvPlxuICAgICAgPExpdmVSZWdpb24gaWQ9e2xpdmVSZWdpb25JZH0gYW5ub3VuY2VtZW50PXthbm5vdW5jZW1lbnR9IC8+XG4gICAgPC8+XG4gICk7XG5cbiAgcmV0dXJuIGNvbnRhaW5lciA/IGNyZWF0ZVBvcnRhbChtYXJrdXAsIGNvbnRhaW5lcikgOiBtYXJrdXA7XG59XG4iLCJpbXBvcnQgdHlwZSB7Q29vcmRpbmF0ZXMsIFVuaXF1ZUlkZW50aWZpZXJ9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB0eXBlIHtEcm9wcGFibGVDb250YWluZXJ9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgZW51bSBBY3Rpb24ge1xuICBEcmFnU3RhcnQgPSAnZHJhZ1N0YXJ0JyxcbiAgRHJhZ01vdmUgPSAnZHJhZ01vdmUnLFxuICBEcmFnRW5kID0gJ2RyYWdFbmQnLFxuICBEcmFnQ2FuY2VsID0gJ2RyYWdDYW5jZWwnLFxuICBEcmFnT3ZlciA9ICdkcmFnT3ZlcicsXG4gIFJlZ2lzdGVyRHJvcHBhYmxlID0gJ3JlZ2lzdGVyRHJvcHBhYmxlJyxcbiAgU2V0RHJvcHBhYmxlRGlzYWJsZWQgPSAnc2V0RHJvcHBhYmxlRGlzYWJsZWQnLFxuICBVbnJlZ2lzdGVyRHJvcHBhYmxlID0gJ3VucmVnaXN0ZXJEcm9wcGFibGUnLFxufVxuXG5leHBvcnQgdHlwZSBBY3Rpb25zID1cbiAgfCB7XG4gICAgICB0eXBlOiBBY3Rpb24uRHJhZ1N0YXJ0O1xuICAgICAgYWN0aXZlOiBVbmlxdWVJZGVudGlmaWVyO1xuICAgICAgaW5pdGlhbENvb3JkaW5hdGVzOiBDb29yZGluYXRlcztcbiAgICB9XG4gIHwge3R5cGU6IEFjdGlvbi5EcmFnTW92ZTsgY29vcmRpbmF0ZXM6IENvb3JkaW5hdGVzfVxuICB8IHt0eXBlOiBBY3Rpb24uRHJhZ0VuZH1cbiAgfCB7dHlwZTogQWN0aW9uLkRyYWdDYW5jZWx9XG4gIHwge1xuICAgICAgdHlwZTogQWN0aW9uLlJlZ2lzdGVyRHJvcHBhYmxlO1xuICAgICAgZWxlbWVudDogRHJvcHBhYmxlQ29udGFpbmVyO1xuICAgIH1cbiAgfCB7XG4gICAgICB0eXBlOiBBY3Rpb24uU2V0RHJvcHBhYmxlRGlzYWJsZWQ7XG4gICAgICBpZDogVW5pcXVlSWRlbnRpZmllcjtcbiAgICAgIGtleTogVW5pcXVlSWRlbnRpZmllcjtcbiAgICAgIGRpc2FibGVkOiBib29sZWFuO1xuICAgIH1cbiAgfCB7XG4gICAgICB0eXBlOiBBY3Rpb24uVW5yZWdpc3RlckRyb3BwYWJsZTtcbiAgICAgIGlkOiBVbmlxdWVJZGVudGlmaWVyO1xuICAgICAga2V5OiBVbmlxdWVJZGVudGlmaWVyO1xuICAgIH07XG4iLCJleHBvcnQgZnVuY3Rpb24gbm9vcCguLi5fYXJnczogYW55KSB7fVxuIiwiaW1wb3J0IHt1c2VNZW1vfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB0eXBlIHtTZW5zb3IsIFNlbnNvckRlc2NyaXB0b3IsIFNlbnNvck9wdGlvbnN9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlU2Vuc29yPFQgZXh0ZW5kcyBTZW5zb3JPcHRpb25zPihcbiAgc2Vuc29yOiBTZW5zb3I8VD4sXG4gIG9wdGlvbnM/OiBUXG4pOiBTZW5zb3JEZXNjcmlwdG9yPFQ+IHtcbiAgcmV0dXJuIHVzZU1lbW8oXG4gICAgKCkgPT4gKHtcbiAgICAgIHNlbnNvcixcbiAgICAgIG9wdGlvbnM6IG9wdGlvbnMgPz8gKHt9IGFzIFQpLFxuICAgIH0pLFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgICBbc2Vuc29yLCBvcHRpb25zXVxuICApO1xufVxuIiwiaW1wb3J0IHt1c2VNZW1vfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB0eXBlIHtTZW5zb3JEZXNjcmlwdG9yLCBTZW5zb3JPcHRpb25zfSBmcm9tICcuL3R5cGVzJztcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVNlbnNvcnMoXG4gIC4uLnNlbnNvcnM6IChTZW5zb3JEZXNjcmlwdG9yPGFueT4gfCB1bmRlZmluZWQgfCBudWxsKVtdXG4pOiBTZW5zb3JEZXNjcmlwdG9yPFNlbnNvck9wdGlvbnM+W10ge1xuICByZXR1cm4gdXNlTWVtbyhcbiAgICAoKSA9PlxuICAgICAgWy4uLnNlbnNvcnNdLmZpbHRlcihcbiAgICAgICAgKHNlbnNvcik6IHNlbnNvciBpcyBTZW5zb3JEZXNjcmlwdG9yPGFueT4gPT4gc2Vuc29yICE9IG51bGxcbiAgICAgICksXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICAgIFsuLi5zZW5zb3JzXVxuICApO1xufVxuIiwiaW1wb3J0IHR5cGUge0Nvb3JkaW5hdGVzfSBmcm9tICcuLi8uLi90eXBlcyc7XG5cbmV4cG9ydCBjb25zdCBkZWZhdWx0Q29vcmRpbmF0ZXM6IENvb3JkaW5hdGVzID0gT2JqZWN0LmZyZWV6ZSh7XG4gIHg6IDAsXG4gIHk6IDAsXG59KTtcbiIsImltcG9ydCB0eXBlIHtDb29yZGluYXRlc30gZnJvbSAnLi4vLi4vdHlwZXMnO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGRpc3RhbmNlIGJldHdlZW4gdHdvIHBvaW50c1xuICovXG5leHBvcnQgZnVuY3Rpb24gZGlzdGFuY2VCZXR3ZWVuKHAxOiBDb29yZGluYXRlcywgcDI6IENvb3JkaW5hdGVzKSB7XG4gIHJldHVybiBNYXRoLnNxcnQoTWF0aC5wb3cocDEueCAtIHAyLngsIDIpICsgTWF0aC5wb3cocDEueSAtIHAyLnksIDIpKTtcbn1cbiIsImltcG9ydCB7Z2V0RXZlbnRDb29yZGluYXRlc30gZnJvbSAnQGRuZC1raXQvdXRpbGl0aWVzJztcbmltcG9ydCB0eXBlIHtDbGllbnRSZWN0fSBmcm9tICcuLi8uLi90eXBlcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRSZWxhdGl2ZVRyYW5zZm9ybU9yaWdpbihcbiAgZXZlbnQ6IE1vdXNlRXZlbnQgfCBUb3VjaEV2ZW50IHwgS2V5Ym9hcmRFdmVudCxcbiAgcmVjdDogQ2xpZW50UmVjdFxuKSB7XG4gIGNvbnN0IGV2ZW50Q29vcmRpbmF0ZXMgPSBnZXRFdmVudENvb3JkaW5hdGVzKGV2ZW50KTtcblxuICBpZiAoIWV2ZW50Q29vcmRpbmF0ZXMpIHtcbiAgICByZXR1cm4gJzAgMCc7XG4gIH1cblxuICBjb25zdCB0cmFuc2Zvcm1PcmlnaW4gPSB7XG4gICAgeDogKChldmVudENvb3JkaW5hdGVzLnggLSByZWN0LmxlZnQpIC8gcmVjdC53aWR0aCkgKiAxMDAsXG4gICAgeTogKChldmVudENvb3JkaW5hdGVzLnkgLSByZWN0LnRvcCkgLyByZWN0LmhlaWdodCkgKiAxMDAsXG4gIH07XG5cbiAgcmV0dXJuIGAke3RyYW5zZm9ybU9yaWdpbi54fSUgJHt0cmFuc2Zvcm1PcmlnaW4ueX0lYDtcbn1cbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXJlZGVjbGFyZSAqL1xuaW1wb3J0IHR5cGUge0NsaWVudFJlY3R9IGZyb20gJy4uLy4uL3R5cGVzJztcblxuaW1wb3J0IHR5cGUge0NvbGxpc2lvbiwgQ29sbGlzaW9uRGVzY3JpcHRvcn0gZnJvbSAnLi90eXBlcyc7XG5cbi8qKlxuICogU29ydCBjb2xsaXNpb25zIGZyb20gc21hbGxlc3QgdG8gZ3JlYXRlc3QgdmFsdWVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNvcnRDb2xsaXNpb25zQXNjKFxuICB7ZGF0YToge3ZhbHVlOiBhfX06IENvbGxpc2lvbkRlc2NyaXB0b3IsXG4gIHtkYXRhOiB7dmFsdWU6IGJ9fTogQ29sbGlzaW9uRGVzY3JpcHRvclxuKSB7XG4gIHJldHVybiBhIC0gYjtcbn1cblxuLyoqXG4gKiBTb3J0IGNvbGxpc2lvbnMgZnJvbSBncmVhdGVzdCB0byBzbWFsbGVzdCB2YWx1ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gc29ydENvbGxpc2lvbnNEZXNjKFxuICB7ZGF0YToge3ZhbHVlOiBhfX06IENvbGxpc2lvbkRlc2NyaXB0b3IsXG4gIHtkYXRhOiB7dmFsdWU6IGJ9fTogQ29sbGlzaW9uRGVzY3JpcHRvclxuKSB7XG4gIHJldHVybiBiIC0gYTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBjb29yZGluYXRlcyBvZiB0aGUgY29ybmVycyBvZiBhIGdpdmVuIHJlY3RhbmdsZTpcbiAqIFtUb3BMZWZ0IHt4LCB5fSwgVG9wUmlnaHQge3gsIHl9LCBCb3R0b21MZWZ0IHt4LCB5fSwgQm90dG9tUmlnaHQge3gsIHl9XVxuICovXG5leHBvcnQgZnVuY3Rpb24gY29ybmVyc09mUmVjdGFuZ2xlKHtsZWZ0LCB0b3AsIGhlaWdodCwgd2lkdGh9OiBDbGllbnRSZWN0KSB7XG4gIHJldHVybiBbXG4gICAge1xuICAgICAgeDogbGVmdCxcbiAgICAgIHk6IHRvcCxcbiAgICB9LFxuICAgIHtcbiAgICAgIHg6IGxlZnQgKyB3aWR0aCxcbiAgICAgIHk6IHRvcCxcbiAgICB9LFxuICAgIHtcbiAgICAgIHg6IGxlZnQsXG4gICAgICB5OiB0b3AgKyBoZWlnaHQsXG4gICAgfSxcbiAgICB7XG4gICAgICB4OiBsZWZ0ICsgd2lkdGgsXG4gICAgICB5OiB0b3AgKyBoZWlnaHQsXG4gICAgfSxcbiAgXTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBmaXJzdCBjb2xsaXNpb24sIG9yIG51bGwgaWYgdGhlcmUgaXNuJ3Qgb25lLlxuICogSWYgYSBwcm9wZXJ0eSBpcyBzcGVjaWZpZWQsIHJldHVybnMgdGhlIHNwZWNpZmllZCBwcm9wZXJ0eSBvZiB0aGUgZmlyc3QgY29sbGlzaW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Rmlyc3RDb2xsaXNpb24oXG4gIGNvbGxpc2lvbnM6IENvbGxpc2lvbltdIHwgbnVsbCB8IHVuZGVmaW5lZFxuKTogQ29sbGlzaW9uIHwgbnVsbDtcbmV4cG9ydCBmdW5jdGlvbiBnZXRGaXJzdENvbGxpc2lvbjxUIGV4dGVuZHMga2V5b2YgQ29sbGlzaW9uPihcbiAgY29sbGlzaW9uczogQ29sbGlzaW9uW10gfCBudWxsIHwgdW5kZWZpbmVkLFxuICBwcm9wZXJ0eTogVFxuKTogQ29sbGlzaW9uW1RdIHwgbnVsbDtcbmV4cG9ydCBmdW5jdGlvbiBnZXRGaXJzdENvbGxpc2lvbihcbiAgY29sbGlzaW9uczogQ29sbGlzaW9uW10gfCBudWxsIHwgdW5kZWZpbmVkLFxuICBwcm9wZXJ0eT86IGtleW9mIENvbGxpc2lvblxuKSB7XG4gIGlmICghY29sbGlzaW9ucyB8fCBjb2xsaXNpb25zLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgY29uc3QgW2ZpcnN0Q29sbGlzaW9uXSA9IGNvbGxpc2lvbnM7XG5cbiAgcmV0dXJuIHByb3BlcnR5ID8gZmlyc3RDb2xsaXNpb25bcHJvcGVydHldIDogZmlyc3RDb2xsaXNpb247XG59XG4iLCJpbXBvcnQge2Rpc3RhbmNlQmV0d2Vlbn0gZnJvbSAnLi4vY29vcmRpbmF0ZXMnO1xuaW1wb3J0IHR5cGUge0Nvb3JkaW5hdGVzLCBDbGllbnRSZWN0fSBmcm9tICcuLi8uLi90eXBlcyc7XG5cbmltcG9ydCB0eXBlIHtDb2xsaXNpb25EZXNjcmlwdG9yLCBDb2xsaXNpb25EZXRlY3Rpb259IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHtzb3J0Q29sbGlzaW9uc0FzY30gZnJvbSAnLi9oZWxwZXJzJztcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBjb29yZGluYXRlcyBvZiB0aGUgY2VudGVyIG9mIGEgZ2l2ZW4gQ2xpZW50UmVjdFxuICovXG5mdW5jdGlvbiBjZW50ZXJPZlJlY3RhbmdsZShcbiAgcmVjdDogQ2xpZW50UmVjdCxcbiAgbGVmdCA9IHJlY3QubGVmdCxcbiAgdG9wID0gcmVjdC50b3Bcbik6IENvb3JkaW5hdGVzIHtcbiAgcmV0dXJuIHtcbiAgICB4OiBsZWZ0ICsgcmVjdC53aWR0aCAqIDAuNSxcbiAgICB5OiB0b3AgKyByZWN0LmhlaWdodCAqIDAuNSxcbiAgfTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBjbG9zZXN0IHJlY3RhbmdsZXMgZnJvbSBhbiBhcnJheSBvZiByZWN0YW5nbGVzIHRvIHRoZSBjZW50ZXIgb2YgYSBnaXZlblxuICogcmVjdGFuZ2xlLlxuICovXG5leHBvcnQgY29uc3QgY2xvc2VzdENlbnRlcjogQ29sbGlzaW9uRGV0ZWN0aW9uID0gKHtcbiAgY29sbGlzaW9uUmVjdCxcbiAgZHJvcHBhYmxlUmVjdHMsXG4gIGRyb3BwYWJsZUNvbnRhaW5lcnMsXG59KSA9PiB7XG4gIGNvbnN0IGNlbnRlclJlY3QgPSBjZW50ZXJPZlJlY3RhbmdsZShcbiAgICBjb2xsaXNpb25SZWN0LFxuICAgIGNvbGxpc2lvblJlY3QubGVmdCxcbiAgICBjb2xsaXNpb25SZWN0LnRvcFxuICApO1xuICBjb25zdCBjb2xsaXNpb25zOiBDb2xsaXNpb25EZXNjcmlwdG9yW10gPSBbXTtcblxuICBmb3IgKGNvbnN0IGRyb3BwYWJsZUNvbnRhaW5lciBvZiBkcm9wcGFibGVDb250YWluZXJzKSB7XG4gICAgY29uc3Qge2lkfSA9IGRyb3BwYWJsZUNvbnRhaW5lcjtcbiAgICBjb25zdCByZWN0ID0gZHJvcHBhYmxlUmVjdHMuZ2V0KGlkKTtcblxuICAgIGlmIChyZWN0KSB7XG4gICAgICBjb25zdCBkaXN0QmV0d2VlbiA9IGRpc3RhbmNlQmV0d2VlbihjZW50ZXJPZlJlY3RhbmdsZShyZWN0KSwgY2VudGVyUmVjdCk7XG5cbiAgICAgIGNvbGxpc2lvbnMucHVzaCh7aWQsIGRhdGE6IHtkcm9wcGFibGVDb250YWluZXIsIHZhbHVlOiBkaXN0QmV0d2Vlbn19KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gY29sbGlzaW9ucy5zb3J0KHNvcnRDb2xsaXNpb25zQXNjKTtcbn07XG4iLCJpbXBvcnQge2Rpc3RhbmNlQmV0d2Vlbn0gZnJvbSAnLi4vY29vcmRpbmF0ZXMnO1xuXG5pbXBvcnQgdHlwZSB7Q29sbGlzaW9uRGVzY3JpcHRvciwgQ29sbGlzaW9uRGV0ZWN0aW9ufSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7Y29ybmVyc09mUmVjdGFuZ2xlLCBzb3J0Q29sbGlzaW9uc0FzY30gZnJvbSAnLi9oZWxwZXJzJztcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBjbG9zZXN0IHJlY3RhbmdsZXMgZnJvbSBhbiBhcnJheSBvZiByZWN0YW5nbGVzIHRvIHRoZSBjb3JuZXJzIG9mXG4gKiBhbm90aGVyIHJlY3RhbmdsZS5cbiAqL1xuZXhwb3J0IGNvbnN0IGNsb3Nlc3RDb3JuZXJzOiBDb2xsaXNpb25EZXRlY3Rpb24gPSAoe1xuICBjb2xsaXNpb25SZWN0LFxuICBkcm9wcGFibGVSZWN0cyxcbiAgZHJvcHBhYmxlQ29udGFpbmVycyxcbn0pID0+IHtcbiAgY29uc3QgY29ybmVycyA9IGNvcm5lcnNPZlJlY3RhbmdsZShjb2xsaXNpb25SZWN0KTtcbiAgY29uc3QgY29sbGlzaW9uczogQ29sbGlzaW9uRGVzY3JpcHRvcltdID0gW107XG5cbiAgZm9yIChjb25zdCBkcm9wcGFibGVDb250YWluZXIgb2YgZHJvcHBhYmxlQ29udGFpbmVycykge1xuICAgIGNvbnN0IHtpZH0gPSBkcm9wcGFibGVDb250YWluZXI7XG4gICAgY29uc3QgcmVjdCA9IGRyb3BwYWJsZVJlY3RzLmdldChpZCk7XG5cbiAgICBpZiAocmVjdCkge1xuICAgICAgY29uc3QgcmVjdENvcm5lcnMgPSBjb3JuZXJzT2ZSZWN0YW5nbGUocmVjdCk7XG4gICAgICBjb25zdCBkaXN0YW5jZXMgPSBjb3JuZXJzLnJlZHVjZSgoYWNjdW11bGF0b3IsIGNvcm5lciwgaW5kZXgpID0+IHtcbiAgICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yICsgZGlzdGFuY2VCZXR3ZWVuKHJlY3RDb3JuZXJzW2luZGV4XSwgY29ybmVyKTtcbiAgICAgIH0sIDApO1xuICAgICAgY29uc3QgZWZmZWN0aXZlRGlzdGFuY2UgPSBOdW1iZXIoKGRpc3RhbmNlcyAvIDQpLnRvRml4ZWQoNCkpO1xuXG4gICAgICBjb2xsaXNpb25zLnB1c2goe1xuICAgICAgICBpZCxcbiAgICAgICAgZGF0YToge2Ryb3BwYWJsZUNvbnRhaW5lciwgdmFsdWU6IGVmZmVjdGl2ZURpc3RhbmNlfSxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjb2xsaXNpb25zLnNvcnQoc29ydENvbGxpc2lvbnNBc2MpO1xufTtcbiIsImltcG9ydCB0eXBlIHtDbGllbnRSZWN0fSBmcm9tICcuLi8uLi90eXBlcyc7XG5cbmltcG9ydCB0eXBlIHtDb2xsaXNpb25EZXNjcmlwdG9yLCBDb2xsaXNpb25EZXRlY3Rpb259IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHtzb3J0Q29sbGlzaW9uc0Rlc2N9IGZyb20gJy4vaGVscGVycyc7XG5cbi8qKlxuICogUmV0dXJucyB0aGUgaW50ZXJzZWN0aW5nIHJlY3RhbmdsZSBhcmVhIGJldHdlZW4gdHdvIHJlY3RhbmdsZXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEludGVyc2VjdGlvblJhdGlvKFxuICBlbnRyeTogQ2xpZW50UmVjdCxcbiAgdGFyZ2V0OiBDbGllbnRSZWN0XG4pOiBudW1iZXIge1xuICBjb25zdCB0b3AgPSBNYXRoLm1heCh0YXJnZXQudG9wLCBlbnRyeS50b3ApO1xuICBjb25zdCBsZWZ0ID0gTWF0aC5tYXgodGFyZ2V0LmxlZnQsIGVudHJ5LmxlZnQpO1xuICBjb25zdCByaWdodCA9IE1hdGgubWluKHRhcmdldC5sZWZ0ICsgdGFyZ2V0LndpZHRoLCBlbnRyeS5sZWZ0ICsgZW50cnkud2lkdGgpO1xuICBjb25zdCBib3R0b20gPSBNYXRoLm1pbih0YXJnZXQudG9wICsgdGFyZ2V0LmhlaWdodCwgZW50cnkudG9wICsgZW50cnkuaGVpZ2h0KTtcbiAgY29uc3Qgd2lkdGggPSByaWdodCAtIGxlZnQ7XG4gIGNvbnN0IGhlaWdodCA9IGJvdHRvbSAtIHRvcDtcblxuICBpZiAobGVmdCA8IHJpZ2h0ICYmIHRvcCA8IGJvdHRvbSkge1xuICAgIGNvbnN0IHRhcmdldEFyZWEgPSB0YXJnZXQud2lkdGggKiB0YXJnZXQuaGVpZ2h0O1xuICAgIGNvbnN0IGVudHJ5QXJlYSA9IGVudHJ5LndpZHRoICogZW50cnkuaGVpZ2h0O1xuICAgIGNvbnN0IGludGVyc2VjdGlvbkFyZWEgPSB3aWR0aCAqIGhlaWdodDtcbiAgICBjb25zdCBpbnRlcnNlY3Rpb25SYXRpbyA9XG4gICAgICBpbnRlcnNlY3Rpb25BcmVhIC8gKHRhcmdldEFyZWEgKyBlbnRyeUFyZWEgLSBpbnRlcnNlY3Rpb25BcmVhKTtcblxuICAgIHJldHVybiBOdW1iZXIoaW50ZXJzZWN0aW9uUmF0aW8udG9GaXhlZCg0KSk7XG4gIH1cblxuICAvLyBSZWN0YW5nbGVzIGRvIG5vdCBvdmVybGFwLCBvciBvdmVybGFwIGhhcyBhbiBhcmVhIG9mIHplcm8gKGVkZ2UvY29ybmVyIG92ZXJsYXApXG4gIHJldHVybiAwO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHJlY3RhbmdsZXMgdGhhdCBoYXMgdGhlIGdyZWF0ZXN0IGludGVyc2VjdGlvbiBhcmVhIHdpdGggYSBnaXZlblxuICogcmVjdGFuZ2xlIGluIGFuIGFycmF5IG9mIHJlY3RhbmdsZXMuXG4gKi9cbmV4cG9ydCBjb25zdCByZWN0SW50ZXJzZWN0aW9uOiBDb2xsaXNpb25EZXRlY3Rpb24gPSAoe1xuICBjb2xsaXNpb25SZWN0LFxuICBkcm9wcGFibGVSZWN0cyxcbiAgZHJvcHBhYmxlQ29udGFpbmVycyxcbn0pID0+IHtcbiAgY29uc3QgY29sbGlzaW9uczogQ29sbGlzaW9uRGVzY3JpcHRvcltdID0gW107XG5cbiAgZm9yIChjb25zdCBkcm9wcGFibGVDb250YWluZXIgb2YgZHJvcHBhYmxlQ29udGFpbmVycykge1xuICAgIGNvbnN0IHtpZH0gPSBkcm9wcGFibGVDb250YWluZXI7XG4gICAgY29uc3QgcmVjdCA9IGRyb3BwYWJsZVJlY3RzLmdldChpZCk7XG5cbiAgICBpZiAocmVjdCkge1xuICAgICAgY29uc3QgaW50ZXJzZWN0aW9uUmF0aW8gPSBnZXRJbnRlcnNlY3Rpb25SYXRpbyhyZWN0LCBjb2xsaXNpb25SZWN0KTtcblxuICAgICAgaWYgKGludGVyc2VjdGlvblJhdGlvID4gMCkge1xuICAgICAgICBjb2xsaXNpb25zLnB1c2goe1xuICAgICAgICAgIGlkLFxuICAgICAgICAgIGRhdGE6IHtkcm9wcGFibGVDb250YWluZXIsIHZhbHVlOiBpbnRlcnNlY3Rpb25SYXRpb30sXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjb2xsaXNpb25zLnNvcnQoc29ydENvbGxpc2lvbnNEZXNjKTtcbn07XG4iLCJpbXBvcnQgdHlwZSB7Q29vcmRpbmF0ZXMsIENsaWVudFJlY3R9IGZyb20gJy4uLy4uL3R5cGVzJztcbmltcG9ydCB7ZGlzdGFuY2VCZXR3ZWVufSBmcm9tICcuLi9jb29yZGluYXRlcyc7XG5cbmltcG9ydCB0eXBlIHtDb2xsaXNpb25EZXNjcmlwdG9yLCBDb2xsaXNpb25EZXRlY3Rpb259IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHtjb3JuZXJzT2ZSZWN0YW5nbGUsIHNvcnRDb2xsaXNpb25zQXNjfSBmcm9tICcuL2hlbHBlcnMnO1xuXG4vKipcbiAqIENoZWNrIGlmIGEgZ2l2ZW4gcG9pbnQgaXMgY29udGFpbmVkIHdpdGhpbiBhIGJvdW5kaW5nIHJlY3RhbmdsZVxuICovXG5mdW5jdGlvbiBpc1BvaW50V2l0aGluUmVjdChwb2ludDogQ29vcmRpbmF0ZXMsIHJlY3Q6IENsaWVudFJlY3QpOiBib29sZWFuIHtcbiAgY29uc3Qge3RvcCwgbGVmdCwgYm90dG9tLCByaWdodH0gPSByZWN0O1xuXG4gIHJldHVybiAoXG4gICAgdG9wIDw9IHBvaW50LnkgJiYgcG9pbnQueSA8PSBib3R0b20gJiYgbGVmdCA8PSBwb2ludC54ICYmIHBvaW50LnggPD0gcmlnaHRcbiAgKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSByZWN0YW5nbGVzIHRoYXQgdGhlIHBvaW50ZXIgaXMgaG92ZXJpbmcgb3ZlclxuICovXG5leHBvcnQgY29uc3QgcG9pbnRlcldpdGhpbjogQ29sbGlzaW9uRGV0ZWN0aW9uID0gKHtcbiAgZHJvcHBhYmxlQ29udGFpbmVycyxcbiAgZHJvcHBhYmxlUmVjdHMsXG4gIHBvaW50ZXJDb29yZGluYXRlcyxcbn0pID0+IHtcbiAgaWYgKCFwb2ludGVyQ29vcmRpbmF0ZXMpIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICBjb25zdCBjb2xsaXNpb25zOiBDb2xsaXNpb25EZXNjcmlwdG9yW10gPSBbXTtcblxuICBmb3IgKGNvbnN0IGRyb3BwYWJsZUNvbnRhaW5lciBvZiBkcm9wcGFibGVDb250YWluZXJzKSB7XG4gICAgY29uc3Qge2lkfSA9IGRyb3BwYWJsZUNvbnRhaW5lcjtcbiAgICBjb25zdCByZWN0ID0gZHJvcHBhYmxlUmVjdHMuZ2V0KGlkKTtcblxuICAgIGlmIChyZWN0ICYmIGlzUG9pbnRXaXRoaW5SZWN0KHBvaW50ZXJDb29yZGluYXRlcywgcmVjdCkpIHtcbiAgICAgIC8qIFRoZXJlIG1heSBiZSBtb3JlIHRoYW4gYSBzaW5nbGUgcmVjdGFuZ2xlIGludGVyc2VjdGluZ1xuICAgICAgICogd2l0aCB0aGUgcG9pbnRlciBjb29yZGluYXRlcy4gSW4gb3JkZXIgdG8gc29ydCB0aGVcbiAgICAgICAqIGNvbGxpZGluZyByZWN0YW5nbGVzLCB3ZSBtZWFzdXJlIHRoZSBkaXN0YW5jZSBiZXR3ZWVuXG4gICAgICAgKiB0aGUgcG9pbnRlciBhbmQgdGhlIGNvcm5lcnMgb2YgdGhlIGludGVyc2VjdGluZyByZWN0YW5nbGVcbiAgICAgICAqL1xuICAgICAgY29uc3QgY29ybmVycyA9IGNvcm5lcnNPZlJlY3RhbmdsZShyZWN0KTtcbiAgICAgIGNvbnN0IGRpc3RhbmNlcyA9IGNvcm5lcnMucmVkdWNlKChhY2N1bXVsYXRvciwgY29ybmVyKSA9PiB7XG4gICAgICAgIHJldHVybiBhY2N1bXVsYXRvciArIGRpc3RhbmNlQmV0d2Vlbihwb2ludGVyQ29vcmRpbmF0ZXMsIGNvcm5lcik7XG4gICAgICB9LCAwKTtcbiAgICAgIGNvbnN0IGVmZmVjdGl2ZURpc3RhbmNlID0gTnVtYmVyKChkaXN0YW5jZXMgLyA0KS50b0ZpeGVkKDQpKTtcblxuICAgICAgY29sbGlzaW9ucy5wdXNoKHtcbiAgICAgICAgaWQsXG4gICAgICAgIGRhdGE6IHtkcm9wcGFibGVDb250YWluZXIsIHZhbHVlOiBlZmZlY3RpdmVEaXN0YW5jZX0sXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gY29sbGlzaW9ucy5zb3J0KHNvcnRDb2xsaXNpb25zQXNjKTtcbn07XG4iLCJpbXBvcnQgdHlwZSB7VHJhbnNmb3JtfSBmcm9tICdAZG5kLWtpdC91dGlsaXRpZXMnO1xuaW1wb3J0IHR5cGUge0NsaWVudFJlY3R9IGZyb20gJy4uLy4uL3R5cGVzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGFkanVzdFNjYWxlKFxuICB0cmFuc2Zvcm06IFRyYW5zZm9ybSxcbiAgcmVjdDE6IENsaWVudFJlY3QgfCBudWxsLFxuICByZWN0MjogQ2xpZW50UmVjdCB8IG51bGxcbik6IFRyYW5zZm9ybSB7XG4gIHJldHVybiB7XG4gICAgLi4udHJhbnNmb3JtLFxuICAgIHNjYWxlWDogcmVjdDEgJiYgcmVjdDIgPyByZWN0MS53aWR0aCAvIHJlY3QyLndpZHRoIDogMSxcbiAgICBzY2FsZVk6IHJlY3QxICYmIHJlY3QyID8gcmVjdDEuaGVpZ2h0IC8gcmVjdDIuaGVpZ2h0IDogMSxcbiAgfTtcbn1cbiIsImltcG9ydCB0eXBlIHtDb29yZGluYXRlcywgQ2xpZW50UmVjdH0gZnJvbSAnLi4vLi4vdHlwZXMnO1xuaW1wb3J0IHtkZWZhdWx0Q29vcmRpbmF0ZXN9IGZyb20gJy4uL2Nvb3JkaW5hdGVzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFJlY3REZWx0YShcbiAgcmVjdDE6IENsaWVudFJlY3QgfCBudWxsLFxuICByZWN0MjogQ2xpZW50UmVjdCB8IG51bGxcbik6IENvb3JkaW5hdGVzIHtcbiAgcmV0dXJuIHJlY3QxICYmIHJlY3QyXG4gICAgPyB7XG4gICAgICAgIHg6IHJlY3QxLmxlZnQgLSByZWN0Mi5sZWZ0LFxuICAgICAgICB5OiByZWN0MS50b3AgLSByZWN0Mi50b3AsXG4gICAgICB9XG4gICAgOiBkZWZhdWx0Q29vcmRpbmF0ZXM7XG59XG4iLCJpbXBvcnQgdHlwZSB7Q29vcmRpbmF0ZXMsIENsaWVudFJlY3R9IGZyb20gJy4uLy4uL3R5cGVzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVJlY3RBZGp1c3RtZW50Rm4obW9kaWZpZXI6IG51bWJlcikge1xuICByZXR1cm4gZnVuY3Rpb24gYWRqdXN0Q2xpZW50UmVjdChcbiAgICByZWN0OiBDbGllbnRSZWN0LFxuICAgIC4uLmFkanVzdG1lbnRzOiBDb29yZGluYXRlc1tdXG4gICk6IENsaWVudFJlY3Qge1xuICAgIHJldHVybiBhZGp1c3RtZW50cy5yZWR1Y2U8Q2xpZW50UmVjdD4oXG4gICAgICAoYWNjLCBhZGp1c3RtZW50KSA9PiAoe1xuICAgICAgICAuLi5hY2MsXG4gICAgICAgIHRvcDogYWNjLnRvcCArIG1vZGlmaWVyICogYWRqdXN0bWVudC55LFxuICAgICAgICBib3R0b206IGFjYy5ib3R0b20gKyBtb2RpZmllciAqIGFkanVzdG1lbnQueSxcbiAgICAgICAgbGVmdDogYWNjLmxlZnQgKyBtb2RpZmllciAqIGFkanVzdG1lbnQueCxcbiAgICAgICAgcmlnaHQ6IGFjYy5yaWdodCArIG1vZGlmaWVyICogYWRqdXN0bWVudC54LFxuICAgICAgfSksXG4gICAgICB7Li4ucmVjdH1cbiAgICApO1xuICB9O1xufVxuXG5leHBvcnQgY29uc3QgZ2V0QWRqdXN0ZWRSZWN0ID0gY3JlYXRlUmVjdEFkanVzdG1lbnRGbigxKTtcbiIsImltcG9ydCB0eXBlIHtUcmFuc2Zvcm19IGZyb20gJ0BkbmQta2l0L3V0aWxpdGllcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVRyYW5zZm9ybSh0cmFuc2Zvcm06IHN0cmluZyk6IFRyYW5zZm9ybSB8IG51bGwge1xuICBpZiAodHJhbnNmb3JtLnN0YXJ0c1dpdGgoJ21hdHJpeDNkKCcpKSB7XG4gICAgY29uc3QgdHJhbnNmb3JtQXJyYXkgPSB0cmFuc2Zvcm0uc2xpY2UoOSwgLTEpLnNwbGl0KC8sIC8pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHg6ICt0cmFuc2Zvcm1BcnJheVsxMl0sXG4gICAgICB5OiArdHJhbnNmb3JtQXJyYXlbMTNdLFxuICAgICAgc2NhbGVYOiArdHJhbnNmb3JtQXJyYXlbMF0sXG4gICAgICBzY2FsZVk6ICt0cmFuc2Zvcm1BcnJheVs1XSxcbiAgICB9O1xuICB9IGVsc2UgaWYgKHRyYW5zZm9ybS5zdGFydHNXaXRoKCdtYXRyaXgoJykpIHtcbiAgICBjb25zdCB0cmFuc2Zvcm1BcnJheSA9IHRyYW5zZm9ybS5zbGljZSg3LCAtMSkuc3BsaXQoLywgLyk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgeDogK3RyYW5zZm9ybUFycmF5WzRdLFxuICAgICAgeTogK3RyYW5zZm9ybUFycmF5WzVdLFxuICAgICAgc2NhbGVYOiArdHJhbnNmb3JtQXJyYXlbMF0sXG4gICAgICBzY2FsZVk6ICt0cmFuc2Zvcm1BcnJheVszXSxcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG4iLCJpbXBvcnQgdHlwZSB7Q2xpZW50UmVjdH0gZnJvbSAnLi4vLi4vdHlwZXMnO1xuXG5pbXBvcnQge3BhcnNlVHJhbnNmb3JtfSBmcm9tICcuL3BhcnNlVHJhbnNmb3JtJztcblxuZXhwb3J0IGZ1bmN0aW9uIGludmVyc2VUcmFuc2Zvcm0oXG4gIHJlY3Q6IENsaWVudFJlY3QsXG4gIHRyYW5zZm9ybTogc3RyaW5nLFxuICB0cmFuc2Zvcm1PcmlnaW46IHN0cmluZ1xuKTogQ2xpZW50UmVjdCB7XG4gIGNvbnN0IHBhcnNlZFRyYW5zZm9ybSA9IHBhcnNlVHJhbnNmb3JtKHRyYW5zZm9ybSk7XG5cbiAgaWYgKCFwYXJzZWRUcmFuc2Zvcm0pIHtcbiAgICByZXR1cm4gcmVjdDtcbiAgfVxuXG4gIGNvbnN0IHtzY2FsZVgsIHNjYWxlWSwgeDogdHJhbnNsYXRlWCwgeTogdHJhbnNsYXRlWX0gPSBwYXJzZWRUcmFuc2Zvcm07XG5cbiAgY29uc3QgeCA9IHJlY3QubGVmdCAtIHRyYW5zbGF0ZVggLSAoMSAtIHNjYWxlWCkgKiBwYXJzZUZsb2F0KHRyYW5zZm9ybU9yaWdpbik7XG4gIGNvbnN0IHkgPVxuICAgIHJlY3QudG9wIC1cbiAgICB0cmFuc2xhdGVZIC1cbiAgICAoMSAtIHNjYWxlWSkgKlxuICAgICAgcGFyc2VGbG9hdCh0cmFuc2Zvcm1PcmlnaW4uc2xpY2UodHJhbnNmb3JtT3JpZ2luLmluZGV4T2YoJyAnKSArIDEpKTtcbiAgY29uc3QgdyA9IHNjYWxlWCA/IHJlY3Qud2lkdGggLyBzY2FsZVggOiByZWN0LndpZHRoO1xuICBjb25zdCBoID0gc2NhbGVZID8gcmVjdC5oZWlnaHQgLyBzY2FsZVkgOiByZWN0LmhlaWdodDtcblxuICByZXR1cm4ge1xuICAgIHdpZHRoOiB3LFxuICAgIGhlaWdodDogaCxcbiAgICB0b3A6IHksXG4gICAgcmlnaHQ6IHggKyB3LFxuICAgIGJvdHRvbTogeSArIGgsXG4gICAgbGVmdDogeCxcbiAgfTtcbn1cbiIsImltcG9ydCB7Z2V0V2luZG93fSBmcm9tICdAZG5kLWtpdC91dGlsaXRpZXMnO1xuXG5pbXBvcnQgdHlwZSB7Q2xpZW50UmVjdH0gZnJvbSAnLi4vLi4vdHlwZXMnO1xuaW1wb3J0IHtpbnZlcnNlVHJhbnNmb3JtfSBmcm9tICcuLi90cmFuc2Zvcm0nO1xuXG5pbnRlcmZhY2UgT3B0aW9ucyB7XG4gIGlnbm9yZVRyYW5zZm9ybT86IGJvb2xlYW47XG59XG5cbmNvbnN0IGRlZmF1bHRPcHRpb25zOiBPcHRpb25zID0ge2lnbm9yZVRyYW5zZm9ybTogZmFsc2V9O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGJvdW5kaW5nIGNsaWVudCByZWN0IG9mIGFuIGVsZW1lbnQgcmVsYXRpdmUgdG8gdGhlIHZpZXdwb3J0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2xpZW50UmVjdChcbiAgZWxlbWVudDogRWxlbWVudCxcbiAgb3B0aW9uczogT3B0aW9ucyA9IGRlZmF1bHRPcHRpb25zXG4pIHtcbiAgbGV0IHJlY3Q6IENsaWVudFJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gIGlmIChvcHRpb25zLmlnbm9yZVRyYW5zZm9ybSkge1xuICAgIGNvbnN0IHt0cmFuc2Zvcm0sIHRyYW5zZm9ybU9yaWdpbn0gPVxuICAgICAgZ2V0V2luZG93KGVsZW1lbnQpLmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG5cbiAgICBpZiAodHJhbnNmb3JtKSB7XG4gICAgICByZWN0ID0gaW52ZXJzZVRyYW5zZm9ybShyZWN0LCB0cmFuc2Zvcm0sIHRyYW5zZm9ybU9yaWdpbik7XG4gICAgfVxuICB9XG5cbiAgY29uc3Qge3RvcCwgbGVmdCwgd2lkdGgsIGhlaWdodCwgYm90dG9tLCByaWdodH0gPSByZWN0O1xuXG4gIHJldHVybiB7XG4gICAgdG9wLFxuICAgIGxlZnQsXG4gICAgd2lkdGgsXG4gICAgaGVpZ2h0LFxuICAgIGJvdHRvbSxcbiAgICByaWdodCxcbiAgfTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBib3VuZGluZyBjbGllbnQgcmVjdCBvZiBhbiBlbGVtZW50IHJlbGF0aXZlIHRvIHRoZSB2aWV3cG9ydC5cbiAqXG4gKiBAcmVtYXJrc1xuICogVGhlIENsaWVudFJlY3QgcmV0dXJuZWQgYnkgdGhpcyBtZXRob2QgZG9lcyBub3QgdGFrZSBpbnRvIGFjY291bnQgdHJhbnNmb3Jtc1xuICogYXBwbGllZCB0byB0aGUgZWxlbWVudCBpdCBtZWFzdXJlcy5cbiAqXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRUcmFuc2Zvcm1BZ25vc3RpY0NsaWVudFJlY3QoZWxlbWVudDogRWxlbWVudCk6IENsaWVudFJlY3Qge1xuICByZXR1cm4gZ2V0Q2xpZW50UmVjdChlbGVtZW50LCB7aWdub3JlVHJhbnNmb3JtOiB0cnVlfSk7XG59XG4iLCJpbXBvcnQgdHlwZSB7Q2xpZW50UmVjdH0gZnJvbSAnLi4vLi4vdHlwZXMnO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0V2luZG93Q2xpZW50UmVjdChlbGVtZW50OiB0eXBlb2Ygd2luZG93KTogQ2xpZW50UmVjdCB7XG4gIGNvbnN0IHdpZHRoID0gZWxlbWVudC5pbm5lcldpZHRoO1xuICBjb25zdCBoZWlnaHQgPSBlbGVtZW50LmlubmVySGVpZ2h0O1xuXG4gIHJldHVybiB7XG4gICAgdG9wOiAwLFxuICAgIGxlZnQ6IDAsXG4gICAgcmlnaHQ6IHdpZHRoLFxuICAgIGJvdHRvbTogaGVpZ2h0LFxuICAgIHdpZHRoLFxuICAgIGhlaWdodCxcbiAgfTtcbn1cbiIsImltcG9ydCB7Z2V0V2luZG93fSBmcm9tICdAZG5kLWtpdC91dGlsaXRpZXMnO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNGaXhlZChcbiAgbm9kZTogSFRNTEVsZW1lbnQsXG4gIGNvbXB1dGVkU3R5bGU6IENTU1N0eWxlRGVjbGFyYXRpb24gPSBnZXRXaW5kb3cobm9kZSkuZ2V0Q29tcHV0ZWRTdHlsZShub2RlKVxuKTogYm9vbGVhbiB7XG4gIHJldHVybiBjb21wdXRlZFN0eWxlLnBvc2l0aW9uID09PSAnZml4ZWQnO1xufVxuIiwiaW1wb3J0IHtnZXRXaW5kb3d9IGZyb20gJ0BkbmQta2l0L3V0aWxpdGllcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1Njcm9sbGFibGUoXG4gIGVsZW1lbnQ6IEhUTUxFbGVtZW50LFxuICBjb21wdXRlZFN0eWxlOiBDU1NTdHlsZURlY2xhcmF0aW9uID0gZ2V0V2luZG93KGVsZW1lbnQpLmdldENvbXB1dGVkU3R5bGUoXG4gICAgZWxlbWVudFxuICApXG4pOiBib29sZWFuIHtcbiAgY29uc3Qgb3ZlcmZsb3dSZWdleCA9IC8oYXV0b3xzY3JvbGx8b3ZlcmxheSkvO1xuICBjb25zdCBwcm9wZXJ0aWVzID0gWydvdmVyZmxvdycsICdvdmVyZmxvd1gnLCAnb3ZlcmZsb3dZJ107XG5cbiAgcmV0dXJuIHByb3BlcnRpZXMuc29tZSgocHJvcGVydHkpID0+IHtcbiAgICBjb25zdCB2YWx1ZSA9IGNvbXB1dGVkU3R5bGVbcHJvcGVydHkgYXMga2V5b2YgQ1NTU3R5bGVEZWNsYXJhdGlvbl07XG5cbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyA/IG92ZXJmbG93UmVnZXgudGVzdCh2YWx1ZSkgOiBmYWxzZTtcbiAgfSk7XG59XG4iLCJpbXBvcnQge1xuICBnZXRXaW5kb3csXG4gIGlzRG9jdW1lbnQsXG4gIGlzSFRNTEVsZW1lbnQsXG4gIGlzU1ZHRWxlbWVudCxcbn0gZnJvbSAnQGRuZC1raXQvdXRpbGl0aWVzJztcblxuaW1wb3J0IHtpc0ZpeGVkfSBmcm9tICcuL2lzRml4ZWQnO1xuaW1wb3J0IHtpc1Njcm9sbGFibGV9IGZyb20gJy4vaXNTY3JvbGxhYmxlJztcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFNjcm9sbGFibGVBbmNlc3RvcnMoXG4gIGVsZW1lbnQ6IE5vZGUgfCBudWxsLFxuICBsaW1pdD86IG51bWJlclxuKTogRWxlbWVudFtdIHtcbiAgY29uc3Qgc2Nyb2xsUGFyZW50czogRWxlbWVudFtdID0gW107XG5cbiAgZnVuY3Rpb24gZmluZFNjcm9sbGFibGVBbmNlc3RvcnMobm9kZTogTm9kZSB8IG51bGwpOiBFbGVtZW50W10ge1xuICAgIGlmIChsaW1pdCAhPSBudWxsICYmIHNjcm9sbFBhcmVudHMubGVuZ3RoID49IGxpbWl0KSB7XG4gICAgICByZXR1cm4gc2Nyb2xsUGFyZW50cztcbiAgICB9XG5cbiAgICBpZiAoIW5vZGUpIHtcbiAgICAgIHJldHVybiBzY3JvbGxQYXJlbnRzO1xuICAgIH1cblxuICAgIGlmIChcbiAgICAgIGlzRG9jdW1lbnQobm9kZSkgJiZcbiAgICAgIG5vZGUuc2Nyb2xsaW5nRWxlbWVudCAhPSBudWxsICYmXG4gICAgICAhc2Nyb2xsUGFyZW50cy5pbmNsdWRlcyhub2RlLnNjcm9sbGluZ0VsZW1lbnQpXG4gICAgKSB7XG4gICAgICBzY3JvbGxQYXJlbnRzLnB1c2gobm9kZS5zY3JvbGxpbmdFbGVtZW50KTtcblxuICAgICAgcmV0dXJuIHNjcm9sbFBhcmVudHM7XG4gICAgfVxuXG4gICAgaWYgKCFpc0hUTUxFbGVtZW50KG5vZGUpIHx8IGlzU1ZHRWxlbWVudChub2RlKSkge1xuICAgICAgcmV0dXJuIHNjcm9sbFBhcmVudHM7XG4gICAgfVxuXG4gICAgaWYgKHNjcm9sbFBhcmVudHMuaW5jbHVkZXMobm9kZSkpIHtcbiAgICAgIHJldHVybiBzY3JvbGxQYXJlbnRzO1xuICAgIH1cblxuICAgIGNvbnN0IGNvbXB1dGVkU3R5bGUgPSBnZXRXaW5kb3coZWxlbWVudCkuZ2V0Q29tcHV0ZWRTdHlsZShub2RlKTtcblxuICAgIGlmIChub2RlICE9PSBlbGVtZW50KSB7XG4gICAgICBpZiAoaXNTY3JvbGxhYmxlKG5vZGUsIGNvbXB1dGVkU3R5bGUpKSB7XG4gICAgICAgIHNjcm9sbFBhcmVudHMucHVzaChub2RlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaXNGaXhlZChub2RlLCBjb21wdXRlZFN0eWxlKSkge1xuICAgICAgcmV0dXJuIHNjcm9sbFBhcmVudHM7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZpbmRTY3JvbGxhYmxlQW5jZXN0b3JzKG5vZGUucGFyZW50Tm9kZSk7XG4gIH1cblxuICBpZiAoIWVsZW1lbnQpIHtcbiAgICByZXR1cm4gc2Nyb2xsUGFyZW50cztcbiAgfVxuXG4gIHJldHVybiBmaW5kU2Nyb2xsYWJsZUFuY2VzdG9ycyhlbGVtZW50KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEZpcnN0U2Nyb2xsYWJsZUFuY2VzdG9yKG5vZGU6IE5vZGUgfCBudWxsKTogRWxlbWVudCB8IG51bGwge1xuICBjb25zdCBbZmlyc3RTY3JvbGxhYmxlQW5jZXN0b3JdID0gZ2V0U2Nyb2xsYWJsZUFuY2VzdG9ycyhub2RlLCAxKTtcblxuICByZXR1cm4gZmlyc3RTY3JvbGxhYmxlQW5jZXN0b3IgPz8gbnVsbDtcbn1cbiIsImltcG9ydCB7XG4gIGNhblVzZURPTSxcbiAgaXNIVE1MRWxlbWVudCxcbiAgaXNEb2N1bWVudCxcbiAgZ2V0T3duZXJEb2N1bWVudCxcbiAgaXNOb2RlLFxuICBpc1dpbmRvdyxcbn0gZnJvbSAnQGRuZC1raXQvdXRpbGl0aWVzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFNjcm9sbGFibGVFbGVtZW50KGVsZW1lbnQ6IEV2ZW50VGFyZ2V0IHwgbnVsbCkge1xuICBpZiAoIWNhblVzZURPTSB8fCAhZWxlbWVudCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKGlzV2luZG93KGVsZW1lbnQpKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cblxuICBpZiAoIWlzTm9kZShlbGVtZW50KSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKFxuICAgIGlzRG9jdW1lbnQoZWxlbWVudCkgfHxcbiAgICBlbGVtZW50ID09PSBnZXRPd25lckRvY3VtZW50KGVsZW1lbnQpLnNjcm9sbGluZ0VsZW1lbnRcbiAgKSB7XG4gICAgcmV0dXJuIHdpbmRvdztcbiAgfVxuXG4gIGlmIChpc0hUTUxFbGVtZW50KGVsZW1lbnQpKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cbiIsImltcG9ydCB7aXNXaW5kb3d9IGZyb20gJ0BkbmQta2l0L3V0aWxpdGllcyc7XG5cbmltcG9ydCB0eXBlIHtDb29yZGluYXRlc30gZnJvbSAnLi4vLi4vdHlwZXMnO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2Nyb2xsWENvb3JkaW5hdGUoZWxlbWVudDogRWxlbWVudCB8IHR5cGVvZiB3aW5kb3cpOiBudW1iZXIge1xuICBpZiAoaXNXaW5kb3coZWxlbWVudCkpIHtcbiAgICByZXR1cm4gZWxlbWVudC5zY3JvbGxYO1xuICB9XG5cbiAgcmV0dXJuIGVsZW1lbnQuc2Nyb2xsTGVmdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFNjcm9sbFlDb29yZGluYXRlKGVsZW1lbnQ6IEVsZW1lbnQgfCB0eXBlb2Ygd2luZG93KTogbnVtYmVyIHtcbiAgaWYgKGlzV2luZG93KGVsZW1lbnQpKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQuc2Nyb2xsWTtcbiAgfVxuXG4gIHJldHVybiBlbGVtZW50LnNjcm9sbFRvcDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFNjcm9sbENvb3JkaW5hdGVzKFxuICBlbGVtZW50OiBFbGVtZW50IHwgdHlwZW9mIHdpbmRvd1xuKTogQ29vcmRpbmF0ZXMge1xuICByZXR1cm4ge1xuICAgIHg6IGdldFNjcm9sbFhDb29yZGluYXRlKGVsZW1lbnQpLFxuICAgIHk6IGdldFNjcm9sbFlDb29yZGluYXRlKGVsZW1lbnQpLFxuICB9O1xufVxuIiwiZXhwb3J0IGVudW0gRGlyZWN0aW9uIHtcbiAgRm9yd2FyZCA9IDEsXG4gIEJhY2t3YXJkID0gLTEsXG59XG4iLCJpbXBvcnQge2NhblVzZURPTX0gZnJvbSAnQGRuZC1raXQvdXRpbGl0aWVzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGlzRG9jdW1lbnRTY3JvbGxpbmdFbGVtZW50KGVsZW1lbnQ6IEVsZW1lbnQgfCBudWxsKSB7XG4gIGlmICghY2FuVXNlRE9NIHx8ICFlbGVtZW50KSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGVsZW1lbnQgPT09IGRvY3VtZW50LnNjcm9sbGluZ0VsZW1lbnQ7XG59XG4iLCJpbXBvcnQge2lzRG9jdW1lbnRTY3JvbGxpbmdFbGVtZW50fSBmcm9tICcuL2RvY3VtZW50U2Nyb2xsaW5nRWxlbWVudCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTY3JvbGxQb3NpdGlvbihzY3JvbGxpbmdDb250YWluZXI6IEVsZW1lbnQpIHtcbiAgY29uc3QgbWluU2Nyb2xsID0ge1xuICAgIHg6IDAsXG4gICAgeTogMCxcbiAgfTtcbiAgY29uc3QgZGltZW5zaW9ucyA9IGlzRG9jdW1lbnRTY3JvbGxpbmdFbGVtZW50KHNjcm9sbGluZ0NvbnRhaW5lcilcbiAgICA/IHtcbiAgICAgICAgaGVpZ2h0OiB3aW5kb3cuaW5uZXJIZWlnaHQsXG4gICAgICAgIHdpZHRoOiB3aW5kb3cuaW5uZXJXaWR0aCxcbiAgICAgIH1cbiAgICA6IHtcbiAgICAgICAgaGVpZ2h0OiBzY3JvbGxpbmdDb250YWluZXIuY2xpZW50SGVpZ2h0LFxuICAgICAgICB3aWR0aDogc2Nyb2xsaW5nQ29udGFpbmVyLmNsaWVudFdpZHRoLFxuICAgICAgfTtcbiAgY29uc3QgbWF4U2Nyb2xsID0ge1xuICAgIHg6IHNjcm9sbGluZ0NvbnRhaW5lci5zY3JvbGxXaWR0aCAtIGRpbWVuc2lvbnMud2lkdGgsXG4gICAgeTogc2Nyb2xsaW5nQ29udGFpbmVyLnNjcm9sbEhlaWdodCAtIGRpbWVuc2lvbnMuaGVpZ2h0LFxuICB9O1xuXG4gIGNvbnN0IGlzVG9wID0gc2Nyb2xsaW5nQ29udGFpbmVyLnNjcm9sbFRvcCA8PSBtaW5TY3JvbGwueTtcbiAgY29uc3QgaXNMZWZ0ID0gc2Nyb2xsaW5nQ29udGFpbmVyLnNjcm9sbExlZnQgPD0gbWluU2Nyb2xsLng7XG4gIGNvbnN0IGlzQm90dG9tID0gc2Nyb2xsaW5nQ29udGFpbmVyLnNjcm9sbFRvcCA+PSBtYXhTY3JvbGwueTtcbiAgY29uc3QgaXNSaWdodCA9IHNjcm9sbGluZ0NvbnRhaW5lci5zY3JvbGxMZWZ0ID49IG1heFNjcm9sbC54O1xuXG4gIHJldHVybiB7XG4gICAgaXNUb3AsXG4gICAgaXNMZWZ0LFxuICAgIGlzQm90dG9tLFxuICAgIGlzUmlnaHQsXG4gICAgbWF4U2Nyb2xsLFxuICAgIG1pblNjcm9sbCxcbiAgfTtcbn1cbiIsImltcG9ydCB7RGlyZWN0aW9uLCBDbGllbnRSZWN0fSBmcm9tICcuLi8uLi90eXBlcyc7XG5pbXBvcnQge2dldFNjcm9sbFBvc2l0aW9ufSBmcm9tICcuL2dldFNjcm9sbFBvc2l0aW9uJztcblxuaW50ZXJmYWNlIFBvc2l0aW9uYWxDb29yZGluYXRlc1xuICBleHRlbmRzIFBpY2s8Q2xpZW50UmVjdCwgJ3RvcCcgfCAnbGVmdCcgfCAncmlnaHQnIHwgJ2JvdHRvbSc+IHt9XG5cbmNvbnN0IGRlZmF1bHRUaHJlc2hvbGQgPSB7XG4gIHg6IDAuMixcbiAgeTogMC4yLFxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFNjcm9sbERpcmVjdGlvbkFuZFNwZWVkKFxuICBzY3JvbGxDb250YWluZXI6IEVsZW1lbnQsXG4gIHNjcm9sbENvbnRhaW5lclJlY3Q6IENsaWVudFJlY3QsXG4gIHt0b3AsIGxlZnQsIHJpZ2h0LCBib3R0b219OiBQb3NpdGlvbmFsQ29vcmRpbmF0ZXMsXG4gIGFjY2VsZXJhdGlvbiA9IDEwLFxuICB0aHJlc2hvbGRQZXJjZW50YWdlID0gZGVmYXVsdFRocmVzaG9sZFxuKSB7XG4gIGNvbnN0IHtpc1RvcCwgaXNCb3R0b20sIGlzTGVmdCwgaXNSaWdodH0gPSBnZXRTY3JvbGxQb3NpdGlvbihzY3JvbGxDb250YWluZXIpO1xuXG4gIGNvbnN0IGRpcmVjdGlvbiA9IHtcbiAgICB4OiAwLFxuICAgIHk6IDAsXG4gIH07XG4gIGNvbnN0IHNwZWVkID0ge1xuICAgIHg6IDAsXG4gICAgeTogMCxcbiAgfTtcbiAgY29uc3QgdGhyZXNob2xkID0ge1xuICAgIGhlaWdodDogc2Nyb2xsQ29udGFpbmVyUmVjdC5oZWlnaHQgKiB0aHJlc2hvbGRQZXJjZW50YWdlLnksXG4gICAgd2lkdGg6IHNjcm9sbENvbnRhaW5lclJlY3Qud2lkdGggKiB0aHJlc2hvbGRQZXJjZW50YWdlLngsXG4gIH07XG5cbiAgaWYgKCFpc1RvcCAmJiB0b3AgPD0gc2Nyb2xsQ29udGFpbmVyUmVjdC50b3AgKyB0aHJlc2hvbGQuaGVpZ2h0KSB7XG4gICAgLy8gU2Nyb2xsIFVwXG4gICAgZGlyZWN0aW9uLnkgPSBEaXJlY3Rpb24uQmFja3dhcmQ7XG4gICAgc3BlZWQueSA9XG4gICAgICBhY2NlbGVyYXRpb24gKlxuICAgICAgTWF0aC5hYnMoXG4gICAgICAgIChzY3JvbGxDb250YWluZXJSZWN0LnRvcCArIHRocmVzaG9sZC5oZWlnaHQgLSB0b3ApIC8gdGhyZXNob2xkLmhlaWdodFxuICAgICAgKTtcbiAgfSBlbHNlIGlmIChcbiAgICAhaXNCb3R0b20gJiZcbiAgICBib3R0b20gPj0gc2Nyb2xsQ29udGFpbmVyUmVjdC5ib3R0b20gLSB0aHJlc2hvbGQuaGVpZ2h0XG4gICkge1xuICAgIC8vIFNjcm9sbCBEb3duXG4gICAgZGlyZWN0aW9uLnkgPSBEaXJlY3Rpb24uRm9yd2FyZDtcbiAgICBzcGVlZC55ID1cbiAgICAgIGFjY2VsZXJhdGlvbiAqXG4gICAgICBNYXRoLmFicyhcbiAgICAgICAgKHNjcm9sbENvbnRhaW5lclJlY3QuYm90dG9tIC0gdGhyZXNob2xkLmhlaWdodCAtIGJvdHRvbSkgL1xuICAgICAgICAgIHRocmVzaG9sZC5oZWlnaHRcbiAgICAgICk7XG4gIH1cblxuICBpZiAoIWlzUmlnaHQgJiYgcmlnaHQgPj0gc2Nyb2xsQ29udGFpbmVyUmVjdC5yaWdodCAtIHRocmVzaG9sZC53aWR0aCkge1xuICAgIC8vIFNjcm9sbCBSaWdodFxuICAgIGRpcmVjdGlvbi54ID0gRGlyZWN0aW9uLkZvcndhcmQ7XG4gICAgc3BlZWQueCA9XG4gICAgICBhY2NlbGVyYXRpb24gKlxuICAgICAgTWF0aC5hYnMoXG4gICAgICAgIChzY3JvbGxDb250YWluZXJSZWN0LnJpZ2h0IC0gdGhyZXNob2xkLndpZHRoIC0gcmlnaHQpIC8gdGhyZXNob2xkLndpZHRoXG4gICAgICApO1xuICB9IGVsc2UgaWYgKCFpc0xlZnQgJiYgbGVmdCA8PSBzY3JvbGxDb250YWluZXJSZWN0LmxlZnQgKyB0aHJlc2hvbGQud2lkdGgpIHtcbiAgICAvLyBTY3JvbGwgTGVmdFxuICAgIGRpcmVjdGlvbi54ID0gRGlyZWN0aW9uLkJhY2t3YXJkO1xuICAgIHNwZWVkLnggPVxuICAgICAgYWNjZWxlcmF0aW9uICpcbiAgICAgIE1hdGguYWJzKFxuICAgICAgICAoc2Nyb2xsQ29udGFpbmVyUmVjdC5sZWZ0ICsgdGhyZXNob2xkLndpZHRoIC0gbGVmdCkgLyB0aHJlc2hvbGQud2lkdGhcbiAgICAgICk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGRpcmVjdGlvbixcbiAgICBzcGVlZCxcbiAgfTtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBnZXRTY3JvbGxFbGVtZW50UmVjdChlbGVtZW50OiBFbGVtZW50KSB7XG4gIGlmIChlbGVtZW50ID09PSBkb2N1bWVudC5zY3JvbGxpbmdFbGVtZW50KSB7XG4gICAgY29uc3Qge2lubmVyV2lkdGgsIGlubmVySGVpZ2h0fSA9IHdpbmRvdztcblxuICAgIHJldHVybiB7XG4gICAgICB0b3A6IDAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgcmlnaHQ6IGlubmVyV2lkdGgsXG4gICAgICBib3R0b206IGlubmVySGVpZ2h0LFxuICAgICAgd2lkdGg6IGlubmVyV2lkdGgsXG4gICAgICBoZWlnaHQ6IGlubmVySGVpZ2h0LFxuICAgIH07XG4gIH1cblxuICBjb25zdCB7dG9wLCBsZWZ0LCByaWdodCwgYm90dG9tfSA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgcmV0dXJuIHtcbiAgICB0b3AsXG4gICAgbGVmdCxcbiAgICByaWdodCxcbiAgICBib3R0b20sXG4gICAgd2lkdGg6IGVsZW1lbnQuY2xpZW50V2lkdGgsXG4gICAgaGVpZ2h0OiBlbGVtZW50LmNsaWVudEhlaWdodCxcbiAgfTtcbn1cbiIsImltcG9ydCB7YWRkfSBmcm9tICdAZG5kLWtpdC91dGlsaXRpZXMnO1xuXG5pbXBvcnQgdHlwZSB7Q29vcmRpbmF0ZXN9IGZyb20gJy4uLy4uL3R5cGVzJztcbmltcG9ydCB7XG4gIGdldFNjcm9sbENvb3JkaW5hdGVzLFxuICBnZXRTY3JvbGxYQ29vcmRpbmF0ZSxcbiAgZ2V0U2Nyb2xsWUNvb3JkaW5hdGUsXG59IGZyb20gJy4vZ2V0U2Nyb2xsQ29vcmRpbmF0ZXMnO1xuaW1wb3J0IHtkZWZhdWx0Q29vcmRpbmF0ZXN9IGZyb20gJy4uL2Nvb3JkaW5hdGVzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFNjcm9sbE9mZnNldHMoc2Nyb2xsYWJsZUFuY2VzdG9yczogRWxlbWVudFtdKTogQ29vcmRpbmF0ZXMge1xuICByZXR1cm4gc2Nyb2xsYWJsZUFuY2VzdG9ycy5yZWR1Y2U8Q29vcmRpbmF0ZXM+KChhY2MsIG5vZGUpID0+IHtcbiAgICByZXR1cm4gYWRkKGFjYywgZ2V0U2Nyb2xsQ29vcmRpbmF0ZXMobm9kZSkpO1xuICB9LCBkZWZhdWx0Q29vcmRpbmF0ZXMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2Nyb2xsWE9mZnNldChzY3JvbGxhYmxlQW5jZXN0b3JzOiBFbGVtZW50W10pOiBudW1iZXIge1xuICByZXR1cm4gc2Nyb2xsYWJsZUFuY2VzdG9ycy5yZWR1Y2U8bnVtYmVyPigoYWNjLCBub2RlKSA9PiB7XG4gICAgcmV0dXJuIGFjYyArIGdldFNjcm9sbFhDb29yZGluYXRlKG5vZGUpO1xuICB9LCAwKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFNjcm9sbFlPZmZzZXQoc2Nyb2xsYWJsZUFuY2VzdG9yczogRWxlbWVudFtdKTogbnVtYmVyIHtcbiAgcmV0dXJuIHNjcm9sbGFibGVBbmNlc3RvcnMucmVkdWNlPG51bWJlcj4oKGFjYywgbm9kZSkgPT4ge1xuICAgIHJldHVybiBhY2MgKyBnZXRTY3JvbGxZQ29vcmRpbmF0ZShub2RlKTtcbiAgfSwgMCk7XG59XG4iLCJpbXBvcnQgdHlwZSB7Q2xpZW50UmVjdH0gZnJvbSAnLi4vLi4vdHlwZXMnO1xuaW1wb3J0IHtnZXRDbGllbnRSZWN0fSBmcm9tICcuLi9yZWN0L2dldFJlY3QnO1xuaW1wb3J0IHtnZXRGaXJzdFNjcm9sbGFibGVBbmNlc3Rvcn0gZnJvbSAnLi9nZXRTY3JvbGxhYmxlQW5jZXN0b3JzJztcblxuZXhwb3J0IGZ1bmN0aW9uIHNjcm9sbEludG9WaWV3SWZOZWVkZWQoXG4gIGVsZW1lbnQ6IEhUTUxFbGVtZW50IHwgbnVsbCB8IHVuZGVmaW5lZCxcbiAgbWVhc3VyZTogKG5vZGU6IEhUTUxFbGVtZW50KSA9PiBDbGllbnRSZWN0ID0gZ2V0Q2xpZW50UmVjdFxuKSB7XG4gIGlmICghZWxlbWVudCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHt0b3AsIGxlZnQsIGJvdHRvbSwgcmlnaHR9ID0gbWVhc3VyZShlbGVtZW50KTtcbiAgY29uc3QgZmlyc3RTY3JvbGxhYmxlQW5jZXN0b3IgPSBnZXRGaXJzdFNjcm9sbGFibGVBbmNlc3RvcihlbGVtZW50KTtcblxuICBpZiAoIWZpcnN0U2Nyb2xsYWJsZUFuY2VzdG9yKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKFxuICAgIGJvdHRvbSA8PSAwIHx8XG4gICAgcmlnaHQgPD0gMCB8fFxuICAgIHRvcCA+PSB3aW5kb3cuaW5uZXJIZWlnaHQgfHxcbiAgICBsZWZ0ID49IHdpbmRvdy5pbm5lcldpZHRoXG4gICkge1xuICAgIGVsZW1lbnQuc2Nyb2xsSW50b1ZpZXcoe1xuICAgICAgYmxvY2s6ICdjZW50ZXInLFxuICAgICAgaW5saW5lOiAnY2VudGVyJyxcbiAgICB9KTtcbiAgfVxufVxuIiwiaW1wb3J0IHR5cGUge0NsaWVudFJlY3R9IGZyb20gJy4uLy4uL3R5cGVzL3JlY3QnO1xuaW1wb3J0IHtcbiAgZ2V0U2Nyb2xsYWJsZUFuY2VzdG9ycyxcbiAgZ2V0U2Nyb2xsT2Zmc2V0cyxcbiAgZ2V0U2Nyb2xsWE9mZnNldCxcbiAgZ2V0U2Nyb2xsWU9mZnNldCxcbn0gZnJvbSAnLi4vc2Nyb2xsJztcblxuY29uc3QgcHJvcGVydGllcyA9IFtcbiAgWyd4JywgWydsZWZ0JywgJ3JpZ2h0J10sIGdldFNjcm9sbFhPZmZzZXRdLFxuICBbJ3knLCBbJ3RvcCcsICdib3R0b20nXSwgZ2V0U2Nyb2xsWU9mZnNldF0sXG5dIGFzIGNvbnN0O1xuXG5leHBvcnQgY2xhc3MgUmVjdCB7XG4gIGNvbnN0cnVjdG9yKHJlY3Q6IENsaWVudFJlY3QsIGVsZW1lbnQ6IEVsZW1lbnQpIHtcbiAgICBjb25zdCBzY3JvbGxhYmxlQW5jZXN0b3JzID0gZ2V0U2Nyb2xsYWJsZUFuY2VzdG9ycyhlbGVtZW50KTtcbiAgICBjb25zdCBzY3JvbGxPZmZzZXRzID0gZ2V0U2Nyb2xsT2Zmc2V0cyhzY3JvbGxhYmxlQW5jZXN0b3JzKTtcblxuICAgIHRoaXMucmVjdCA9IHsuLi5yZWN0fTtcbiAgICB0aGlzLndpZHRoID0gcmVjdC53aWR0aDtcbiAgICB0aGlzLmhlaWdodCA9IHJlY3QuaGVpZ2h0O1xuXG4gICAgZm9yIChjb25zdCBbYXhpcywga2V5cywgZ2V0U2Nyb2xsT2Zmc2V0XSBvZiBwcm9wZXJ0aWVzKSB7XG4gICAgICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBrZXksIHtcbiAgICAgICAgICBnZXQ6ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRPZmZzZXRzID0gZ2V0U2Nyb2xsT2Zmc2V0KHNjcm9sbGFibGVBbmNlc3RvcnMpO1xuICAgICAgICAgICAgY29uc3Qgc2Nyb2xsT2Zmc2V0c0RlbHRsYSA9IHNjcm9sbE9mZnNldHNbYXhpc10gLSBjdXJyZW50T2Zmc2V0cztcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVjdFtrZXldICsgc2Nyb2xsT2Zmc2V0c0RlbHRsYTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAncmVjdCcsIHtlbnVtZXJhYmxlOiBmYWxzZX0pO1xuICB9XG5cbiAgcHJpdmF0ZSByZWN0OiBDbGllbnRSZWN0O1xuXG4gIHB1YmxpYyB3aWR0aDogbnVtYmVyO1xuXG4gIHB1YmxpYyBoZWlnaHQ6IG51bWJlcjtcblxuICAvLyBUaGUgYmVsb3cgcHJvcGVydGllcyBhcmUgc2V0IGJ5IHRoZSBgT2JqZWN0LmRlZmluZVByb3BlcnR5YCBjYWxscyBpbiB0aGUgY29uc3RydWN0b3JcbiAgLy8gQHRzLWlnbm9yZVxuICBwdWJsaWMgdG9wOiBudW1iZXI7XG4gIC8vIEB0cy1pZ25vcmVcbiAgcHVibGljIGJvdHRvbTogbnVtYmVyO1xuICAvLyBAdHMtaWdub3JlXG4gIHB1YmxpYyByaWdodDogbnVtYmVyO1xuICAvLyBAdHMtaWdub3JlXG4gIHB1YmxpYyBsZWZ0OiBudW1iZXI7XG59XG4iLCJleHBvcnQgY2xhc3MgTGlzdGVuZXJzIHtcbiAgcHJpdmF0ZSBsaXN0ZW5lcnM6IFtcbiAgICBzdHJpbmcsXG4gICAgRXZlbnRMaXN0ZW5lck9yRXZlbnRMaXN0ZW5lck9iamVjdCxcbiAgICBBZGRFdmVudExpc3RlbmVyT3B0aW9ucyB8IGJvb2xlYW4gfCB1bmRlZmluZWRcbiAgXVtdID0gW107XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSB0YXJnZXQ6IEV2ZW50VGFyZ2V0IHwgbnVsbCkge31cblxuICBwdWJsaWMgYWRkPFQgZXh0ZW5kcyBFdmVudD4oXG4gICAgZXZlbnROYW1lOiBzdHJpbmcsXG4gICAgaGFuZGxlcjogKGV2ZW50OiBUKSA9PiB2b2lkLFxuICAgIG9wdGlvbnM/OiBBZGRFdmVudExpc3RlbmVyT3B0aW9ucyB8IGJvb2xlYW5cbiAgKSB7XG4gICAgdGhpcy50YXJnZXQ/LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBoYW5kbGVyIGFzIEV2ZW50TGlzdGVuZXIsIG9wdGlvbnMpO1xuICAgIHRoaXMubGlzdGVuZXJzLnB1c2goW2V2ZW50TmFtZSwgaGFuZGxlciBhcyBFdmVudExpc3RlbmVyLCBvcHRpb25zXSk7XG4gIH1cblxuICBwdWJsaWMgcmVtb3ZlQWxsID0gKCkgPT4ge1xuICAgIHRoaXMubGlzdGVuZXJzLmZvckVhY2goKGxpc3RlbmVyKSA9PlxuICAgICAgdGhpcy50YXJnZXQ/LnJlbW92ZUV2ZW50TGlzdGVuZXIoLi4ubGlzdGVuZXIpXG4gICAgKTtcbiAgfTtcbn1cbiIsImltcG9ydCB7Z2V0T3duZXJEb2N1bWVudCwgZ2V0V2luZG93fSBmcm9tICdAZG5kLWtpdC91dGlsaXRpZXMnO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RXZlbnRMaXN0ZW5lclRhcmdldChcbiAgdGFyZ2V0OiBFdmVudFRhcmdldCB8IG51bGxcbik6IEV2ZW50VGFyZ2V0IHwgRG9jdW1lbnQge1xuICAvLyBJZiB0aGUgYGV2ZW50LnRhcmdldGAgZWxlbWVudCBpcyByZW1vdmVkIGZyb20gdGhlIGRvY3VtZW50IGV2ZW50cyB3aWxsIHN0aWxsIGJlIHRhcmdldGVkXG4gIC8vIGF0IGl0LCBhbmQgaGVuY2Ugd29uJ3QgYWx3YXlzIGJ1YmJsZSB1cCB0byB0aGUgd2luZG93IG9yIGRvY3VtZW50IGFueW1vcmUuXG4gIC8vIElmIHRoZXJlIGlzIGFueSByaXNrIG9mIGFuIGVsZW1lbnQgYmVpbmcgcmVtb3ZlZCB3aGlsZSBpdCBpcyBiZWluZyBkcmFnZ2VkLFxuICAvLyB0aGUgYmVzdCBwcmFjdGljZSBpcyB0byBhdHRhY2ggdGhlIGV2ZW50IGxpc3RlbmVycyBkaXJlY3RseSB0byB0aGUgdGFyZ2V0LlxuICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRXZlbnRUYXJnZXRcblxuICBjb25zdCB7RXZlbnRUYXJnZXR9ID0gZ2V0V2luZG93KHRhcmdldCk7XG5cbiAgcmV0dXJuIHRhcmdldCBpbnN0YW5jZW9mIEV2ZW50VGFyZ2V0ID8gdGFyZ2V0IDogZ2V0T3duZXJEb2N1bWVudCh0YXJnZXQpO1xufVxuIiwiaW1wb3J0IHR5cGUge0Nvb3JkaW5hdGVzLCBEaXN0YW5jZU1lYXN1cmVtZW50fSBmcm9tICcuLi8uLi90eXBlcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNFeGNlZWRlZERpc3RhbmNlKFxuICBkZWx0YTogQ29vcmRpbmF0ZXMsXG4gIG1lYXN1cmVtZW50OiBEaXN0YW5jZU1lYXN1cmVtZW50XG4pOiBib29sZWFuIHtcbiAgY29uc3QgZHggPSBNYXRoLmFicyhkZWx0YS54KTtcbiAgY29uc3QgZHkgPSBNYXRoLmFicyhkZWx0YS55KTtcblxuICBpZiAodHlwZW9mIG1lYXN1cmVtZW50ID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBNYXRoLnNxcnQoZHggKiogMiArIGR5ICoqIDIpID4gbWVhc3VyZW1lbnQ7XG4gIH1cblxuICBpZiAoJ3gnIGluIG1lYXN1cmVtZW50ICYmICd5JyBpbiBtZWFzdXJlbWVudCkge1xuICAgIHJldHVybiBkeCA+IG1lYXN1cmVtZW50LnggJiYgZHkgPiBtZWFzdXJlbWVudC55O1xuICB9XG5cbiAgaWYgKCd4JyBpbiBtZWFzdXJlbWVudCkge1xuICAgIHJldHVybiBkeCA+IG1lYXN1cmVtZW50Lng7XG4gIH1cblxuICBpZiAoJ3knIGluIG1lYXN1cmVtZW50KSB7XG4gICAgcmV0dXJuIGR5ID4gbWVhc3VyZW1lbnQueTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cbiIsImV4cG9ydCBlbnVtIEV2ZW50TmFtZSB7XG4gIENsaWNrID0gJ2NsaWNrJyxcbiAgRHJhZ1N0YXJ0ID0gJ2RyYWdzdGFydCcsXG4gIEtleWRvd24gPSAna2V5ZG93bicsXG4gIENvbnRleHRNZW51ID0gJ2NvbnRleHRtZW51JyxcbiAgUmVzaXplID0gJ3Jlc2l6ZScsXG4gIFNlbGVjdGlvbkNoYW5nZSA9ICdzZWxlY3Rpb25jaGFuZ2UnLFxuICBWaXNpYmlsaXR5Q2hhbmdlID0gJ3Zpc2liaWxpdHljaGFuZ2UnLFxufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJldmVudERlZmF1bHQoZXZlbnQ6IEV2ZW50KSB7XG4gIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdG9wUHJvcGFnYXRpb24oZXZlbnQ6IEV2ZW50KSB7XG4gIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xufVxuIiwiaW1wb3J0IHR5cGUge0Nvb3JkaW5hdGVzLCBVbmlxdWVJZGVudGlmaWVyfSBmcm9tICcuLi8uLi90eXBlcyc7XG5pbXBvcnQgdHlwZSB7U2Vuc29yQ29udGV4dH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5leHBvcnQgZW51bSBLZXlib2FyZENvZGUge1xuICBTcGFjZSA9ICdTcGFjZScsXG4gIERvd24gPSAnQXJyb3dEb3duJyxcbiAgUmlnaHQgPSAnQXJyb3dSaWdodCcsXG4gIExlZnQgPSAnQXJyb3dMZWZ0JyxcbiAgVXAgPSAnQXJyb3dVcCcsXG4gIEVzYyA9ICdFc2NhcGUnLFxuICBFbnRlciA9ICdFbnRlcicsXG4gIFRhYiA9ICdUYWInLFxufVxuXG5leHBvcnQgdHlwZSBLZXlib2FyZENvZGVzID0ge1xuICBzdGFydDogS2V5Ym9hcmRFdmVudFsnY29kZSddW107XG4gIGNhbmNlbDogS2V5Ym9hcmRFdmVudFsnY29kZSddW107XG4gIGVuZDogS2V5Ym9hcmRFdmVudFsnY29kZSddW107XG59O1xuXG5leHBvcnQgdHlwZSBLZXlib2FyZENvb3JkaW5hdGVHZXR0ZXIgPSAoXG4gIGV2ZW50OiBLZXlib2FyZEV2ZW50LFxuICBhcmdzOiB7XG4gICAgYWN0aXZlOiBVbmlxdWVJZGVudGlmaWVyO1xuICAgIGN1cnJlbnRDb29yZGluYXRlczogQ29vcmRpbmF0ZXM7XG4gICAgY29udGV4dDogU2Vuc29yQ29udGV4dDtcbiAgfVxuKSA9PiBDb29yZGluYXRlcyB8IHZvaWQ7XG4iLCJpbXBvcnQge0tleWJvYXJkQ29vcmRpbmF0ZUdldHRlciwgS2V5Ym9hcmRDb2RlLCBLZXlib2FyZENvZGVzfSBmcm9tICcuL3R5cGVzJztcblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRLZXlib2FyZENvZGVzOiBLZXlib2FyZENvZGVzID0ge1xuICBzdGFydDogW0tleWJvYXJkQ29kZS5TcGFjZSwgS2V5Ym9hcmRDb2RlLkVudGVyXSxcbiAgY2FuY2VsOiBbS2V5Ym9hcmRDb2RlLkVzY10sXG4gIGVuZDogW0tleWJvYXJkQ29kZS5TcGFjZSwgS2V5Ym9hcmRDb2RlLkVudGVyLCBLZXlib2FyZENvZGUuVGFiXSxcbn07XG5cbmV4cG9ydCBjb25zdCBkZWZhdWx0S2V5Ym9hcmRDb29yZGluYXRlR2V0dGVyOiBLZXlib2FyZENvb3JkaW5hdGVHZXR0ZXIgPSAoXG4gIGV2ZW50LFxuICB7Y3VycmVudENvb3JkaW5hdGVzfVxuKSA9PiB7XG4gIHN3aXRjaCAoZXZlbnQuY29kZSkge1xuICAgIGNhc2UgS2V5Ym9hcmRDb2RlLlJpZ2h0OlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uY3VycmVudENvb3JkaW5hdGVzLFxuICAgICAgICB4OiBjdXJyZW50Q29vcmRpbmF0ZXMueCArIDI1LFxuICAgICAgfTtcbiAgICBjYXNlIEtleWJvYXJkQ29kZS5MZWZ0OlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uY3VycmVudENvb3JkaW5hdGVzLFxuICAgICAgICB4OiBjdXJyZW50Q29vcmRpbmF0ZXMueCAtIDI1LFxuICAgICAgfTtcbiAgICBjYXNlIEtleWJvYXJkQ29kZS5Eb3duOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uY3VycmVudENvb3JkaW5hdGVzLFxuICAgICAgICB5OiBjdXJyZW50Q29vcmRpbmF0ZXMueSArIDI1LFxuICAgICAgfTtcbiAgICBjYXNlIEtleWJvYXJkQ29kZS5VcDpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLmN1cnJlbnRDb29yZGluYXRlcyxcbiAgICAgICAgeTogY3VycmVudENvb3JkaW5hdGVzLnkgLSAyNSxcbiAgICAgIH07XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufTtcbiIsImltcG9ydCB7XG4gIGFkZCBhcyBnZXRBZGp1c3RlZENvb3JkaW5hdGVzLFxuICBzdWJ0cmFjdCBhcyBnZXRDb29yZGluYXRlc0RlbHRhLFxuICBnZXRPd25lckRvY3VtZW50LFxuICBnZXRXaW5kb3csXG4gIGlzS2V5Ym9hcmRFdmVudCxcbn0gZnJvbSAnQGRuZC1raXQvdXRpbGl0aWVzJztcblxuaW1wb3J0IHR5cGUge0Nvb3JkaW5hdGVzfSBmcm9tICcuLi8uLi90eXBlcyc7XG5pbXBvcnQge1xuICBkZWZhdWx0Q29vcmRpbmF0ZXMsXG4gIGdldFNjcm9sbFBvc2l0aW9uLFxuICBnZXRTY3JvbGxFbGVtZW50UmVjdCxcbn0gZnJvbSAnLi4vLi4vdXRpbGl0aWVzJztcbmltcG9ydCB7c2Nyb2xsSW50b1ZpZXdJZk5lZWRlZH0gZnJvbSAnLi4vLi4vdXRpbGl0aWVzL3Njcm9sbCc7XG5pbXBvcnQge0V2ZW50TmFtZX0gZnJvbSAnLi4vZXZlbnRzJztcbmltcG9ydCB7TGlzdGVuZXJzfSBmcm9tICcuLi91dGlsaXRpZXMnO1xuaW1wb3J0IHR5cGUge1xuICBBY3RpdmF0b3JzLFxuICBTZW5zb3JJbnN0YW5jZSxcbiAgU2Vuc29yUHJvcHMsXG4gIFNlbnNvck9wdGlvbnMsXG59IGZyb20gJy4uL3R5cGVzJztcblxuaW1wb3J0IHtLZXlib2FyZENvb3JkaW5hdGVHZXR0ZXIsIEtleWJvYXJkQ29kZSwgS2V5Ym9hcmRDb2Rlc30gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQge1xuICBkZWZhdWx0S2V5Ym9hcmRDb2RlcyxcbiAgZGVmYXVsdEtleWJvYXJkQ29vcmRpbmF0ZUdldHRlcixcbn0gZnJvbSAnLi9kZWZhdWx0cyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgS2V5Ym9hcmRTZW5zb3JPcHRpb25zIGV4dGVuZHMgU2Vuc29yT3B0aW9ucyB7XG4gIGtleWJvYXJkQ29kZXM/OiBLZXlib2FyZENvZGVzO1xuICBjb29yZGluYXRlR2V0dGVyPzogS2V5Ym9hcmRDb29yZGluYXRlR2V0dGVyO1xuICBzY3JvbGxCZWhhdmlvcj86IFNjcm9sbEJlaGF2aW9yO1xuICBvbkFjdGl2YXRpb24/KHtldmVudH06IHtldmVudDogS2V5Ym9hcmRFdmVudH0pOiB2b2lkO1xufVxuXG5leHBvcnQgdHlwZSBLZXlib2FyZFNlbnNvclByb3BzID0gU2Vuc29yUHJvcHM8S2V5Ym9hcmRTZW5zb3JPcHRpb25zPjtcblxuZXhwb3J0IGNsYXNzIEtleWJvYXJkU2Vuc29yIGltcGxlbWVudHMgU2Vuc29ySW5zdGFuY2Uge1xuICBwdWJsaWMgYXV0b1Njcm9sbEVuYWJsZWQgPSBmYWxzZTtcbiAgcHJpdmF0ZSByZWZlcmVuY2VDb29yZGluYXRlczogQ29vcmRpbmF0ZXMgfCB1bmRlZmluZWQ7XG4gIHByaXZhdGUgbGlzdGVuZXJzOiBMaXN0ZW5lcnM7XG4gIHByaXZhdGUgd2luZG93TGlzdGVuZXJzOiBMaXN0ZW5lcnM7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBwcm9wczogS2V5Ym9hcmRTZW5zb3JQcm9wcykge1xuICAgIGNvbnN0IHtcbiAgICAgIGV2ZW50OiB7dGFyZ2V0fSxcbiAgICB9ID0gcHJvcHM7XG5cbiAgICB0aGlzLnByb3BzID0gcHJvcHM7XG4gICAgdGhpcy5saXN0ZW5lcnMgPSBuZXcgTGlzdGVuZXJzKGdldE93bmVyRG9jdW1lbnQodGFyZ2V0KSk7XG4gICAgdGhpcy53aW5kb3dMaXN0ZW5lcnMgPSBuZXcgTGlzdGVuZXJzKGdldFdpbmRvdyh0YXJnZXQpKTtcbiAgICB0aGlzLmhhbmRsZUtleURvd24gPSB0aGlzLmhhbmRsZUtleURvd24uYmluZCh0aGlzKTtcbiAgICB0aGlzLmhhbmRsZUNhbmNlbCA9IHRoaXMuaGFuZGxlQ2FuY2VsLmJpbmQodGhpcyk7XG5cbiAgICB0aGlzLmF0dGFjaCgpO1xuICB9XG5cbiAgcHJpdmF0ZSBhdHRhY2goKSB7XG4gICAgdGhpcy5oYW5kbGVTdGFydCgpO1xuXG4gICAgdGhpcy53aW5kb3dMaXN0ZW5lcnMuYWRkKEV2ZW50TmFtZS5SZXNpemUsIHRoaXMuaGFuZGxlQ2FuY2VsKTtcbiAgICB0aGlzLndpbmRvd0xpc3RlbmVycy5hZGQoRXZlbnROYW1lLlZpc2liaWxpdHlDaGFuZ2UsIHRoaXMuaGFuZGxlQ2FuY2VsKTtcblxuICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5saXN0ZW5lcnMuYWRkKEV2ZW50TmFtZS5LZXlkb3duLCB0aGlzLmhhbmRsZUtleURvd24pKTtcbiAgfVxuXG4gIHByaXZhdGUgaGFuZGxlU3RhcnQoKSB7XG4gICAgY29uc3Qge2FjdGl2ZU5vZGUsIG9uU3RhcnR9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBub2RlID0gYWN0aXZlTm9kZS5ub2RlLmN1cnJlbnQ7XG5cbiAgICBpZiAobm9kZSkge1xuICAgICAgc2Nyb2xsSW50b1ZpZXdJZk5lZWRlZChub2RlKTtcbiAgICB9XG5cbiAgICBvblN0YXJ0KGRlZmF1bHRDb29yZGluYXRlcyk7XG4gIH1cblxuICBwcml2YXRlIGhhbmRsZUtleURvd24oZXZlbnQ6IEV2ZW50KSB7XG4gICAgaWYgKGlzS2V5Ym9hcmRFdmVudChldmVudCkpIHtcbiAgICAgIGNvbnN0IHthY3RpdmUsIGNvbnRleHQsIG9wdGlvbnN9ID0gdGhpcy5wcm9wcztcbiAgICAgIGNvbnN0IHtcbiAgICAgICAga2V5Ym9hcmRDb2RlcyA9IGRlZmF1bHRLZXlib2FyZENvZGVzLFxuICAgICAgICBjb29yZGluYXRlR2V0dGVyID0gZGVmYXVsdEtleWJvYXJkQ29vcmRpbmF0ZUdldHRlcixcbiAgICAgICAgc2Nyb2xsQmVoYXZpb3IgPSAnc21vb3RoJyxcbiAgICAgIH0gPSBvcHRpb25zO1xuICAgICAgY29uc3Qge2NvZGV9ID0gZXZlbnQ7XG5cbiAgICAgIGlmIChrZXlib2FyZENvZGVzLmVuZC5pbmNsdWRlcyhjb2RlKSkge1xuICAgICAgICB0aGlzLmhhbmRsZUVuZChldmVudCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGtleWJvYXJkQ29kZXMuY2FuY2VsLmluY2x1ZGVzKGNvZGUpKSB7XG4gICAgICAgIHRoaXMuaGFuZGxlQ2FuY2VsKGV2ZW50KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB7Y29sbGlzaW9uUmVjdH0gPSBjb250ZXh0LmN1cnJlbnQ7XG4gICAgICBjb25zdCBjdXJyZW50Q29vcmRpbmF0ZXMgPSBjb2xsaXNpb25SZWN0XG4gICAgICAgID8ge3g6IGNvbGxpc2lvblJlY3QubGVmdCwgeTogY29sbGlzaW9uUmVjdC50b3B9XG4gICAgICAgIDogZGVmYXVsdENvb3JkaW5hdGVzO1xuXG4gICAgICBpZiAoIXRoaXMucmVmZXJlbmNlQ29vcmRpbmF0ZXMpIHtcbiAgICAgICAgdGhpcy5yZWZlcmVuY2VDb29yZGluYXRlcyA9IGN1cnJlbnRDb29yZGluYXRlcztcbiAgICAgIH1cblxuICAgICAgY29uc3QgbmV3Q29vcmRpbmF0ZXMgPSBjb29yZGluYXRlR2V0dGVyKGV2ZW50LCB7XG4gICAgICAgIGFjdGl2ZSxcbiAgICAgICAgY29udGV4dDogY29udGV4dC5jdXJyZW50LFxuICAgICAgICBjdXJyZW50Q29vcmRpbmF0ZXMsXG4gICAgICB9KTtcblxuICAgICAgaWYgKG5ld0Nvb3JkaW5hdGVzKSB7XG4gICAgICAgIGNvbnN0IGNvb3JkaW5hdGVzRGVsdGEgPSBnZXRDb29yZGluYXRlc0RlbHRhKFxuICAgICAgICAgIG5ld0Nvb3JkaW5hdGVzLFxuICAgICAgICAgIGN1cnJlbnRDb29yZGluYXRlc1xuICAgICAgICApO1xuICAgICAgICBjb25zdCBzY3JvbGxEZWx0YSA9IHtcbiAgICAgICAgICB4OiAwLFxuICAgICAgICAgIHk6IDAsXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHtzY3JvbGxhYmxlQW5jZXN0b3JzfSA9IGNvbnRleHQuY3VycmVudDtcblxuICAgICAgICBmb3IgKGNvbnN0IHNjcm9sbENvbnRhaW5lciBvZiBzY3JvbGxhYmxlQW5jZXN0b3JzKSB7XG4gICAgICAgICAgY29uc3QgZGlyZWN0aW9uID0gZXZlbnQuY29kZTtcbiAgICAgICAgICBjb25zdCB7aXNUb3AsIGlzUmlnaHQsIGlzTGVmdCwgaXNCb3R0b20sIG1heFNjcm9sbCwgbWluU2Nyb2xsfSA9XG4gICAgICAgICAgICBnZXRTY3JvbGxQb3NpdGlvbihzY3JvbGxDb250YWluZXIpO1xuICAgICAgICAgIGNvbnN0IHNjcm9sbEVsZW1lbnRSZWN0ID0gZ2V0U2Nyb2xsRWxlbWVudFJlY3Qoc2Nyb2xsQ29udGFpbmVyKTtcblxuICAgICAgICAgIGNvbnN0IGNsYW1wZWRDb29yZGluYXRlcyA9IHtcbiAgICAgICAgICAgIHg6IE1hdGgubWluKFxuICAgICAgICAgICAgICBkaXJlY3Rpb24gPT09IEtleWJvYXJkQ29kZS5SaWdodFxuICAgICAgICAgICAgICAgID8gc2Nyb2xsRWxlbWVudFJlY3QucmlnaHQgLSBzY3JvbGxFbGVtZW50UmVjdC53aWR0aCAvIDJcbiAgICAgICAgICAgICAgICA6IHNjcm9sbEVsZW1lbnRSZWN0LnJpZ2h0LFxuICAgICAgICAgICAgICBNYXRoLm1heChcbiAgICAgICAgICAgICAgICBkaXJlY3Rpb24gPT09IEtleWJvYXJkQ29kZS5SaWdodFxuICAgICAgICAgICAgICAgICAgPyBzY3JvbGxFbGVtZW50UmVjdC5sZWZ0XG4gICAgICAgICAgICAgICAgICA6IHNjcm9sbEVsZW1lbnRSZWN0LmxlZnQgKyBzY3JvbGxFbGVtZW50UmVjdC53aWR0aCAvIDIsXG4gICAgICAgICAgICAgICAgbmV3Q29vcmRpbmF0ZXMueFxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgeTogTWF0aC5taW4oXG4gICAgICAgICAgICAgIGRpcmVjdGlvbiA9PT0gS2V5Ym9hcmRDb2RlLkRvd25cbiAgICAgICAgICAgICAgICA/IHNjcm9sbEVsZW1lbnRSZWN0LmJvdHRvbSAtIHNjcm9sbEVsZW1lbnRSZWN0LmhlaWdodCAvIDJcbiAgICAgICAgICAgICAgICA6IHNjcm9sbEVsZW1lbnRSZWN0LmJvdHRvbSxcbiAgICAgICAgICAgICAgTWF0aC5tYXgoXG4gICAgICAgICAgICAgICAgZGlyZWN0aW9uID09PSBLZXlib2FyZENvZGUuRG93blxuICAgICAgICAgICAgICAgICAgPyBzY3JvbGxFbGVtZW50UmVjdC50b3BcbiAgICAgICAgICAgICAgICAgIDogc2Nyb2xsRWxlbWVudFJlY3QudG9wICsgc2Nyb2xsRWxlbWVudFJlY3QuaGVpZ2h0IC8gMixcbiAgICAgICAgICAgICAgICBuZXdDb29yZGluYXRlcy55XG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICksXG4gICAgICAgICAgfTtcblxuICAgICAgICAgIGNvbnN0IGNhblNjcm9sbFggPVxuICAgICAgICAgICAgKGRpcmVjdGlvbiA9PT0gS2V5Ym9hcmRDb2RlLlJpZ2h0ICYmICFpc1JpZ2h0KSB8fFxuICAgICAgICAgICAgKGRpcmVjdGlvbiA9PT0gS2V5Ym9hcmRDb2RlLkxlZnQgJiYgIWlzTGVmdCk7XG4gICAgICAgICAgY29uc3QgY2FuU2Nyb2xsWSA9XG4gICAgICAgICAgICAoZGlyZWN0aW9uID09PSBLZXlib2FyZENvZGUuRG93biAmJiAhaXNCb3R0b20pIHx8XG4gICAgICAgICAgICAoZGlyZWN0aW9uID09PSBLZXlib2FyZENvZGUuVXAgJiYgIWlzVG9wKTtcblxuICAgICAgICAgIGlmIChjYW5TY3JvbGxYICYmIGNsYW1wZWRDb29yZGluYXRlcy54ICE9PSBuZXdDb29yZGluYXRlcy54KSB7XG4gICAgICAgICAgICBjb25zdCBuZXdTY3JvbGxDb29yZGluYXRlcyA9XG4gICAgICAgICAgICAgIHNjcm9sbENvbnRhaW5lci5zY3JvbGxMZWZ0ICsgY29vcmRpbmF0ZXNEZWx0YS54O1xuICAgICAgICAgICAgY29uc3QgY2FuU2Nyb2xsVG9OZXdDb29yZGluYXRlcyA9XG4gICAgICAgICAgICAgIChkaXJlY3Rpb24gPT09IEtleWJvYXJkQ29kZS5SaWdodCAmJlxuICAgICAgICAgICAgICAgIG5ld1Njcm9sbENvb3JkaW5hdGVzIDw9IG1heFNjcm9sbC54KSB8fFxuICAgICAgICAgICAgICAoZGlyZWN0aW9uID09PSBLZXlib2FyZENvZGUuTGVmdCAmJlxuICAgICAgICAgICAgICAgIG5ld1Njcm9sbENvb3JkaW5hdGVzID49IG1pblNjcm9sbC54KTtcblxuICAgICAgICAgICAgaWYgKGNhblNjcm9sbFRvTmV3Q29vcmRpbmF0ZXMgJiYgIWNvb3JkaW5hdGVzRGVsdGEueSkge1xuICAgICAgICAgICAgICAvLyBXZSBkb24ndCBuZWVkIHRvIHVwZGF0ZSBjb29yZGluYXRlcywgdGhlIHNjcm9sbCBhZGp1c3RtZW50IGFsb25lIHdpbGwgdHJpZ2dlclxuICAgICAgICAgICAgICAvLyBsb2dpYyB0byBhdXRvLWRldGVjdCB0aGUgbmV3IGNvbnRhaW5lciB3ZSBhcmUgb3ZlclxuICAgICAgICAgICAgICBzY3JvbGxDb250YWluZXIuc2Nyb2xsVG8oe1xuICAgICAgICAgICAgICAgIGxlZnQ6IG5ld1Njcm9sbENvb3JkaW5hdGVzLFxuICAgICAgICAgICAgICAgIGJlaGF2aW9yOiBzY3JvbGxCZWhhdmlvcixcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGNhblNjcm9sbFRvTmV3Q29vcmRpbmF0ZXMpIHtcbiAgICAgICAgICAgICAgc2Nyb2xsRGVsdGEueCA9IHNjcm9sbENvbnRhaW5lci5zY3JvbGxMZWZ0IC0gbmV3U2Nyb2xsQ29vcmRpbmF0ZXM7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzY3JvbGxEZWx0YS54ID1cbiAgICAgICAgICAgICAgICBkaXJlY3Rpb24gPT09IEtleWJvYXJkQ29kZS5SaWdodFxuICAgICAgICAgICAgICAgICAgPyBzY3JvbGxDb250YWluZXIuc2Nyb2xsTGVmdCAtIG1heFNjcm9sbC54XG4gICAgICAgICAgICAgICAgICA6IHNjcm9sbENvbnRhaW5lci5zY3JvbGxMZWZ0IC0gbWluU2Nyb2xsLng7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChzY3JvbGxEZWx0YS54KSB7XG4gICAgICAgICAgICAgIHNjcm9sbENvbnRhaW5lci5zY3JvbGxCeSh7XG4gICAgICAgICAgICAgICAgbGVmdDogLXNjcm9sbERlbHRhLngsXG4gICAgICAgICAgICAgICAgYmVoYXZpb3I6IHNjcm9sbEJlaGF2aW9yLFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2FuU2Nyb2xsWSAmJiBjbGFtcGVkQ29vcmRpbmF0ZXMueSAhPT0gbmV3Q29vcmRpbmF0ZXMueSkge1xuICAgICAgICAgICAgY29uc3QgbmV3U2Nyb2xsQ29vcmRpbmF0ZXMgPVxuICAgICAgICAgICAgICBzY3JvbGxDb250YWluZXIuc2Nyb2xsVG9wICsgY29vcmRpbmF0ZXNEZWx0YS55O1xuICAgICAgICAgICAgY29uc3QgY2FuU2Nyb2xsVG9OZXdDb29yZGluYXRlcyA9XG4gICAgICAgICAgICAgIChkaXJlY3Rpb24gPT09IEtleWJvYXJkQ29kZS5Eb3duICYmXG4gICAgICAgICAgICAgICAgbmV3U2Nyb2xsQ29vcmRpbmF0ZXMgPD0gbWF4U2Nyb2xsLnkpIHx8XG4gICAgICAgICAgICAgIChkaXJlY3Rpb24gPT09IEtleWJvYXJkQ29kZS5VcCAmJlxuICAgICAgICAgICAgICAgIG5ld1Njcm9sbENvb3JkaW5hdGVzID49IG1pblNjcm9sbC55KTtcblxuICAgICAgICAgICAgaWYgKGNhblNjcm9sbFRvTmV3Q29vcmRpbmF0ZXMgJiYgIWNvb3JkaW5hdGVzRGVsdGEueCkge1xuICAgICAgICAgICAgICAvLyBXZSBkb24ndCBuZWVkIHRvIHVwZGF0ZSBjb29yZGluYXRlcywgdGhlIHNjcm9sbCBhZGp1c3RtZW50IGFsb25lIHdpbGwgdHJpZ2dlclxuICAgICAgICAgICAgICAvLyBsb2dpYyB0byBhdXRvLWRldGVjdCB0aGUgbmV3IGNvbnRhaW5lciB3ZSBhcmUgb3ZlclxuICAgICAgICAgICAgICBzY3JvbGxDb250YWluZXIuc2Nyb2xsVG8oe1xuICAgICAgICAgICAgICAgIHRvcDogbmV3U2Nyb2xsQ29vcmRpbmF0ZXMsXG4gICAgICAgICAgICAgICAgYmVoYXZpb3I6IHNjcm9sbEJlaGF2aW9yLFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY2FuU2Nyb2xsVG9OZXdDb29yZGluYXRlcykge1xuICAgICAgICAgICAgICBzY3JvbGxEZWx0YS55ID0gc2Nyb2xsQ29udGFpbmVyLnNjcm9sbFRvcCAtIG5ld1Njcm9sbENvb3JkaW5hdGVzO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc2Nyb2xsRGVsdGEueSA9XG4gICAgICAgICAgICAgICAgZGlyZWN0aW9uID09PSBLZXlib2FyZENvZGUuRG93blxuICAgICAgICAgICAgICAgICAgPyBzY3JvbGxDb250YWluZXIuc2Nyb2xsVG9wIC0gbWF4U2Nyb2xsLnlcbiAgICAgICAgICAgICAgICAgIDogc2Nyb2xsQ29udGFpbmVyLnNjcm9sbFRvcCAtIG1pblNjcm9sbC55O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoc2Nyb2xsRGVsdGEueSkge1xuICAgICAgICAgICAgICBzY3JvbGxDb250YWluZXIuc2Nyb2xsQnkoe1xuICAgICAgICAgICAgICAgIHRvcDogLXNjcm9sbERlbHRhLnksXG4gICAgICAgICAgICAgICAgYmVoYXZpb3I6IHNjcm9sbEJlaGF2aW9yLFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5oYW5kbGVNb3ZlKFxuICAgICAgICAgIGV2ZW50LFxuICAgICAgICAgIGdldEFkanVzdGVkQ29vcmRpbmF0ZXMoXG4gICAgICAgICAgICBnZXRDb29yZGluYXRlc0RlbHRhKG5ld0Nvb3JkaW5hdGVzLCB0aGlzLnJlZmVyZW5jZUNvb3JkaW5hdGVzKSxcbiAgICAgICAgICAgIHNjcm9sbERlbHRhXG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgaGFuZGxlTW92ZShldmVudDogRXZlbnQsIGNvb3JkaW5hdGVzOiBDb29yZGluYXRlcykge1xuICAgIGNvbnN0IHtvbk1vdmV9ID0gdGhpcy5wcm9wcztcblxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgb25Nb3ZlKGNvb3JkaW5hdGVzKTtcbiAgfVxuXG4gIHByaXZhdGUgaGFuZGxlRW5kKGV2ZW50OiBFdmVudCkge1xuICAgIGNvbnN0IHtvbkVuZH0gPSB0aGlzLnByb3BzO1xuXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB0aGlzLmRldGFjaCgpO1xuICAgIG9uRW5kKCk7XG4gIH1cblxuICBwcml2YXRlIGhhbmRsZUNhbmNlbChldmVudDogRXZlbnQpIHtcbiAgICBjb25zdCB7b25DYW5jZWx9ID0gdGhpcy5wcm9wcztcblxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgdGhpcy5kZXRhY2goKTtcbiAgICBvbkNhbmNlbCgpO1xuICB9XG5cbiAgcHJpdmF0ZSBkZXRhY2goKSB7XG4gICAgdGhpcy5saXN0ZW5lcnMucmVtb3ZlQWxsKCk7XG4gICAgdGhpcy53aW5kb3dMaXN0ZW5lcnMucmVtb3ZlQWxsKCk7XG4gIH1cblxuICBzdGF0aWMgYWN0aXZhdG9yczogQWN0aXZhdG9yczxLZXlib2FyZFNlbnNvck9wdGlvbnM+ID0gW1xuICAgIHtcbiAgICAgIGV2ZW50TmFtZTogJ29uS2V5RG93bicgYXMgY29uc3QsXG4gICAgICBoYW5kbGVyOiAoXG4gICAgICAgIGV2ZW50OiBSZWFjdC5LZXlib2FyZEV2ZW50LFxuICAgICAgICB7a2V5Ym9hcmRDb2RlcyA9IGRlZmF1bHRLZXlib2FyZENvZGVzLCBvbkFjdGl2YXRpb259LFxuICAgICAgICB7YWN0aXZlfVxuICAgICAgKSA9PiB7XG4gICAgICAgIGNvbnN0IHtjb2RlfSA9IGV2ZW50Lm5hdGl2ZUV2ZW50O1xuXG4gICAgICAgIGlmIChrZXlib2FyZENvZGVzLnN0YXJ0LmluY2x1ZGVzKGNvZGUpKSB7XG4gICAgICAgICAgY29uc3QgYWN0aXZhdG9yID0gYWN0aXZlLmFjdGl2YXRvck5vZGUuY3VycmVudDtcblxuICAgICAgICAgIGlmIChhY3RpdmF0b3IgJiYgZXZlbnQudGFyZ2V0ICE9PSBhY3RpdmF0b3IpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgb25BY3RpdmF0aW9uPy4oe2V2ZW50OiBldmVudC5uYXRpdmVFdmVudH0pO1xuXG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9LFxuICAgIH0sXG4gIF07XG59XG4iLCJpbXBvcnQge1xuICBzdWJ0cmFjdCBhcyBnZXRDb29yZGluYXRlc0RlbHRhLFxuICBnZXRFdmVudENvb3JkaW5hdGVzLFxuICBnZXRPd25lckRvY3VtZW50LFxuICBnZXRXaW5kb3csXG59IGZyb20gJ0BkbmQta2l0L3V0aWxpdGllcyc7XG5cbmltcG9ydCB7ZGVmYXVsdENvb3JkaW5hdGVzfSBmcm9tICcuLi8uLi91dGlsaXRpZXMnO1xuaW1wb3J0IHtcbiAgZ2V0RXZlbnRMaXN0ZW5lclRhcmdldCxcbiAgaGFzRXhjZWVkZWREaXN0YW5jZSxcbiAgTGlzdGVuZXJzLFxufSBmcm9tICcuLi91dGlsaXRpZXMnO1xuaW1wb3J0IHtFdmVudE5hbWUsIHByZXZlbnREZWZhdWx0LCBzdG9wUHJvcGFnYXRpb259IGZyb20gJy4uL2V2ZW50cyc7XG5pbXBvcnQge0tleWJvYXJkQ29kZX0gZnJvbSAnLi4va2V5Ym9hcmQnO1xuaW1wb3J0IHR5cGUge1NlbnNvckluc3RhbmNlLCBTZW5zb3JQcm9wcywgU2Vuc29yT3B0aW9uc30gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHR5cGUge0Nvb3JkaW5hdGVzLCBEaXN0YW5jZU1lYXN1cmVtZW50fSBmcm9tICcuLi8uLi90eXBlcyc7XG5cbmludGVyZmFjZSBEaXN0YW5jZUNvbnN0cmFpbnQge1xuICBkaXN0YW5jZTogRGlzdGFuY2VNZWFzdXJlbWVudDtcbiAgdG9sZXJhbmNlPzogRGlzdGFuY2VNZWFzdXJlbWVudDtcbn1cblxuaW50ZXJmYWNlIERlbGF5Q29uc3RyYWludCB7XG4gIGRlbGF5OiBudW1iZXI7XG4gIHRvbGVyYW5jZTogRGlzdGFuY2VNZWFzdXJlbWVudDtcbn1cblxuaW50ZXJmYWNlIEV2ZW50RGVzY3JpcHRvciB7XG4gIG5hbWU6IGtleW9mIERvY3VtZW50RXZlbnRNYXA7XG4gIHBhc3NpdmU/OiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBvaW50ZXJFdmVudEhhbmRsZXJzIHtcbiAgY2FuY2VsPzogRXZlbnREZXNjcmlwdG9yO1xuICBtb3ZlOiBFdmVudERlc2NyaXB0b3I7XG4gIGVuZDogRXZlbnREZXNjcmlwdG9yO1xufVxuXG5leHBvcnQgdHlwZSBQb2ludGVyQWN0aXZhdGlvbkNvbnN0cmFpbnQgPVxuICB8IERlbGF5Q29uc3RyYWludFxuICB8IERpc3RhbmNlQ29uc3RyYWludFxuICB8IChEZWxheUNvbnN0cmFpbnQgJiBEaXN0YW5jZUNvbnN0cmFpbnQpO1xuXG5mdW5jdGlvbiBpc0Rpc3RhbmNlQ29uc3RyYWludChcbiAgY29uc3RyYWludDogUG9pbnRlckFjdGl2YXRpb25Db25zdHJhaW50XG4pOiBjb25zdHJhaW50IGlzIFBvaW50ZXJBY3RpdmF0aW9uQ29uc3RyYWludCAmIERpc3RhbmNlQ29uc3RyYWludCB7XG4gIHJldHVybiBCb29sZWFuKGNvbnN0cmFpbnQgJiYgJ2Rpc3RhbmNlJyBpbiBjb25zdHJhaW50KTtcbn1cblxuZnVuY3Rpb24gaXNEZWxheUNvbnN0cmFpbnQoXG4gIGNvbnN0cmFpbnQ6IFBvaW50ZXJBY3RpdmF0aW9uQ29uc3RyYWludFxuKTogY29uc3RyYWludCBpcyBEZWxheUNvbnN0cmFpbnQge1xuICByZXR1cm4gQm9vbGVhbihjb25zdHJhaW50ICYmICdkZWxheScgaW4gY29uc3RyYWludCk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQWJzdHJhY3RQb2ludGVyU2Vuc29yT3B0aW9ucyBleHRlbmRzIFNlbnNvck9wdGlvbnMge1xuICBhY3RpdmF0aW9uQ29uc3RyYWludD86IFBvaW50ZXJBY3RpdmF0aW9uQ29uc3RyYWludDtcbiAgYnlwYXNzQWN0aXZhdGlvbkNvbnN0cmFpbnQ/KFxuICAgIHByb3BzOiBQaWNrPEFic3RyYWN0UG9pbnRlclNlbnNvclByb3BzLCAnYWN0aXZlTm9kZScgfCAnZXZlbnQnIHwgJ29wdGlvbnMnPlxuICApOiBib29sZWFuO1xuICBvbkFjdGl2YXRpb24/KHtldmVudH06IHtldmVudDogRXZlbnR9KTogdm9pZDtcbn1cblxuZXhwb3J0IHR5cGUgQWJzdHJhY3RQb2ludGVyU2Vuc29yUHJvcHMgPVxuICBTZW5zb3JQcm9wczxBYnN0cmFjdFBvaW50ZXJTZW5zb3JPcHRpb25zPjtcblxuZXhwb3J0IGNsYXNzIEFic3RyYWN0UG9pbnRlclNlbnNvciBpbXBsZW1lbnRzIFNlbnNvckluc3RhbmNlIHtcbiAgcHVibGljIGF1dG9TY3JvbGxFbmFibGVkID0gdHJ1ZTtcbiAgcHJpdmF0ZSBkb2N1bWVudDogRG9jdW1lbnQ7XG4gIHByaXZhdGUgYWN0aXZhdGVkOiBib29sZWFuID0gZmFsc2U7XG4gIHByaXZhdGUgaW5pdGlhbENvb3JkaW5hdGVzOiBDb29yZGluYXRlcztcbiAgcHJpdmF0ZSB0aW1lb3V0SWQ6IE5vZGVKUy5UaW1lb3V0IHwgbnVsbCA9IG51bGw7XG4gIHByaXZhdGUgbGlzdGVuZXJzOiBMaXN0ZW5lcnM7XG4gIHByaXZhdGUgZG9jdW1lbnRMaXN0ZW5lcnM6IExpc3RlbmVycztcbiAgcHJpdmF0ZSB3aW5kb3dMaXN0ZW5lcnM6IExpc3RlbmVycztcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHByb3BzOiBBYnN0cmFjdFBvaW50ZXJTZW5zb3JQcm9wcyxcbiAgICBwcml2YXRlIGV2ZW50czogUG9pbnRlckV2ZW50SGFuZGxlcnMsXG4gICAgbGlzdGVuZXJUYXJnZXQgPSBnZXRFdmVudExpc3RlbmVyVGFyZ2V0KHByb3BzLmV2ZW50LnRhcmdldClcbiAgKSB7XG4gICAgY29uc3Qge2V2ZW50fSA9IHByb3BzO1xuICAgIGNvbnN0IHt0YXJnZXR9ID0gZXZlbnQ7XG5cbiAgICB0aGlzLnByb3BzID0gcHJvcHM7XG4gICAgdGhpcy5ldmVudHMgPSBldmVudHM7XG4gICAgdGhpcy5kb2N1bWVudCA9IGdldE93bmVyRG9jdW1lbnQodGFyZ2V0KTtcbiAgICB0aGlzLmRvY3VtZW50TGlzdGVuZXJzID0gbmV3IExpc3RlbmVycyh0aGlzLmRvY3VtZW50KTtcbiAgICB0aGlzLmxpc3RlbmVycyA9IG5ldyBMaXN0ZW5lcnMobGlzdGVuZXJUYXJnZXQpO1xuICAgIHRoaXMud2luZG93TGlzdGVuZXJzID0gbmV3IExpc3RlbmVycyhnZXRXaW5kb3codGFyZ2V0KSk7XG4gICAgdGhpcy5pbml0aWFsQ29vcmRpbmF0ZXMgPSBnZXRFdmVudENvb3JkaW5hdGVzKGV2ZW50KSA/PyBkZWZhdWx0Q29vcmRpbmF0ZXM7XG4gICAgdGhpcy5oYW5kbGVTdGFydCA9IHRoaXMuaGFuZGxlU3RhcnQuYmluZCh0aGlzKTtcbiAgICB0aGlzLmhhbmRsZU1vdmUgPSB0aGlzLmhhbmRsZU1vdmUuYmluZCh0aGlzKTtcbiAgICB0aGlzLmhhbmRsZUVuZCA9IHRoaXMuaGFuZGxlRW5kLmJpbmQodGhpcyk7XG4gICAgdGhpcy5oYW5kbGVDYW5jZWwgPSB0aGlzLmhhbmRsZUNhbmNlbC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuaGFuZGxlS2V5ZG93biA9IHRoaXMuaGFuZGxlS2V5ZG93bi5iaW5kKHRoaXMpO1xuICAgIHRoaXMucmVtb3ZlVGV4dFNlbGVjdGlvbiA9IHRoaXMucmVtb3ZlVGV4dFNlbGVjdGlvbi5iaW5kKHRoaXMpO1xuXG4gICAgdGhpcy5hdHRhY2goKTtcbiAgfVxuXG4gIHByaXZhdGUgYXR0YWNoKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGV2ZW50cyxcbiAgICAgIHByb3BzOiB7XG4gICAgICAgIG9wdGlvbnM6IHthY3RpdmF0aW9uQ29uc3RyYWludCwgYnlwYXNzQWN0aXZhdGlvbkNvbnN0cmFpbnR9LFxuICAgICAgfSxcbiAgICB9ID0gdGhpcztcblxuICAgIHRoaXMubGlzdGVuZXJzLmFkZChldmVudHMubW92ZS5uYW1lLCB0aGlzLmhhbmRsZU1vdmUsIHtwYXNzaXZlOiBmYWxzZX0pO1xuICAgIHRoaXMubGlzdGVuZXJzLmFkZChldmVudHMuZW5kLm5hbWUsIHRoaXMuaGFuZGxlRW5kKTtcblxuICAgIGlmIChldmVudHMuY2FuY2VsKSB7XG4gICAgICB0aGlzLmxpc3RlbmVycy5hZGQoZXZlbnRzLmNhbmNlbC5uYW1lLCB0aGlzLmhhbmRsZUNhbmNlbCk7XG4gICAgfVxuXG4gICAgdGhpcy53aW5kb3dMaXN0ZW5lcnMuYWRkKEV2ZW50TmFtZS5SZXNpemUsIHRoaXMuaGFuZGxlQ2FuY2VsKTtcbiAgICB0aGlzLndpbmRvd0xpc3RlbmVycy5hZGQoRXZlbnROYW1lLkRyYWdTdGFydCwgcHJldmVudERlZmF1bHQpO1xuICAgIHRoaXMud2luZG93TGlzdGVuZXJzLmFkZChFdmVudE5hbWUuVmlzaWJpbGl0eUNoYW5nZSwgdGhpcy5oYW5kbGVDYW5jZWwpO1xuICAgIHRoaXMud2luZG93TGlzdGVuZXJzLmFkZChFdmVudE5hbWUuQ29udGV4dE1lbnUsIHByZXZlbnREZWZhdWx0KTtcbiAgICB0aGlzLmRvY3VtZW50TGlzdGVuZXJzLmFkZChFdmVudE5hbWUuS2V5ZG93biwgdGhpcy5oYW5kbGVLZXlkb3duKTtcblxuICAgIGlmIChhY3RpdmF0aW9uQ29uc3RyYWludCkge1xuICAgICAgaWYgKFxuICAgICAgICBieXBhc3NBY3RpdmF0aW9uQ29uc3RyYWludD8uKHtcbiAgICAgICAgICBldmVudDogdGhpcy5wcm9wcy5ldmVudCxcbiAgICAgICAgICBhY3RpdmVOb2RlOiB0aGlzLnByb3BzLmFjdGl2ZU5vZGUsXG4gICAgICAgICAgb3B0aW9uczogdGhpcy5wcm9wcy5vcHRpb25zLFxuICAgICAgICB9KVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhhbmRsZVN0YXJ0KCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0RlbGF5Q29uc3RyYWludChhY3RpdmF0aW9uQ29uc3RyYWludCkpIHtcbiAgICAgICAgdGhpcy50aW1lb3V0SWQgPSBzZXRUaW1lb3V0KFxuICAgICAgICAgIHRoaXMuaGFuZGxlU3RhcnQsXG4gICAgICAgICAgYWN0aXZhdGlvbkNvbnN0cmFpbnQuZGVsYXlcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5oYW5kbGVQZW5kaW5nKGFjdGl2YXRpb25Db25zdHJhaW50KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNEaXN0YW5jZUNvbnN0cmFpbnQoYWN0aXZhdGlvbkNvbnN0cmFpbnQpKSB7XG4gICAgICAgIHRoaXMuaGFuZGxlUGVuZGluZyhhY3RpdmF0aW9uQ29uc3RyYWludCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmhhbmRsZVN0YXJ0KCk7XG4gIH1cblxuICBwcml2YXRlIGRldGFjaCgpIHtcbiAgICB0aGlzLmxpc3RlbmVycy5yZW1vdmVBbGwoKTtcbiAgICB0aGlzLndpbmRvd0xpc3RlbmVycy5yZW1vdmVBbGwoKTtcblxuICAgIC8vIFdhaXQgdW50aWwgdGhlIG5leHQgZXZlbnQgbG9vcCBiZWZvcmUgcmVtb3ZpbmcgZG9jdW1lbnQgbGlzdGVuZXJzXG4gICAgLy8gVGhpcyBpcyBuZWNlc3NhcnkgYmVjYXVzZSB3ZSBsaXN0ZW4gZm9yIGBjbGlja2AgYW5kIGBzZWxlY3Rpb25gIGV2ZW50cyBvbiB0aGUgZG9jdW1lbnRcbiAgICBzZXRUaW1lb3V0KHRoaXMuZG9jdW1lbnRMaXN0ZW5lcnMucmVtb3ZlQWxsLCA1MCk7XG5cbiAgICBpZiAodGhpcy50aW1lb3V0SWQgIT09IG51bGwpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXRJZCk7XG4gICAgICB0aGlzLnRpbWVvdXRJZCA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBoYW5kbGVQZW5kaW5nKFxuICAgIGNvbnN0cmFpbnQ6IFBvaW50ZXJBY3RpdmF0aW9uQ29uc3RyYWludCxcbiAgICBvZmZzZXQ/OiBDb29yZGluYXRlcyB8IHVuZGVmaW5lZFxuICApOiB2b2lkIHtcbiAgICBjb25zdCB7YWN0aXZlLCBvblBlbmRpbmd9ID0gdGhpcy5wcm9wcztcbiAgICBvblBlbmRpbmcoYWN0aXZlLCBjb25zdHJhaW50LCB0aGlzLmluaXRpYWxDb29yZGluYXRlcywgb2Zmc2V0KTtcbiAgfVxuXG4gIHByaXZhdGUgaGFuZGxlU3RhcnQoKSB7XG4gICAgY29uc3Qge2luaXRpYWxDb29yZGluYXRlc30gPSB0aGlzO1xuICAgIGNvbnN0IHtvblN0YXJ0fSA9IHRoaXMucHJvcHM7XG5cbiAgICBpZiAoaW5pdGlhbENvb3JkaW5hdGVzKSB7XG4gICAgICB0aGlzLmFjdGl2YXRlZCA9IHRydWU7XG5cbiAgICAgIC8vIFN0b3AgcHJvcGFnYXRpb24gb2YgY2xpY2sgZXZlbnRzIG9uY2UgYWN0aXZhdGlvbiBjb25zdHJhaW50cyBhcmUgbWV0XG4gICAgICB0aGlzLmRvY3VtZW50TGlzdGVuZXJzLmFkZChFdmVudE5hbWUuQ2xpY2ssIHN0b3BQcm9wYWdhdGlvbiwge1xuICAgICAgICBjYXB0dXJlOiB0cnVlLFxuICAgICAgfSk7XG5cbiAgICAgIC8vIFJlbW92ZSBhbnkgdGV4dCBzZWxlY3Rpb24gZnJvbSB0aGUgZG9jdW1lbnRcbiAgICAgIHRoaXMucmVtb3ZlVGV4dFNlbGVjdGlvbigpO1xuXG4gICAgICAvLyBQcmV2ZW50IGZ1cnRoZXIgdGV4dCBzZWxlY3Rpb24gd2hpbGUgZHJhZ2dpbmdcbiAgICAgIHRoaXMuZG9jdW1lbnRMaXN0ZW5lcnMuYWRkKFxuICAgICAgICBFdmVudE5hbWUuU2VsZWN0aW9uQ2hhbmdlLFxuICAgICAgICB0aGlzLnJlbW92ZVRleHRTZWxlY3Rpb25cbiAgICAgICk7XG5cbiAgICAgIG9uU3RhcnQoaW5pdGlhbENvb3JkaW5hdGVzKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGhhbmRsZU1vdmUoZXZlbnQ6IEV2ZW50KSB7XG4gICAgY29uc3Qge2FjdGl2YXRlZCwgaW5pdGlhbENvb3JkaW5hdGVzLCBwcm9wc30gPSB0aGlzO1xuICAgIGNvbnN0IHtcbiAgICAgIG9uTW92ZSxcbiAgICAgIG9wdGlvbnM6IHthY3RpdmF0aW9uQ29uc3RyYWludH0sXG4gICAgfSA9IHByb3BzO1xuXG4gICAgaWYgKCFpbml0aWFsQ29vcmRpbmF0ZXMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBjb29yZGluYXRlcyA9IGdldEV2ZW50Q29vcmRpbmF0ZXMoZXZlbnQpID8/IGRlZmF1bHRDb29yZGluYXRlcztcbiAgICBjb25zdCBkZWx0YSA9IGdldENvb3JkaW5hdGVzRGVsdGEoaW5pdGlhbENvb3JkaW5hdGVzLCBjb29yZGluYXRlcyk7XG5cbiAgICAvLyBDb25zdHJhaW50IHZhbGlkYXRpb25cbiAgICBpZiAoIWFjdGl2YXRlZCAmJiBhY3RpdmF0aW9uQ29uc3RyYWludCkge1xuICAgICAgaWYgKGlzRGlzdGFuY2VDb25zdHJhaW50KGFjdGl2YXRpb25Db25zdHJhaW50KSkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgYWN0aXZhdGlvbkNvbnN0cmFpbnQudG9sZXJhbmNlICE9IG51bGwgJiZcbiAgICAgICAgICBoYXNFeGNlZWRlZERpc3RhbmNlKGRlbHRhLCBhY3RpdmF0aW9uQ29uc3RyYWludC50b2xlcmFuY2UpXG4gICAgICAgICkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmhhbmRsZUNhbmNlbCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhhc0V4Y2VlZGVkRGlzdGFuY2UoZGVsdGEsIGFjdGl2YXRpb25Db25zdHJhaW50LmRpc3RhbmNlKSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmhhbmRsZVN0YXJ0KCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGlzRGVsYXlDb25zdHJhaW50KGFjdGl2YXRpb25Db25zdHJhaW50KSkge1xuICAgICAgICBpZiAoaGFzRXhjZWVkZWREaXN0YW5jZShkZWx0YSwgYWN0aXZhdGlvbkNvbnN0cmFpbnQudG9sZXJhbmNlKSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmhhbmRsZUNhbmNlbCgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuaGFuZGxlUGVuZGluZyhhY3RpdmF0aW9uQ29uc3RyYWludCwgZGVsdGEpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChldmVudC5jYW5jZWxhYmxlKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIG9uTW92ZShjb29yZGluYXRlcyk7XG4gIH1cblxuICBwcml2YXRlIGhhbmRsZUVuZCgpIHtcbiAgICBjb25zdCB7b25BYm9ydCwgb25FbmR9ID0gdGhpcy5wcm9wcztcblxuICAgIHRoaXMuZGV0YWNoKCk7XG4gICAgaWYgKCF0aGlzLmFjdGl2YXRlZCkge1xuICAgICAgb25BYm9ydCh0aGlzLnByb3BzLmFjdGl2ZSk7XG4gICAgfVxuICAgIG9uRW5kKCk7XG4gIH1cblxuICBwcml2YXRlIGhhbmRsZUNhbmNlbCgpIHtcbiAgICBjb25zdCB7b25BYm9ydCwgb25DYW5jZWx9ID0gdGhpcy5wcm9wcztcblxuICAgIHRoaXMuZGV0YWNoKCk7XG4gICAgaWYgKCF0aGlzLmFjdGl2YXRlZCkge1xuICAgICAgb25BYm9ydCh0aGlzLnByb3BzLmFjdGl2ZSk7XG4gICAgfVxuICAgIG9uQ2FuY2VsKCk7XG4gIH1cblxuICBwcml2YXRlIGhhbmRsZUtleWRvd24oZXZlbnQ6IEtleWJvYXJkRXZlbnQpIHtcbiAgICBpZiAoZXZlbnQuY29kZSA9PT0gS2V5Ym9hcmRDb2RlLkVzYykge1xuICAgICAgdGhpcy5oYW5kbGVDYW5jZWwoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHJlbW92ZVRleHRTZWxlY3Rpb24oKSB7XG4gICAgdGhpcy5kb2N1bWVudC5nZXRTZWxlY3Rpb24oKT8ucmVtb3ZlQWxsUmFuZ2VzKCk7XG4gIH1cbn1cbiIsImltcG9ydCB0eXBlIHtQb2ludGVyRXZlbnR9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7Z2V0T3duZXJEb2N1bWVudH0gZnJvbSAnQGRuZC1raXQvdXRpbGl0aWVzJztcblxuaW1wb3J0IHR5cGUge1NlbnNvclByb3BzfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQge1xuICBBYnN0cmFjdFBvaW50ZXJTZW5zb3IsXG4gIEFic3RyYWN0UG9pbnRlclNlbnNvck9wdGlvbnMsXG4gIFBvaW50ZXJFdmVudEhhbmRsZXJzLFxufSBmcm9tICcuL0Fic3RyYWN0UG9pbnRlclNlbnNvcic7XG5cbmNvbnN0IGV2ZW50czogUG9pbnRlckV2ZW50SGFuZGxlcnMgPSB7XG4gIGNhbmNlbDoge25hbWU6ICdwb2ludGVyY2FuY2VsJ30sXG4gIG1vdmU6IHtuYW1lOiAncG9pbnRlcm1vdmUnfSxcbiAgZW5kOiB7bmFtZTogJ3BvaW50ZXJ1cCd9LFxufTtcblxuZXhwb3J0IGludGVyZmFjZSBQb2ludGVyU2Vuc29yT3B0aW9ucyBleHRlbmRzIEFic3RyYWN0UG9pbnRlclNlbnNvck9wdGlvbnMge31cblxuZXhwb3J0IHR5cGUgUG9pbnRlclNlbnNvclByb3BzID0gU2Vuc29yUHJvcHM8UG9pbnRlclNlbnNvck9wdGlvbnM+O1xuXG5leHBvcnQgY2xhc3MgUG9pbnRlclNlbnNvciBleHRlbmRzIEFic3RyYWN0UG9pbnRlclNlbnNvciB7XG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQb2ludGVyU2Vuc29yUHJvcHMpIHtcbiAgICBjb25zdCB7ZXZlbnR9ID0gcHJvcHM7XG4gICAgLy8gUG9pbnRlciBldmVudHMgc3RvcCBmaXJpbmcgaWYgdGhlIHRhcmdldCBpcyB1bm1vdW50ZWQgd2hpbGUgZHJhZ2dpbmdcbiAgICAvLyBUaGVyZWZvcmUgd2UgYXR0YWNoIGxpc3RlbmVycyB0byB0aGUgb3duZXIgZG9jdW1lbnQgaW5zdGVhZFxuICAgIGNvbnN0IGxpc3RlbmVyVGFyZ2V0ID0gZ2V0T3duZXJEb2N1bWVudChldmVudC50YXJnZXQpO1xuXG4gICAgc3VwZXIocHJvcHMsIGV2ZW50cywgbGlzdGVuZXJUYXJnZXQpO1xuICB9XG5cbiAgc3RhdGljIGFjdGl2YXRvcnMgPSBbXG4gICAge1xuICAgICAgZXZlbnROYW1lOiAnb25Qb2ludGVyRG93bicgYXMgY29uc3QsXG4gICAgICBoYW5kbGVyOiAoXG4gICAgICAgIHtuYXRpdmVFdmVudDogZXZlbnR9OiBQb2ludGVyRXZlbnQsXG4gICAgICAgIHtvbkFjdGl2YXRpb259OiBQb2ludGVyU2Vuc29yT3B0aW9uc1xuICAgICAgKSA9PiB7XG4gICAgICAgIGlmICghZXZlbnQuaXNQcmltYXJ5IHx8IGV2ZW50LmJ1dHRvbiAhPT0gMCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIG9uQWN0aXZhdGlvbj8uKHtldmVudH0pO1xuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSxcbiAgICB9LFxuICBdO1xufVxuIiwiaW1wb3J0IHR5cGUge01vdXNlRXZlbnR9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7Z2V0T3duZXJEb2N1bWVudH0gZnJvbSAnQGRuZC1raXQvdXRpbGl0aWVzJztcblxuaW1wb3J0IHR5cGUge1NlbnNvclByb3BzfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQge1xuICBBYnN0cmFjdFBvaW50ZXJTZW5zb3IsXG4gIFBvaW50ZXJFdmVudEhhbmRsZXJzLFxuICBBYnN0cmFjdFBvaW50ZXJTZW5zb3JPcHRpb25zLFxufSBmcm9tICcuLi9wb2ludGVyJztcblxuY29uc3QgZXZlbnRzOiBQb2ludGVyRXZlbnRIYW5kbGVycyA9IHtcbiAgbW92ZToge25hbWU6ICdtb3VzZW1vdmUnfSxcbiAgZW5kOiB7bmFtZTogJ21vdXNldXAnfSxcbn07XG5cbmVudW0gTW91c2VCdXR0b24ge1xuICBSaWdodENsaWNrID0gMixcbn1cblxuZXhwb3J0IGludGVyZmFjZSBNb3VzZVNlbnNvck9wdGlvbnMgZXh0ZW5kcyBBYnN0cmFjdFBvaW50ZXJTZW5zb3JPcHRpb25zIHt9XG5cbmV4cG9ydCB0eXBlIE1vdXNlU2Vuc29yUHJvcHMgPSBTZW5zb3JQcm9wczxNb3VzZVNlbnNvck9wdGlvbnM+O1xuXG5leHBvcnQgY2xhc3MgTW91c2VTZW5zb3IgZXh0ZW5kcyBBYnN0cmFjdFBvaW50ZXJTZW5zb3Ige1xuICBjb25zdHJ1Y3Rvcihwcm9wczogTW91c2VTZW5zb3JQcm9wcykge1xuICAgIHN1cGVyKHByb3BzLCBldmVudHMsIGdldE93bmVyRG9jdW1lbnQocHJvcHMuZXZlbnQudGFyZ2V0KSk7XG4gIH1cblxuICBzdGF0aWMgYWN0aXZhdG9ycyA9IFtcbiAgICB7XG4gICAgICBldmVudE5hbWU6ICdvbk1vdXNlRG93bicgYXMgY29uc3QsXG4gICAgICBoYW5kbGVyOiAoXG4gICAgICAgIHtuYXRpdmVFdmVudDogZXZlbnR9OiBNb3VzZUV2ZW50LFxuICAgICAgICB7b25BY3RpdmF0aW9ufTogTW91c2VTZW5zb3JPcHRpb25zXG4gICAgICApID0+IHtcbiAgICAgICAgaWYgKGV2ZW50LmJ1dHRvbiA9PT0gTW91c2VCdXR0b24uUmlnaHRDbGljaykge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIG9uQWN0aXZhdGlvbj8uKHtldmVudH0pO1xuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSxcbiAgICB9LFxuICBdO1xufVxuIiwiaW1wb3J0IHR5cGUge1RvdWNoRXZlbnR9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHtcbiAgQWJzdHJhY3RQb2ludGVyU2Vuc29yLFxuICBQb2ludGVyU2Vuc29yUHJvcHMsXG4gIFBvaW50ZXJFdmVudEhhbmRsZXJzLFxuICBQb2ludGVyU2Vuc29yT3B0aW9ucyxcbn0gZnJvbSAnLi4vcG9pbnRlcic7XG5pbXBvcnQgdHlwZSB7U2Vuc29yUHJvcHN9IGZyb20gJy4uL3R5cGVzJztcblxuY29uc3QgZXZlbnRzOiBQb2ludGVyRXZlbnRIYW5kbGVycyA9IHtcbiAgY2FuY2VsOiB7bmFtZTogJ3RvdWNoY2FuY2VsJ30sXG4gIG1vdmU6IHtuYW1lOiAndG91Y2htb3ZlJ30sXG4gIGVuZDoge25hbWU6ICd0b3VjaGVuZCd9LFxufTtcblxuZXhwb3J0IGludGVyZmFjZSBUb3VjaFNlbnNvck9wdGlvbnMgZXh0ZW5kcyBQb2ludGVyU2Vuc29yT3B0aW9ucyB7fVxuXG5leHBvcnQgdHlwZSBUb3VjaFNlbnNvclByb3BzID0gU2Vuc29yUHJvcHM8VG91Y2hTZW5zb3JPcHRpb25zPjtcblxuZXhwb3J0IGNsYXNzIFRvdWNoU2Vuc29yIGV4dGVuZHMgQWJzdHJhY3RQb2ludGVyU2Vuc29yIHtcbiAgY29uc3RydWN0b3IocHJvcHM6IFBvaW50ZXJTZW5zb3JQcm9wcykge1xuICAgIHN1cGVyKHByb3BzLCBldmVudHMpO1xuICB9XG5cbiAgc3RhdGljIGFjdGl2YXRvcnMgPSBbXG4gICAge1xuICAgICAgZXZlbnROYW1lOiAnb25Ub3VjaFN0YXJ0JyBhcyBjb25zdCxcbiAgICAgIGhhbmRsZXI6IChcbiAgICAgICAge25hdGl2ZUV2ZW50OiBldmVudH06IFRvdWNoRXZlbnQsXG4gICAgICAgIHtvbkFjdGl2YXRpb259OiBUb3VjaFNlbnNvck9wdGlvbnNcbiAgICAgICkgPT4ge1xuICAgICAgICBjb25zdCB7dG91Y2hlc30gPSBldmVudDtcblxuICAgICAgICBpZiAodG91Y2hlcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgb25BY3RpdmF0aW9uPy4oe2V2ZW50fSk7XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9LFxuICAgIH0sXG4gIF07XG5cbiAgc3RhdGljIHNldHVwKCkge1xuICAgIC8vIEFkZGluZyBhIG5vbi1jYXB0dXJlIGFuZCBub24tcGFzc2l2ZSBgdG91Y2htb3ZlYCBsaXN0ZW5lciBpbiBvcmRlclxuICAgIC8vIHRvIGZvcmNlIGBldmVudC5wcmV2ZW50RGVmYXVsdCgpYCBjYWxscyB0byB3b3JrIGluIGR5bmFtaWNhbGx5IGFkZGVkXG4gICAgLy8gdG91Y2htb3ZlIGV2ZW50IGhhbmRsZXJzLiBUaGlzIGlzIHJlcXVpcmVkIGZvciBpT1MgU2FmYXJpLlxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKGV2ZW50cy5tb3ZlLm5hbWUsIG5vb3AsIHtcbiAgICAgIGNhcHR1cmU6IGZhbHNlLFxuICAgICAgcGFzc2l2ZTogZmFsc2UsXG4gICAgfSk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gdGVhcmRvd24oKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudHMubW92ZS5uYW1lLCBub29wKTtcbiAgICB9O1xuXG4gICAgLy8gV2UgY3JlYXRlIGEgbmV3IGhhbmRsZXIgYmVjYXVzZSB0aGUgdGVhcmRvd24gZnVuY3Rpb24gb2YgYW5vdGhlciBzZW5zb3JcbiAgICAvLyBjb3VsZCByZW1vdmUgb3VyIGV2ZW50IGxpc3RlbmVyIGlmIHdlIHVzZSBhIHJlZmVyZW50aWFsbHkgZXF1YWwgbGlzdGVuZXIuXG4gICAgZnVuY3Rpb24gbm9vcCgpIHt9XG4gIH1cbn1cbiIsImltcG9ydCB7dXNlQ2FsbGJhY2ssIHVzZUVmZmVjdCwgdXNlTWVtbywgdXNlUmVmfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQge3VzZUludGVydmFsLCB1c2VMYXp5TWVtbywgdXNlUHJldmlvdXN9IGZyb20gJ0BkbmQta2l0L3V0aWxpdGllcyc7XG5cbmltcG9ydCB7Z2V0U2Nyb2xsRGlyZWN0aW9uQW5kU3BlZWR9IGZyb20gJy4uLy4uL3V0aWxpdGllcyc7XG5pbXBvcnQge0RpcmVjdGlvbn0gZnJvbSAnLi4vLi4vdHlwZXMnO1xuaW1wb3J0IHR5cGUge0Nvb3JkaW5hdGVzLCBDbGllbnRSZWN0fSBmcm9tICcuLi8uLi90eXBlcyc7XG5cbmV4cG9ydCB0eXBlIFNjcm9sbEFuY2VzdG9yU29ydGluZ0ZuID0gKGFuY2VzdG9yczogRWxlbWVudFtdKSA9PiBFbGVtZW50W107XG5cbmV4cG9ydCBlbnVtIEF1dG9TY3JvbGxBY3RpdmF0b3Ige1xuICBQb2ludGVyLFxuICBEcmFnZ2FibGVSZWN0LFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIE9wdGlvbnMge1xuICBhY2NlbGVyYXRpb24/OiBudW1iZXI7XG4gIGFjdGl2YXRvcj86IEF1dG9TY3JvbGxBY3RpdmF0b3I7XG4gIGNhblNjcm9sbD86IENhblNjcm9sbDtcbiAgZW5hYmxlZD86IGJvb2xlYW47XG4gIGludGVydmFsPzogbnVtYmVyO1xuICBsYXlvdXRTaGlmdENvbXBlbnNhdGlvbj86XG4gICAgfCBib29sZWFuXG4gICAgfCB7XG4gICAgICAgIHg6IGJvb2xlYW47XG4gICAgICAgIHk6IGJvb2xlYW47XG4gICAgICB9O1xuICBvcmRlcj86IFRyYXZlcnNhbE9yZGVyO1xuICB0aHJlc2hvbGQ/OiB7XG4gICAgeDogbnVtYmVyO1xuICAgIHk6IG51bWJlcjtcbiAgfTtcbn1cblxuaW50ZXJmYWNlIEFyZ3VtZW50cyBleHRlbmRzIE9wdGlvbnMge1xuICBkcmFnZ2luZ1JlY3Q6IENsaWVudFJlY3QgfCBudWxsO1xuICBlbmFibGVkOiBib29sZWFuO1xuICBwb2ludGVyQ29vcmRpbmF0ZXM6IENvb3JkaW5hdGVzIHwgbnVsbDtcbiAgc2Nyb2xsYWJsZUFuY2VzdG9yczogRWxlbWVudFtdO1xuICBzY3JvbGxhYmxlQW5jZXN0b3JSZWN0czogQ2xpZW50UmVjdFtdO1xuICBkZWx0YTogQ29vcmRpbmF0ZXM7XG59XG5cbmV4cG9ydCB0eXBlIENhblNjcm9sbCA9IChlbGVtZW50OiBFbGVtZW50KSA9PiBib29sZWFuO1xuXG5leHBvcnQgZW51bSBUcmF2ZXJzYWxPcmRlciB7XG4gIFRyZWVPcmRlcixcbiAgUmV2ZXJzZWRUcmVlT3JkZXIsXG59XG5cbmludGVyZmFjZSBTY3JvbGxEaXJlY3Rpb24ge1xuICB4OiAwIHwgRGlyZWN0aW9uO1xuICB5OiAwIHwgRGlyZWN0aW9uO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXNlQXV0b1Njcm9sbGVyKHtcbiAgYWNjZWxlcmF0aW9uLFxuICBhY3RpdmF0b3IgPSBBdXRvU2Nyb2xsQWN0aXZhdG9yLlBvaW50ZXIsXG4gIGNhblNjcm9sbCxcbiAgZHJhZ2dpbmdSZWN0LFxuICBlbmFibGVkLFxuICBpbnRlcnZhbCA9IDUsXG4gIG9yZGVyID0gVHJhdmVyc2FsT3JkZXIuVHJlZU9yZGVyLFxuICBwb2ludGVyQ29vcmRpbmF0ZXMsXG4gIHNjcm9sbGFibGVBbmNlc3RvcnMsXG4gIHNjcm9sbGFibGVBbmNlc3RvclJlY3RzLFxuICBkZWx0YSxcbiAgdGhyZXNob2xkLFxufTogQXJndW1lbnRzKSB7XG4gIGNvbnN0IHNjcm9sbEludGVudCA9IHVzZVNjcm9sbEludGVudCh7ZGVsdGEsIGRpc2FibGVkOiAhZW5hYmxlZH0pO1xuICBjb25zdCBbc2V0QXV0b1Njcm9sbEludGVydmFsLCBjbGVhckF1dG9TY3JvbGxJbnRlcnZhbF0gPSB1c2VJbnRlcnZhbCgpO1xuICBjb25zdCBzY3JvbGxTcGVlZCA9IHVzZVJlZjxDb29yZGluYXRlcz4oe3g6IDAsIHk6IDB9KTtcbiAgY29uc3Qgc2Nyb2xsRGlyZWN0aW9uID0gdXNlUmVmPFNjcm9sbERpcmVjdGlvbj4oe3g6IDAsIHk6IDB9KTtcbiAgY29uc3QgcmVjdCA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIHN3aXRjaCAoYWN0aXZhdG9yKSB7XG4gICAgICBjYXNlIEF1dG9TY3JvbGxBY3RpdmF0b3IuUG9pbnRlcjpcbiAgICAgICAgcmV0dXJuIHBvaW50ZXJDb29yZGluYXRlc1xuICAgICAgICAgID8ge1xuICAgICAgICAgICAgICB0b3A6IHBvaW50ZXJDb29yZGluYXRlcy55LFxuICAgICAgICAgICAgICBib3R0b206IHBvaW50ZXJDb29yZGluYXRlcy55LFxuICAgICAgICAgICAgICBsZWZ0OiBwb2ludGVyQ29vcmRpbmF0ZXMueCxcbiAgICAgICAgICAgICAgcmlnaHQ6IHBvaW50ZXJDb29yZGluYXRlcy54LFxuICAgICAgICAgICAgfVxuICAgICAgICAgIDogbnVsbDtcbiAgICAgIGNhc2UgQXV0b1Njcm9sbEFjdGl2YXRvci5EcmFnZ2FibGVSZWN0OlxuICAgICAgICByZXR1cm4gZHJhZ2dpbmdSZWN0O1xuICAgIH1cbiAgfSwgW2FjdGl2YXRvciwgZHJhZ2dpbmdSZWN0LCBwb2ludGVyQ29vcmRpbmF0ZXNdKTtcbiAgY29uc3Qgc2Nyb2xsQ29udGFpbmVyUmVmID0gdXNlUmVmPEVsZW1lbnQgfCBudWxsPihudWxsKTtcbiAgY29uc3QgYXV0b1Njcm9sbCA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBjb25zdCBzY3JvbGxDb250YWluZXIgPSBzY3JvbGxDb250YWluZXJSZWYuY3VycmVudDtcblxuICAgIGlmICghc2Nyb2xsQ29udGFpbmVyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qgc2Nyb2xsTGVmdCA9IHNjcm9sbFNwZWVkLmN1cnJlbnQueCAqIHNjcm9sbERpcmVjdGlvbi5jdXJyZW50Lng7XG4gICAgY29uc3Qgc2Nyb2xsVG9wID0gc2Nyb2xsU3BlZWQuY3VycmVudC55ICogc2Nyb2xsRGlyZWN0aW9uLmN1cnJlbnQueTtcblxuICAgIHNjcm9sbENvbnRhaW5lci5zY3JvbGxCeShzY3JvbGxMZWZ0LCBzY3JvbGxUb3ApO1xuICB9LCBbXSk7XG4gIGNvbnN0IHNvcnRlZFNjcm9sbGFibGVBbmNlc3RvcnMgPSB1c2VNZW1vKFxuICAgICgpID0+XG4gICAgICBvcmRlciA9PT0gVHJhdmVyc2FsT3JkZXIuVHJlZU9yZGVyXG4gICAgICAgID8gWy4uLnNjcm9sbGFibGVBbmNlc3RvcnNdLnJldmVyc2UoKVxuICAgICAgICA6IHNjcm9sbGFibGVBbmNlc3RvcnMsXG4gICAgW29yZGVyLCBzY3JvbGxhYmxlQW5jZXN0b3JzXVxuICApO1xuXG4gIHVzZUVmZmVjdChcbiAgICAoKSA9PiB7XG4gICAgICBpZiAoIWVuYWJsZWQgfHwgIXNjcm9sbGFibGVBbmNlc3RvcnMubGVuZ3RoIHx8ICFyZWN0KSB7XG4gICAgICAgIGNsZWFyQXV0b1Njcm9sbEludGVydmFsKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZm9yIChjb25zdCBzY3JvbGxDb250YWluZXIgb2Ygc29ydGVkU2Nyb2xsYWJsZUFuY2VzdG9ycykge1xuICAgICAgICBpZiAoY2FuU2Nyb2xsPy4oc2Nyb2xsQ29udGFpbmVyKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGluZGV4ID0gc2Nyb2xsYWJsZUFuY2VzdG9ycy5pbmRleE9mKHNjcm9sbENvbnRhaW5lcik7XG4gICAgICAgIGNvbnN0IHNjcm9sbENvbnRhaW5lclJlY3QgPSBzY3JvbGxhYmxlQW5jZXN0b3JSZWN0c1tpbmRleF07XG5cbiAgICAgICAgaWYgKCFzY3JvbGxDb250YWluZXJSZWN0KSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB7ZGlyZWN0aW9uLCBzcGVlZH0gPSBnZXRTY3JvbGxEaXJlY3Rpb25BbmRTcGVlZChcbiAgICAgICAgICBzY3JvbGxDb250YWluZXIsXG4gICAgICAgICAgc2Nyb2xsQ29udGFpbmVyUmVjdCxcbiAgICAgICAgICByZWN0LFxuICAgICAgICAgIGFjY2VsZXJhdGlvbixcbiAgICAgICAgICB0aHJlc2hvbGRcbiAgICAgICAgKTtcblxuICAgICAgICBmb3IgKGNvbnN0IGF4aXMgb2YgWyd4JywgJ3knXSBhcyBjb25zdCkge1xuICAgICAgICAgIGlmICghc2Nyb2xsSW50ZW50W2F4aXNdW2RpcmVjdGlvbltheGlzXSBhcyBEaXJlY3Rpb25dKSB7XG4gICAgICAgICAgICBzcGVlZFtheGlzXSA9IDA7XG4gICAgICAgICAgICBkaXJlY3Rpb25bYXhpc10gPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzcGVlZC54ID4gMCB8fCBzcGVlZC55ID4gMCkge1xuICAgICAgICAgIGNsZWFyQXV0b1Njcm9sbEludGVydmFsKCk7XG5cbiAgICAgICAgICBzY3JvbGxDb250YWluZXJSZWYuY3VycmVudCA9IHNjcm9sbENvbnRhaW5lcjtcbiAgICAgICAgICBzZXRBdXRvU2Nyb2xsSW50ZXJ2YWwoYXV0b1Njcm9sbCwgaW50ZXJ2YWwpO1xuXG4gICAgICAgICAgc2Nyb2xsU3BlZWQuY3VycmVudCA9IHNwZWVkO1xuICAgICAgICAgIHNjcm9sbERpcmVjdGlvbi5jdXJyZW50ID0gZGlyZWN0aW9uO1xuXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHNjcm9sbFNwZWVkLmN1cnJlbnQgPSB7eDogMCwgeTogMH07XG4gICAgICBzY3JvbGxEaXJlY3Rpb24uY3VycmVudCA9IHt4OiAwLCB5OiAwfTtcbiAgICAgIGNsZWFyQXV0b1Njcm9sbEludGVydmFsKCk7XG4gICAgfSxcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gICAgW1xuICAgICAgYWNjZWxlcmF0aW9uLFxuICAgICAgYXV0b1Njcm9sbCxcbiAgICAgIGNhblNjcm9sbCxcbiAgICAgIGNsZWFyQXV0b1Njcm9sbEludGVydmFsLFxuICAgICAgZW5hYmxlZCxcbiAgICAgIGludGVydmFsLFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICAgICAgSlNPTi5zdHJpbmdpZnkocmVjdCksXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gICAgICBKU09OLnN0cmluZ2lmeShzY3JvbGxJbnRlbnQpLFxuICAgICAgc2V0QXV0b1Njcm9sbEludGVydmFsLFxuICAgICAgc2Nyb2xsYWJsZUFuY2VzdG9ycyxcbiAgICAgIHNvcnRlZFNjcm9sbGFibGVBbmNlc3RvcnMsXG4gICAgICBzY3JvbGxhYmxlQW5jZXN0b3JSZWN0cyxcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgICAgIEpTT04uc3RyaW5naWZ5KHRocmVzaG9sZCksXG4gICAgXVxuICApO1xufVxuXG5pbnRlcmZhY2UgU2Nyb2xsSW50ZW50IHtcbiAgeDogUmVjb3JkPERpcmVjdGlvbiwgYm9vbGVhbj47XG4gIHk6IFJlY29yZDxEaXJlY3Rpb24sIGJvb2xlYW4+O1xufVxuXG5jb25zdCBkZWZhdWx0U2Nyb2xsSW50ZW50OiBTY3JvbGxJbnRlbnQgPSB7XG4gIHg6IHtbRGlyZWN0aW9uLkJhY2t3YXJkXTogZmFsc2UsIFtEaXJlY3Rpb24uRm9yd2FyZF06IGZhbHNlfSxcbiAgeToge1tEaXJlY3Rpb24uQmFja3dhcmRdOiBmYWxzZSwgW0RpcmVjdGlvbi5Gb3J3YXJkXTogZmFsc2V9LFxufTtcblxuZnVuY3Rpb24gdXNlU2Nyb2xsSW50ZW50KHtcbiAgZGVsdGEsXG4gIGRpc2FibGVkLFxufToge1xuICBkZWx0YTogQ29vcmRpbmF0ZXM7XG4gIGRpc2FibGVkOiBib29sZWFuO1xufSk6IFNjcm9sbEludGVudCB7XG4gIGNvbnN0IHByZXZpb3VzRGVsdGEgPSB1c2VQcmV2aW91cyhkZWx0YSk7XG5cbiAgcmV0dXJuIHVzZUxhenlNZW1vPFNjcm9sbEludGVudD4oXG4gICAgKHByZXZpb3VzSW50ZW50KSA9PiB7XG4gICAgICBpZiAoZGlzYWJsZWQgfHwgIXByZXZpb3VzRGVsdGEgfHwgIXByZXZpb3VzSW50ZW50KSB7XG4gICAgICAgIC8vIFJlc2V0IHNjcm9sbCBpbnRlbnQgdHJhY2tpbmcgd2hlbiBhdXRvLXNjcm9sbGluZyBpcyBkaXNhYmxlZFxuICAgICAgICByZXR1cm4gZGVmYXVsdFNjcm9sbEludGVudDtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZGlyZWN0aW9uID0ge1xuICAgICAgICB4OiBNYXRoLnNpZ24oZGVsdGEueCAtIHByZXZpb3VzRGVsdGEueCksXG4gICAgICAgIHk6IE1hdGguc2lnbihkZWx0YS55IC0gcHJldmlvdXNEZWx0YS55KSxcbiAgICAgIH07XG5cbiAgICAgIC8vIEtlZXAgdHJhY2sgb2YgdGhlIHVzZXIgaW50ZW50IHRvIHNjcm9sbCBpbiBlYWNoIGRpcmVjdGlvbiBmb3IgYm90aCBheGlzXG4gICAgICByZXR1cm4ge1xuICAgICAgICB4OiB7XG4gICAgICAgICAgW0RpcmVjdGlvbi5CYWNrd2FyZF06XG4gICAgICAgICAgICBwcmV2aW91c0ludGVudC54W0RpcmVjdGlvbi5CYWNrd2FyZF0gfHwgZGlyZWN0aW9uLnggPT09IC0xLFxuICAgICAgICAgIFtEaXJlY3Rpb24uRm9yd2FyZF06XG4gICAgICAgICAgICBwcmV2aW91c0ludGVudC54W0RpcmVjdGlvbi5Gb3J3YXJkXSB8fCBkaXJlY3Rpb24ueCA9PT0gMSxcbiAgICAgICAgfSxcbiAgICAgICAgeToge1xuICAgICAgICAgIFtEaXJlY3Rpb24uQmFja3dhcmRdOlxuICAgICAgICAgICAgcHJldmlvdXNJbnRlbnQueVtEaXJlY3Rpb24uQmFja3dhcmRdIHx8IGRpcmVjdGlvbi55ID09PSAtMSxcbiAgICAgICAgICBbRGlyZWN0aW9uLkZvcndhcmRdOlxuICAgICAgICAgICAgcHJldmlvdXNJbnRlbnQueVtEaXJlY3Rpb24uRm9yd2FyZF0gfHwgZGlyZWN0aW9uLnkgPT09IDEsXG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgIH0sXG4gICAgW2Rpc2FibGVkLCBkZWx0YSwgcHJldmlvdXNEZWx0YV1cbiAgKTtcbn1cbiIsImltcG9ydCB7dXNlTGF6eU1lbW99IGZyb20gJ0BkbmQta2l0L3V0aWxpdGllcyc7XG5cbmltcG9ydCB0eXBlIHtEcmFnZ2FibGVOb2RlLCBEcmFnZ2FibGVOb2Rlc30gZnJvbSAnLi4vLi4vc3RvcmUnO1xuaW1wb3J0IHR5cGUge1VuaXF1ZUlkZW50aWZpZXJ9IGZyb20gJy4uLy4uL3R5cGVzJztcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZUNhY2hlZE5vZGUoXG4gIGRyYWdnYWJsZU5vZGVzOiBEcmFnZ2FibGVOb2RlcyxcbiAgaWQ6IFVuaXF1ZUlkZW50aWZpZXIgfCBudWxsXG4pOiBEcmFnZ2FibGVOb2RlWydub2RlJ11bJ2N1cnJlbnQnXSB7XG4gIGNvbnN0IGRyYWdnYWJsZU5vZGUgPSBpZCAhPSBudWxsID8gZHJhZ2dhYmxlTm9kZXMuZ2V0KGlkKSA6IHVuZGVmaW5lZDtcbiAgY29uc3Qgbm9kZSA9IGRyYWdnYWJsZU5vZGUgPyBkcmFnZ2FibGVOb2RlLm5vZGUuY3VycmVudCA6IG51bGw7XG5cbiAgcmV0dXJuIHVzZUxhenlNZW1vKFxuICAgIChjYWNoZWROb2RlKSA9PiB7XG4gICAgICBpZiAoaWQgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgLy8gSW4gc29tZSBjYXNlcywgdGhlIGRyYWdnYWJsZSBub2RlIGNhbiB1bm1vdW50IHdoaWxlIGRyYWdnaW5nXG4gICAgICAvLyBUaGlzIGlzIHRoZSBjYXNlIGZvciB2aXJ0dWFsaXplZCBsaXN0cy4gSW4gdGhvc2Ugc2l0dWF0aW9ucyxcbiAgICAgIC8vIHdlIGZhbGwgYmFjayB0byB0aGUgbGFzdCBrbm93biB2YWx1ZSBmb3IgdGhhdCBub2RlLlxuICAgICAgcmV0dXJuIG5vZGUgPz8gY2FjaGVkTm9kZSA/PyBudWxsO1xuICAgIH0sXG4gICAgW25vZGUsIGlkXVxuICApO1xufVxuIiwiaW1wb3J0IHt1c2VNZW1vfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB0eXBlIHtTZW5zb3JBY3RpdmF0b3JGdW5jdGlvbiwgU2Vuc29yRGVzY3JpcHRvcn0gZnJvbSAnLi4vLi4vc2Vuc29ycyc7XG5pbXBvcnQgdHlwZSB7XG4gIFN5bnRoZXRpY0xpc3RlbmVyLFxuICBTeW50aGV0aWNMaXN0ZW5lcnMsXG59IGZyb20gJy4vdXNlU3ludGhldGljTGlzdGVuZXJzJztcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZUNvbWJpbmVBY3RpdmF0b3JzKFxuICBzZW5zb3JzOiBTZW5zb3JEZXNjcmlwdG9yPGFueT5bXSxcbiAgZ2V0U3ludGhldGljSGFuZGxlcjogKFxuICAgIGhhbmRsZXI6IFNlbnNvckFjdGl2YXRvckZ1bmN0aW9uPGFueT4sXG4gICAgc2Vuc29yOiBTZW5zb3JEZXNjcmlwdG9yPGFueT5cbiAgKSA9PiBTeW50aGV0aWNMaXN0ZW5lclsnaGFuZGxlciddXG4pOiBTeW50aGV0aWNMaXN0ZW5lcnMge1xuICByZXR1cm4gdXNlTWVtbyhcbiAgICAoKSA9PlxuICAgICAgc2Vuc29ycy5yZWR1Y2U8U3ludGhldGljTGlzdGVuZXJzPigoYWNjdW11bGF0b3IsIHNlbnNvcikgPT4ge1xuICAgICAgICBjb25zdCB7c2Vuc29yOiBTZW5zb3J9ID0gc2Vuc29yO1xuXG4gICAgICAgIGNvbnN0IHNlbnNvckFjdGl2YXRvcnMgPSBTZW5zb3IuYWN0aXZhdG9ycy5tYXAoKGFjdGl2YXRvcikgPT4gKHtcbiAgICAgICAgICBldmVudE5hbWU6IGFjdGl2YXRvci5ldmVudE5hbWUsXG4gICAgICAgICAgaGFuZGxlcjogZ2V0U3ludGhldGljSGFuZGxlcihhY3RpdmF0b3IuaGFuZGxlciwgc2Vuc29yKSxcbiAgICAgICAgfSkpO1xuXG4gICAgICAgIHJldHVybiBbLi4uYWNjdW11bGF0b3IsIC4uLnNlbnNvckFjdGl2YXRvcnNdO1xuICAgICAgfSwgW10pLFxuICAgIFtzZW5zb3JzLCBnZXRTeW50aGV0aWNIYW5kbGVyXVxuICApO1xufVxuIiwiaW1wb3J0IHt1c2VDYWxsYmFjaywgdXNlRWZmZWN0LCB1c2VSZWYsIHVzZVN0YXRlfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQge3VzZUxhdGVzdFZhbHVlLCB1c2VMYXp5TWVtb30gZnJvbSAnQGRuZC1raXQvdXRpbGl0aWVzJztcblxuaW1wb3J0IHtSZWN0fSBmcm9tICcuLi8uLi91dGlsaXRpZXMvcmVjdCc7XG5pbXBvcnQgdHlwZSB7RHJvcHBhYmxlQ29udGFpbmVyLCBSZWN0TWFwfSBmcm9tICcuLi8uLi9zdG9yZS90eXBlcyc7XG5pbXBvcnQgdHlwZSB7Q2xpZW50UmVjdCwgVW5pcXVlSWRlbnRpZmllcn0gZnJvbSAnLi4vLi4vdHlwZXMnO1xuXG5pbnRlcmZhY2UgQXJndW1lbnRzIHtcbiAgZHJhZ2dpbmc6IGJvb2xlYW47XG4gIGRlcGVuZGVuY2llczogYW55W107XG4gIGNvbmZpZzogRHJvcHBhYmxlTWVhc3VyaW5nO1xufVxuXG5leHBvcnQgZW51bSBNZWFzdXJpbmdTdHJhdGVneSB7XG4gIEFsd2F5cyxcbiAgQmVmb3JlRHJhZ2dpbmcsXG4gIFdoaWxlRHJhZ2dpbmcsXG59XG5cbmV4cG9ydCBlbnVtIE1lYXN1cmluZ0ZyZXF1ZW5jeSB7XG4gIE9wdGltaXplZCA9ICdvcHRpbWl6ZWQnLFxufVxuXG50eXBlIE1lYXN1cmluZ0Z1bmN0aW9uID0gKGVsZW1lbnQ6IEhUTUxFbGVtZW50KSA9PiBDbGllbnRSZWN0O1xuXG5leHBvcnQgaW50ZXJmYWNlIERyb3BwYWJsZU1lYXN1cmluZyB7XG4gIG1lYXN1cmU6IE1lYXN1cmluZ0Z1bmN0aW9uO1xuICBzdHJhdGVneTogTWVhc3VyaW5nU3RyYXRlZ3k7XG4gIGZyZXF1ZW5jeTogTWVhc3VyaW5nRnJlcXVlbmN5IHwgbnVtYmVyO1xufVxuXG5jb25zdCBkZWZhdWx0VmFsdWU6IFJlY3RNYXAgPSBuZXcgTWFwKCk7XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VEcm9wcGFibGVNZWFzdXJpbmcoXG4gIGNvbnRhaW5lcnM6IERyb3BwYWJsZUNvbnRhaW5lcltdLFxuICB7ZHJhZ2dpbmcsIGRlcGVuZGVuY2llcywgY29uZmlnfTogQXJndW1lbnRzXG4pIHtcbiAgY29uc3QgW3F1ZXVlLCBzZXRRdWV1ZV0gPSB1c2VTdGF0ZTxVbmlxdWVJZGVudGlmaWVyW10gfCBudWxsPihudWxsKTtcbiAgY29uc3Qge2ZyZXF1ZW5jeSwgbWVhc3VyZSwgc3RyYXRlZ3l9ID0gY29uZmlnO1xuICBjb25zdCBjb250YWluZXJzUmVmID0gdXNlUmVmKGNvbnRhaW5lcnMpO1xuICBjb25zdCBkaXNhYmxlZCA9IGlzRGlzYWJsZWQoKTtcbiAgY29uc3QgZGlzYWJsZWRSZWYgPSB1c2VMYXRlc3RWYWx1ZShkaXNhYmxlZCk7XG4gIGNvbnN0IG1lYXN1cmVEcm9wcGFibGVDb250YWluZXJzID0gdXNlQ2FsbGJhY2soXG4gICAgKGlkczogVW5pcXVlSWRlbnRpZmllcltdID0gW10pID0+IHtcbiAgICAgIGlmIChkaXNhYmxlZFJlZi5jdXJyZW50KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc2V0UXVldWUoKHZhbHVlKSA9PiB7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBpZHM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmFsdWUuY29uY2F0KGlkcy5maWx0ZXIoKGlkKSA9PiAhdmFsdWUuaW5jbHVkZXMoaWQpKSk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIFtkaXNhYmxlZFJlZl1cbiAgKTtcbiAgY29uc3QgdGltZW91dElkID0gdXNlUmVmPE5vZGVKUy5UaW1lb3V0IHwgbnVsbD4obnVsbCk7XG4gIGNvbnN0IGRyb3BwYWJsZVJlY3RzID0gdXNlTGF6eU1lbW88UmVjdE1hcD4oXG4gICAgKHByZXZpb3VzVmFsdWUpID0+IHtcbiAgICAgIGlmIChkaXNhYmxlZCAmJiAhZHJhZ2dpbmcpIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKFxuICAgICAgICAhcHJldmlvdXNWYWx1ZSB8fFxuICAgICAgICBwcmV2aW91c1ZhbHVlID09PSBkZWZhdWx0VmFsdWUgfHxcbiAgICAgICAgY29udGFpbmVyc1JlZi5jdXJyZW50ICE9PSBjb250YWluZXJzIHx8XG4gICAgICAgIHF1ZXVlICE9IG51bGxcbiAgICAgICkge1xuICAgICAgICBjb25zdCBtYXA6IFJlY3RNYXAgPSBuZXcgTWFwKCk7XG5cbiAgICAgICAgZm9yIChsZXQgY29udGFpbmVyIG9mIGNvbnRhaW5lcnMpIHtcbiAgICAgICAgICBpZiAoIWNvbnRhaW5lcikge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgcXVldWUgJiZcbiAgICAgICAgICAgIHF1ZXVlLmxlbmd0aCA+IDAgJiZcbiAgICAgICAgICAgICFxdWV1ZS5pbmNsdWRlcyhjb250YWluZXIuaWQpICYmXG4gICAgICAgICAgICBjb250YWluZXIucmVjdC5jdXJyZW50XG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICAvLyBUaGlzIGNvbnRhaW5lciBkb2VzIG5vdCBuZWVkIHRvIGJlIHJlLW1lYXN1cmVkXG4gICAgICAgICAgICBtYXAuc2V0KGNvbnRhaW5lci5pZCwgY29udGFpbmVyLnJlY3QuY3VycmVudCk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBub2RlID0gY29udGFpbmVyLm5vZGUuY3VycmVudDtcbiAgICAgICAgICBjb25zdCByZWN0ID0gbm9kZSA/IG5ldyBSZWN0KG1lYXN1cmUobm9kZSksIG5vZGUpIDogbnVsbDtcblxuICAgICAgICAgIGNvbnRhaW5lci5yZWN0LmN1cnJlbnQgPSByZWN0O1xuXG4gICAgICAgICAgaWYgKHJlY3QpIHtcbiAgICAgICAgICAgIG1hcC5zZXQoY29udGFpbmVyLmlkLCByZWN0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbWFwO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJldmlvdXNWYWx1ZTtcbiAgICB9LFxuICAgIFtjb250YWluZXJzLCBxdWV1ZSwgZHJhZ2dpbmcsIGRpc2FibGVkLCBtZWFzdXJlXVxuICApO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29udGFpbmVyc1JlZi5jdXJyZW50ID0gY29udGFpbmVycztcbiAgfSwgW2NvbnRhaW5lcnNdKTtcblxuICB1c2VFZmZlY3QoXG4gICAgKCkgPT4ge1xuICAgICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgbWVhc3VyZURyb3BwYWJsZUNvbnRhaW5lcnMoKTtcbiAgICB9LFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgICBbZHJhZ2dpbmcsIGRpc2FibGVkXVxuICApO1xuXG4gIHVzZUVmZmVjdChcbiAgICAoKSA9PiB7XG4gICAgICBpZiAocXVldWUgJiYgcXVldWUubGVuZ3RoID4gMCkge1xuICAgICAgICBzZXRRdWV1ZShudWxsKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIC8vZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICAgIFtKU09OLnN0cmluZ2lmeShxdWV1ZSldXG4gICk7XG5cbiAgdXNlRWZmZWN0KFxuICAgICgpID0+IHtcbiAgICAgIGlmIChcbiAgICAgICAgZGlzYWJsZWQgfHxcbiAgICAgICAgdHlwZW9mIGZyZXF1ZW5jeSAhPT0gJ251bWJlcicgfHxcbiAgICAgICAgdGltZW91dElkLmN1cnJlbnQgIT09IG51bGxcbiAgICAgICkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRpbWVvdXRJZC5jdXJyZW50ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIG1lYXN1cmVEcm9wcGFibGVDb250YWluZXJzKCk7XG4gICAgICAgIHRpbWVvdXRJZC5jdXJyZW50ID0gbnVsbDtcbiAgICAgIH0sIGZyZXF1ZW5jeSk7XG4gICAgfSxcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gICAgW2ZyZXF1ZW5jeSwgZGlzYWJsZWQsIG1lYXN1cmVEcm9wcGFibGVDb250YWluZXJzLCAuLi5kZXBlbmRlbmNpZXNdXG4gICk7XG5cbiAgcmV0dXJuIHtcbiAgICBkcm9wcGFibGVSZWN0cyxcbiAgICBtZWFzdXJlRHJvcHBhYmxlQ29udGFpbmVycyxcbiAgICBtZWFzdXJpbmdTY2hlZHVsZWQ6IHF1ZXVlICE9IG51bGwsXG4gIH07XG5cbiAgZnVuY3Rpb24gaXNEaXNhYmxlZCgpIHtcbiAgICBzd2l0Y2ggKHN0cmF0ZWd5KSB7XG4gICAgICBjYXNlIE1lYXN1cmluZ1N0cmF0ZWd5LkFsd2F5czpcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgY2FzZSBNZWFzdXJpbmdTdHJhdGVneS5CZWZvcmVEcmFnZ2luZzpcbiAgICAgICAgcmV0dXJuIGRyYWdnaW5nO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuICFkcmFnZ2luZztcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7dXNlTGF6eU1lbW99IGZyb20gJ0BkbmQta2l0L3V0aWxpdGllcyc7XG5cbnR5cGUgQW55RnVuY3Rpb24gPSAoLi4uYXJnczogYW55KSA9PiBhbnk7XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VJbml0aWFsVmFsdWU8XG4gIFQsXG4gIFUgZXh0ZW5kcyBBbnlGdW5jdGlvbiB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZFxuPihcbiAgdmFsdWU6IFQgfCBudWxsLFxuICBjb21wdXRlRm4/OiBVXG4pOiBVIGV4dGVuZHMgQW55RnVuY3Rpb24gPyBSZXR1cm5UeXBlPFU+IHwgbnVsbCA6IFQgfCBudWxsIHtcbiAgcmV0dXJuIHVzZUxhenlNZW1vKFxuICAgIChwcmV2aW91c1ZhbHVlKSA9PiB7XG4gICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJldmlvdXNWYWx1ZSkge1xuICAgICAgICByZXR1cm4gcHJldmlvdXNWYWx1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHR5cGVvZiBjb21wdXRlRm4gPT09ICdmdW5jdGlvbicgPyBjb21wdXRlRm4odmFsdWUpIDogdmFsdWU7XG4gICAgfSxcbiAgICBbY29tcHV0ZUZuLCB2YWx1ZV1cbiAgKTtcbn1cbiIsImltcG9ydCB0eXBlIHtDbGllbnRSZWN0fSBmcm9tICcuLi8uLi90eXBlcyc7XG5pbXBvcnQge3VzZUluaXRpYWxWYWx1ZX0gZnJvbSAnLi91c2VJbml0aWFsVmFsdWUnO1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlSW5pdGlhbFJlY3QoXG4gIG5vZGU6IEhUTUxFbGVtZW50IHwgbnVsbCxcbiAgbWVhc3VyZTogKG5vZGU6IEhUTUxFbGVtZW50KSA9PiBDbGllbnRSZWN0XG4pIHtcbiAgcmV0dXJuIHVzZUluaXRpYWxWYWx1ZShub2RlLCBtZWFzdXJlKTtcbn1cbiIsImltcG9ydCB7dXNlRWZmZWN0LCB1c2VNZW1vfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQge3VzZUV2ZW50fSBmcm9tICdAZG5kLWtpdC91dGlsaXRpZXMnO1xuXG5pbnRlcmZhY2UgQXJndW1lbnRzIHtcbiAgY2FsbGJhY2s6IE11dGF0aW9uQ2FsbGJhY2s7XG4gIGRpc2FibGVkPzogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgbmV3IE11dGF0aW9uT2JzZXJ2ZXIgaW5zdGFuY2UuXG4gKiBJZiBgTXV0YXRpb25PYnNlcnZlcmAgaXMgdW5kZWZpbmVkIGluIHRoZSBleGVjdXRpb24gZW52aXJvbm1lbnQsIHJldHVybnMgYHVuZGVmaW5lZGAuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VNdXRhdGlvbk9ic2VydmVyKHtjYWxsYmFjaywgZGlzYWJsZWR9OiBBcmd1bWVudHMpIHtcbiAgY29uc3QgaGFuZGxlTXV0YXRpb25zID0gdXNlRXZlbnQoY2FsbGJhY2spO1xuICBjb25zdCBtdXRhdGlvbk9ic2VydmVyID0gdXNlTWVtbygoKSA9PiB7XG4gICAgaWYgKFxuICAgICAgZGlzYWJsZWQgfHxcbiAgICAgIHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnIHx8XG4gICAgICB0eXBlb2Ygd2luZG93Lk11dGF0aW9uT2JzZXJ2ZXIgPT09ICd1bmRlZmluZWQnXG4gICAgKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGNvbnN0IHtNdXRhdGlvbk9ic2VydmVyfSA9IHdpbmRvdztcblxuICAgIHJldHVybiBuZXcgTXV0YXRpb25PYnNlcnZlcihoYW5kbGVNdXRhdGlvbnMpO1xuICB9LCBbaGFuZGxlTXV0YXRpb25zLCBkaXNhYmxlZF0pO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgcmV0dXJuICgpID0+IG11dGF0aW9uT2JzZXJ2ZXI/LmRpc2Nvbm5lY3QoKTtcbiAgfSwgW211dGF0aW9uT2JzZXJ2ZXJdKTtcblxuICByZXR1cm4gbXV0YXRpb25PYnNlcnZlcjtcbn1cbiIsImltcG9ydCB7dXNlRWZmZWN0LCB1c2VNZW1vfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQge3VzZUV2ZW50fSBmcm9tICdAZG5kLWtpdC91dGlsaXRpZXMnO1xuXG5pbnRlcmZhY2UgQXJndW1lbnRzIHtcbiAgY2FsbGJhY2s6IFJlc2l6ZU9ic2VydmVyQ2FsbGJhY2s7XG4gIGRpc2FibGVkPzogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgbmV3IFJlc2l6ZU9ic2VydmVyIGluc3RhbmNlIGJvdW5kIHRvIHRoZSBgb25SZXNpemVgIGNhbGxiYWNrLlxuICogSWYgYFJlc2l6ZU9ic2VydmVyYCBpcyB1bmRlZmluZWQgaW4gdGhlIGV4ZWN1dGlvbiBlbnZpcm9ubWVudCwgcmV0dXJucyBgdW5kZWZpbmVkYC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVJlc2l6ZU9ic2VydmVyKHtjYWxsYmFjaywgZGlzYWJsZWR9OiBBcmd1bWVudHMpIHtcbiAgY29uc3QgaGFuZGxlUmVzaXplID0gdXNlRXZlbnQoY2FsbGJhY2spO1xuICBjb25zdCByZXNpemVPYnNlcnZlciA9IHVzZU1lbW8oXG4gICAgKCkgPT4ge1xuICAgICAgaWYgKFxuICAgICAgICBkaXNhYmxlZCB8fFxuICAgICAgICB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyB8fFxuICAgICAgICB0eXBlb2Ygd2luZG93LlJlc2l6ZU9ic2VydmVyID09PSAndW5kZWZpbmVkJ1xuICAgICAgKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHtSZXNpemVPYnNlcnZlcn0gPSB3aW5kb3c7XG5cbiAgICAgIHJldHVybiBuZXcgUmVzaXplT2JzZXJ2ZXIoaGFuZGxlUmVzaXplKTtcbiAgICB9LFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgICBbZGlzYWJsZWRdXG4gICk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICByZXR1cm4gKCkgPT4gcmVzaXplT2JzZXJ2ZXI/LmRpc2Nvbm5lY3QoKTtcbiAgfSwgW3Jlc2l6ZU9ic2VydmVyXSk7XG5cbiAgcmV0dXJuIHJlc2l6ZU9ic2VydmVyO1xufVxuIiwiaW1wb3J0IHt1c2VTdGF0ZX0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHt1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0fSBmcm9tICdAZG5kLWtpdC91dGlsaXRpZXMnO1xuXG5pbXBvcnQgdHlwZSB7Q2xpZW50UmVjdH0gZnJvbSAnLi4vLi4vdHlwZXMnO1xuaW1wb3J0IHtnZXRDbGllbnRSZWN0LCBSZWN0fSBmcm9tICcuLi8uLi91dGlsaXRpZXMnO1xuXG5pbXBvcnQge3VzZU11dGF0aW9uT2JzZXJ2ZXJ9IGZyb20gJy4vdXNlTXV0YXRpb25PYnNlcnZlcic7XG5pbXBvcnQge3VzZVJlc2l6ZU9ic2VydmVyfSBmcm9tICcuL3VzZVJlc2l6ZU9ic2VydmVyJztcblxuZnVuY3Rpb24gZGVmYXVsdE1lYXN1cmUoZWxlbWVudDogSFRNTEVsZW1lbnQpIHtcbiAgcmV0dXJuIG5ldyBSZWN0KGdldENsaWVudFJlY3QoZWxlbWVudCksIGVsZW1lbnQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXNlUmVjdChcbiAgZWxlbWVudDogSFRNTEVsZW1lbnQgfCBudWxsLFxuICBtZWFzdXJlOiAoZWxlbWVudDogSFRNTEVsZW1lbnQpID0+IENsaWVudFJlY3QgPSBkZWZhdWx0TWVhc3VyZSxcbiAgZmFsbGJhY2tSZWN0PzogQ2xpZW50UmVjdCB8IG51bGxcbikge1xuICBjb25zdCBbcmVjdCwgc2V0UmVjdF0gPSB1c2VTdGF0ZTxDbGllbnRSZWN0IHwgbnVsbD4obnVsbCk7XG5cbiAgZnVuY3Rpb24gbWVhc3VyZVJlY3QoKSB7XG4gICAgc2V0UmVjdCgoY3VycmVudFJlY3QpOiBDbGllbnRSZWN0IHwgbnVsbCA9PiB7XG4gICAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gIFxuICAgICAgaWYgKGVsZW1lbnQuaXNDb25uZWN0ZWQgPT09IGZhbHNlKSB7XG4gICAgICAgIC8vIEZhbGwgYmFjayB0byBsYXN0IHJlY3Qgd2UgbWVhc3VyZWQgaWYgdGhlIGVsZW1lbnQgaXNcbiAgICAgICAgLy8gbm8gbG9uZ2VyIGNvbm5lY3RlZCB0byB0aGUgRE9NLlxuICAgICAgICByZXR1cm4gY3VycmVudFJlY3QgPz8gZmFsbGJhY2tSZWN0ID8/IG51bGw7XG4gICAgICB9XG4gIFxuICAgICAgY29uc3QgbmV3UmVjdCA9IG1lYXN1cmUoZWxlbWVudCk7XG4gIFxuICAgICAgaWYgKEpTT04uc3RyaW5naWZ5KGN1cnJlbnRSZWN0KSA9PT0gSlNPTi5zdHJpbmdpZnkobmV3UmVjdCkpIHtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRSZWN0O1xuICAgICAgfVxuICBcbiAgICAgIHJldHVybiBuZXdSZWN0O1xuICAgIH0pO1xuICB9XG4gIFxuICBjb25zdCBtdXRhdGlvbk9ic2VydmVyID0gdXNlTXV0YXRpb25PYnNlcnZlcih7XG4gICAgY2FsbGJhY2socmVjb3Jkcykge1xuICAgICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZm9yIChjb25zdCByZWNvcmQgb2YgcmVjb3Jkcykge1xuICAgICAgICBjb25zdCB7dHlwZSwgdGFyZ2V0fSA9IHJlY29yZDtcblxuICAgICAgICBpZiAoXG4gICAgICAgICAgdHlwZSA9PT0gJ2NoaWxkTGlzdCcgJiZcbiAgICAgICAgICB0YXJnZXQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCAmJlxuICAgICAgICAgIHRhcmdldC5jb250YWlucyhlbGVtZW50KVxuICAgICAgICApIHtcbiAgICAgICAgICBtZWFzdXJlUmVjdCgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgfSk7XG4gIGNvbnN0IHJlc2l6ZU9ic2VydmVyID0gdXNlUmVzaXplT2JzZXJ2ZXIoe2NhbGxiYWNrOiBtZWFzdXJlUmVjdH0pO1xuXG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgIG1lYXN1cmVSZWN0KCk7XG5cbiAgICBpZiAoZWxlbWVudCkge1xuICAgICAgcmVzaXplT2JzZXJ2ZXI/Lm9ic2VydmUoZWxlbWVudCk7XG4gICAgICBtdXRhdGlvbk9ic2VydmVyPy5vYnNlcnZlKGRvY3VtZW50LmJvZHksIHtcbiAgICAgICAgY2hpbGRMaXN0OiB0cnVlLFxuICAgICAgICBzdWJ0cmVlOiB0cnVlLFxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc2l6ZU9ic2VydmVyPy5kaXNjb25uZWN0KCk7XG4gICAgICBtdXRhdGlvbk9ic2VydmVyPy5kaXNjb25uZWN0KCk7XG4gICAgfVxuICB9LCBbZWxlbWVudF0pO1xuXG4gIHJldHVybiByZWN0O1xufVxuIiwiaW1wb3J0IHR5cGUge0NsaWVudFJlY3R9IGZyb20gJy4uLy4uL3R5cGVzJztcbmltcG9ydCB7Z2V0UmVjdERlbHRhfSBmcm9tICcuLi8uLi91dGlsaXRpZXMnO1xuXG5pbXBvcnQge3VzZUluaXRpYWxWYWx1ZX0gZnJvbSAnLi91c2VJbml0aWFsVmFsdWUnO1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlUmVjdERlbHRhKHJlY3Q6IENsaWVudFJlY3QgfCBudWxsKSB7XG4gIGNvbnN0IGluaXRpYWxSZWN0ID0gdXNlSW5pdGlhbFZhbHVlKHJlY3QpO1xuXG4gIHJldHVybiBnZXRSZWN0RGVsdGEocmVjdCwgaW5pdGlhbFJlY3QpO1xufVxuIiwiaW1wb3J0IHt1c2VFZmZlY3QsIHVzZVJlZn0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHt1c2VMYXp5TWVtb30gZnJvbSAnQGRuZC1raXQvdXRpbGl0aWVzJztcblxuaW1wb3J0IHtnZXRTY3JvbGxhYmxlQW5jZXN0b3JzfSBmcm9tICcuLi8uLi91dGlsaXRpZXMnO1xuXG5jb25zdCBkZWZhdWx0VmFsdWU6IEVsZW1lbnRbXSA9IFtdO1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlU2Nyb2xsYWJsZUFuY2VzdG9ycyhub2RlOiBIVE1MRWxlbWVudCB8IG51bGwpIHtcbiAgY29uc3QgcHJldmlvdXNOb2RlID0gdXNlUmVmKG5vZGUpO1xuXG4gIGNvbnN0IGFuY2VzdG9ycyA9IHVzZUxhenlNZW1vPEVsZW1lbnRbXT4oXG4gICAgKHByZXZpb3VzVmFsdWUpID0+IHtcbiAgICAgIGlmICghbm9kZSkge1xuICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoXG4gICAgICAgIHByZXZpb3VzVmFsdWUgJiZcbiAgICAgICAgcHJldmlvdXNWYWx1ZSAhPT0gZGVmYXVsdFZhbHVlICYmXG4gICAgICAgIG5vZGUgJiZcbiAgICAgICAgcHJldmlvdXNOb2RlLmN1cnJlbnQgJiZcbiAgICAgICAgbm9kZS5wYXJlbnROb2RlID09PSBwcmV2aW91c05vZGUuY3VycmVudC5wYXJlbnROb2RlXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIHByZXZpb3VzVmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBnZXRTY3JvbGxhYmxlQW5jZXN0b3JzKG5vZGUpO1xuICAgIH0sXG4gICAgW25vZGVdXG4gICk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBwcmV2aW91c05vZGUuY3VycmVudCA9IG5vZGU7XG4gIH0sIFtub2RlXSk7XG5cbiAgcmV0dXJuIGFuY2VzdG9ycztcbn1cbiIsImltcG9ydCB7dXNlU3RhdGUsIHVzZUNhbGxiYWNrLCB1c2VNZW1vLCB1c2VSZWYsIHVzZUVmZmVjdH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHthZGR9IGZyb20gJ0BkbmQta2l0L3V0aWxpdGllcyc7XG5cbmltcG9ydCB7XG4gIGRlZmF1bHRDb29yZGluYXRlcyxcbiAgZ2V0U2Nyb2xsYWJsZUVsZW1lbnQsXG4gIGdldFNjcm9sbENvb3JkaW5hdGVzLFxuICBnZXRTY3JvbGxPZmZzZXRzLFxufSBmcm9tICcuLi8uLi91dGlsaXRpZXMnO1xuaW1wb3J0IHR5cGUge0Nvb3JkaW5hdGVzfSBmcm9tICcuLi8uLi90eXBlcyc7XG5cbnR5cGUgU2Nyb2xsQ29vcmRpbmF0ZXMgPSBNYXA8SFRNTEVsZW1lbnQgfCBXaW5kb3csIENvb3JkaW5hdGVzPjtcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVNjcm9sbE9mZnNldHMoZWxlbWVudHM6IEVsZW1lbnRbXSk6IENvb3JkaW5hdGVzIHtcbiAgY29uc3QgW1xuICAgIHNjcm9sbENvb3JkaW5hdGVzLFxuICAgIHNldFNjcm9sbENvb3JkaW5hdGVzLFxuICBdID0gdXNlU3RhdGU8U2Nyb2xsQ29vcmRpbmF0ZXMgfCBudWxsPihudWxsKTtcbiAgY29uc3QgcHJldkVsZW1lbnRzID0gdXNlUmVmKGVsZW1lbnRzKTtcblxuICAvLyBUby1kbzogVGhyb3R0bGUgdGhlIGhhbmRsZVNjcm9sbCBjYWxsYmFja1xuICBjb25zdCBoYW5kbGVTY3JvbGwgPSB1c2VDYWxsYmFjaygoZXZlbnQ6IEV2ZW50KSA9PiB7XG4gICAgY29uc3Qgc2Nyb2xsaW5nRWxlbWVudCA9IGdldFNjcm9sbGFibGVFbGVtZW50KGV2ZW50LnRhcmdldCk7XG5cbiAgICBpZiAoIXNjcm9sbGluZ0VsZW1lbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzZXRTY3JvbGxDb29yZGluYXRlcygoc2Nyb2xsQ29vcmRpbmF0ZXMpID0+IHtcbiAgICAgIGlmICghc2Nyb2xsQ29vcmRpbmF0ZXMpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHNjcm9sbENvb3JkaW5hdGVzLnNldChcbiAgICAgICAgc2Nyb2xsaW5nRWxlbWVudCxcbiAgICAgICAgZ2V0U2Nyb2xsQ29vcmRpbmF0ZXMoc2Nyb2xsaW5nRWxlbWVudClcbiAgICAgICk7XG5cbiAgICAgIHJldHVybiBuZXcgTWFwKHNjcm9sbENvb3JkaW5hdGVzKTtcbiAgICB9KTtcbiAgfSwgW10pO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgcHJldmlvdXNFbGVtZW50cyA9IHByZXZFbGVtZW50cy5jdXJyZW50O1xuXG4gICAgaWYgKGVsZW1lbnRzICE9PSBwcmV2aW91c0VsZW1lbnRzKSB7XG4gICAgICBjbGVhbnVwKHByZXZpb3VzRWxlbWVudHMpO1xuXG4gICAgICBjb25zdCBlbnRyaWVzID0gZWxlbWVudHNcbiAgICAgICAgLm1hcCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHNjcm9sbGFibGVFbGVtZW50ID0gZ2V0U2Nyb2xsYWJsZUVsZW1lbnQoZWxlbWVudCk7XG5cbiAgICAgICAgICBpZiAoc2Nyb2xsYWJsZUVsZW1lbnQpIHtcbiAgICAgICAgICAgIHNjcm9sbGFibGVFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGhhbmRsZVNjcm9sbCwge1xuICAgICAgICAgICAgICBwYXNzaXZlOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgIHNjcm9sbGFibGVFbGVtZW50LFxuICAgICAgICAgICAgICBnZXRTY3JvbGxDb29yZGluYXRlcyhzY3JvbGxhYmxlRWxlbWVudCksXG4gICAgICAgICAgICBdIGFzIGNvbnN0O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9KVxuICAgICAgICAuZmlsdGVyKFxuICAgICAgICAgIChcbiAgICAgICAgICAgIGVudHJ5XG4gICAgICAgICAgKTogZW50cnkgaXMgW1xuICAgICAgICAgICAgSFRNTEVsZW1lbnQgfCAoV2luZG93ICYgdHlwZW9mIGdsb2JhbFRoaXMpLFxuICAgICAgICAgICAgQ29vcmRpbmF0ZXNcbiAgICAgICAgICBdID0+IGVudHJ5ICE9IG51bGxcbiAgICAgICAgKTtcblxuICAgICAgc2V0U2Nyb2xsQ29vcmRpbmF0ZXMoZW50cmllcy5sZW5ndGggPyBuZXcgTWFwKGVudHJpZXMpIDogbnVsbCk7XG5cbiAgICAgIHByZXZFbGVtZW50cy5jdXJyZW50ID0gZWxlbWVudHM7XG4gICAgfVxuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGNsZWFudXAoZWxlbWVudHMpO1xuICAgICAgY2xlYW51cChwcmV2aW91c0VsZW1lbnRzKTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gY2xlYW51cChlbGVtZW50czogRWxlbWVudFtdKSB7XG4gICAgICBlbGVtZW50cy5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHNjcm9sbGFibGVFbGVtZW50ID0gZ2V0U2Nyb2xsYWJsZUVsZW1lbnQoZWxlbWVudCk7XG5cbiAgICAgICAgc2Nyb2xsYWJsZUVsZW1lbnQ/LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGhhbmRsZVNjcm9sbCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFtoYW5kbGVTY3JvbGwsIGVsZW1lbnRzXSk7XG5cbiAgcmV0dXJuIHVzZU1lbW8oKCkgPT4ge1xuICAgIGlmIChlbGVtZW50cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBzY3JvbGxDb29yZGluYXRlc1xuICAgICAgICA/IEFycmF5LmZyb20oc2Nyb2xsQ29vcmRpbmF0ZXMudmFsdWVzKCkpLnJlZHVjZShcbiAgICAgICAgICAgIChhY2MsIGNvb3JkaW5hdGVzKSA9PiBhZGQoYWNjLCBjb29yZGluYXRlcyksXG4gICAgICAgICAgICBkZWZhdWx0Q29vcmRpbmF0ZXNcbiAgICAgICAgICApXG4gICAgICAgIDogZ2V0U2Nyb2xsT2Zmc2V0cyhlbGVtZW50cyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlZmF1bHRDb29yZGluYXRlcztcbiAgfSwgW2VsZW1lbnRzLCBzY3JvbGxDb29yZGluYXRlc10pO1xufVxuIiwiaW1wb3J0IHt1c2VFZmZlY3QsIHVzZVJlZn0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtDb29yZGluYXRlcywgc3VidHJhY3R9IGZyb20gJ0BkbmQta2l0L3V0aWxpdGllcyc7XG5cbmltcG9ydCB7ZGVmYXVsdENvb3JkaW5hdGVzfSBmcm9tICcuLi8uLi91dGlsaXRpZXMnO1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlU2Nyb2xsT2Zmc2V0c0RlbHRhKFxuICBzY3JvbGxPZmZzZXRzOiBDb29yZGluYXRlcyxcbiAgZGVwZW5kZW5jaWVzOiBhbnlbXSA9IFtdXG4pIHtcbiAgY29uc3QgaW5pdGlhbFNjcm9sbE9mZnNldHMgPSB1c2VSZWY8Q29vcmRpbmF0ZXMgfCBudWxsPihudWxsKTtcblxuICB1c2VFZmZlY3QoXG4gICAgKCkgPT4ge1xuICAgICAgaW5pdGlhbFNjcm9sbE9mZnNldHMuY3VycmVudCA9IG51bGw7XG4gICAgfSxcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gICAgZGVwZW5kZW5jaWVzXG4gICk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBoYXNTY3JvbGxPZmZzZXRzID0gc2Nyb2xsT2Zmc2V0cyAhPT0gZGVmYXVsdENvb3JkaW5hdGVzO1xuXG4gICAgaWYgKGhhc1Njcm9sbE9mZnNldHMgJiYgIWluaXRpYWxTY3JvbGxPZmZzZXRzLmN1cnJlbnQpIHtcbiAgICAgIGluaXRpYWxTY3JvbGxPZmZzZXRzLmN1cnJlbnQgPSBzY3JvbGxPZmZzZXRzO1xuICAgIH1cblxuICAgIGlmICghaGFzU2Nyb2xsT2Zmc2V0cyAmJiBpbml0aWFsU2Nyb2xsT2Zmc2V0cy5jdXJyZW50KSB7XG4gICAgICBpbml0aWFsU2Nyb2xsT2Zmc2V0cy5jdXJyZW50ID0gbnVsbDtcbiAgICB9XG4gIH0sIFtzY3JvbGxPZmZzZXRzXSk7XG5cbiAgcmV0dXJuIGluaXRpYWxTY3JvbGxPZmZzZXRzLmN1cnJlbnRcbiAgICA/IHN1YnRyYWN0KHNjcm9sbE9mZnNldHMsIGluaXRpYWxTY3JvbGxPZmZzZXRzLmN1cnJlbnQpXG4gICAgOiBkZWZhdWx0Q29vcmRpbmF0ZXM7XG59XG4iLCJpbXBvcnQge3VzZUVmZmVjdH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtjYW5Vc2VET019IGZyb20gJ0BkbmQta2l0L3V0aWxpdGllcyc7XG5cbmltcG9ydCB0eXBlIHtTZW5zb3JEZXNjcmlwdG9yfSBmcm9tICcuLi8uLi9zZW5zb3JzJztcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVNlbnNvclNldHVwKHNlbnNvcnM6IFNlbnNvckRlc2NyaXB0b3I8YW55PltdKSB7XG4gIHVzZUVmZmVjdChcbiAgICAoKSA9PiB7XG4gICAgICBpZiAoIWNhblVzZURPTSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHRlYXJkb3duRm5zID0gc2Vuc29ycy5tYXAoKHtzZW5zb3J9KSA9PiBzZW5zb3Iuc2V0dXA/LigpKTtcblxuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgZm9yIChjb25zdCB0ZWFyZG93biBvZiB0ZWFyZG93bkZucykge1xuICAgICAgICAgIHRlYXJkb3duPy4oKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9LFxuICAgIC8vIFRPLURPOiBTZW5zb3JzIGxlbmd0aCBjb3VsZCB0aGVvcmV0aWNhbGx5IGNoYW5nZSB3aGljaCB3b3VsZCBub3QgYmUgYSB2YWxpZCBkZXBlbmRlbmN5XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICAgIHNlbnNvcnMubWFwKCh7c2Vuc29yfSkgPT4gc2Vuc29yKVxuICApO1xufVxuIiwiaW1wb3J0IHt1c2VNZW1vfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB0eXBlIHtTeW50aGV0aWNFdmVudE5hbWUsIFVuaXF1ZUlkZW50aWZpZXJ9IGZyb20gJy4uLy4uL3R5cGVzJztcblxuZXhwb3J0IHR5cGUgU3ludGhldGljTGlzdGVuZXIgPSB7XG4gIGV2ZW50TmFtZTogU3ludGhldGljRXZlbnROYW1lO1xuICBoYW5kbGVyOiAoZXZlbnQ6IFJlYWN0LlN5bnRoZXRpY0V2ZW50LCBpZDogVW5pcXVlSWRlbnRpZmllcikgPT4gdm9pZDtcbn07XG5cbmV4cG9ydCB0eXBlIFN5bnRoZXRpY0xpc3RlbmVycyA9IFN5bnRoZXRpY0xpc3RlbmVyW107XG5cbmV4cG9ydCB0eXBlIFN5bnRoZXRpY0xpc3RlbmVyTWFwID0gUmVjb3JkPHN0cmluZywgRnVuY3Rpb24+O1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlU3ludGhldGljTGlzdGVuZXJzKFxuICBsaXN0ZW5lcnM6IFN5bnRoZXRpY0xpc3RlbmVycyxcbiAgaWQ6IFVuaXF1ZUlkZW50aWZpZXJcbik6IFN5bnRoZXRpY0xpc3RlbmVyTWFwIHtcbiAgcmV0dXJuIHVzZU1lbW8oKCkgPT4ge1xuICAgIHJldHVybiBsaXN0ZW5lcnMucmVkdWNlPFN5bnRoZXRpY0xpc3RlbmVyTWFwPihcbiAgICAgIChhY2MsIHtldmVudE5hbWUsIGhhbmRsZXJ9KSA9PiB7XG4gICAgICAgIGFjY1tldmVudE5hbWVdID0gKGV2ZW50OiBSZWFjdC5TeW50aGV0aWNFdmVudCkgPT4ge1xuICAgICAgICAgIGhhbmRsZXIoZXZlbnQsIGlkKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgfSxcbiAgICAgIHt9IGFzIFN5bnRoZXRpY0xpc3RlbmVyTWFwXG4gICAgKTtcbiAgfSwgW2xpc3RlbmVycywgaWRdKTtcbn1cbiIsImltcG9ydCB7dXNlTWVtb30gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQge2dldFdpbmRvd0NsaWVudFJlY3R9IGZyb20gJy4uLy4uL3V0aWxpdGllcy9yZWN0JztcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVdpbmRvd1JlY3QoZWxlbWVudDogdHlwZW9mIHdpbmRvdyB8IG51bGwpIHtcbiAgcmV0dXJuIHVzZU1lbW8oKCkgPT4gKGVsZW1lbnQgPyBnZXRXaW5kb3dDbGllbnRSZWN0KGVsZW1lbnQpIDogbnVsbCksIFtcbiAgICBlbGVtZW50LFxuICBdKTtcbn1cbiIsImltcG9ydCB7dXNlU3RhdGV9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7Z2V0V2luZG93LCB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0fSBmcm9tICdAZG5kLWtpdC91dGlsaXRpZXMnO1xuXG5pbXBvcnQgdHlwZSB7Q2xpZW50UmVjdH0gZnJvbSAnLi4vLi4vdHlwZXMnO1xuaW1wb3J0IHtSZWN0LCBnZXRDbGllbnRSZWN0fSBmcm9tICcuLi8uLi91dGlsaXRpZXMvcmVjdCc7XG5pbXBvcnQge2lzRG9jdW1lbnRTY3JvbGxpbmdFbGVtZW50fSBmcm9tICcuLi8uLi91dGlsaXRpZXMnO1xuXG5pbXBvcnQge3VzZVJlc2l6ZU9ic2VydmVyfSBmcm9tICcuL3VzZVJlc2l6ZU9ic2VydmVyJztcbmltcG9ydCB7dXNlV2luZG93UmVjdH0gZnJvbSAnLi91c2VXaW5kb3dSZWN0JztcblxuY29uc3QgZGVmYXVsdFZhbHVlOiBSZWN0W10gPSBbXTtcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVJlY3RzKFxuICBlbGVtZW50czogRWxlbWVudFtdLFxuICBtZWFzdXJlOiAoZWxlbWVudDogRWxlbWVudCkgPT4gQ2xpZW50UmVjdCA9IGdldENsaWVudFJlY3Rcbik6IENsaWVudFJlY3RbXSB7XG4gIGNvbnN0IFtmaXJzdEVsZW1lbnRdID0gZWxlbWVudHM7XG4gIGNvbnN0IHdpbmRvd1JlY3QgPSB1c2VXaW5kb3dSZWN0KFxuICAgIGZpcnN0RWxlbWVudCA/IGdldFdpbmRvdyhmaXJzdEVsZW1lbnQpIDogbnVsbFxuICApO1xuICBjb25zdCBbcmVjdHMsIHNldFJlY3RzXSA9IHVzZVN0YXRlPENsaWVudFJlY3RbXT4oZGVmYXVsdFZhbHVlKTtcblxuICBmdW5jdGlvbiBtZWFzdXJlUmVjdHMoKSB7XG4gICAgc2V0UmVjdHMoKCkgPT4ge1xuICAgICAgaWYgKCFlbGVtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGVsZW1lbnRzLm1hcCgoZWxlbWVudCkgPT5cbiAgICAgICAgaXNEb2N1bWVudFNjcm9sbGluZ0VsZW1lbnQoZWxlbWVudClcbiAgICAgICAgICA/ICh3aW5kb3dSZWN0IGFzIENsaWVudFJlY3QpXG4gICAgICAgICAgOiBuZXcgUmVjdChtZWFzdXJlKGVsZW1lbnQpLCBlbGVtZW50KVxuICAgICAgKTtcbiAgICB9KTtcbiAgfVxuXG4gIGNvbnN0IHJlc2l6ZU9ic2VydmVyID0gdXNlUmVzaXplT2JzZXJ2ZXIoe2NhbGxiYWNrOiBtZWFzdXJlUmVjdHN9KTtcblxuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICByZXNpemVPYnNlcnZlcj8uZGlzY29ubmVjdCgpO1xuICAgIG1lYXN1cmVSZWN0cygpO1xuICAgIGVsZW1lbnRzLmZvckVhY2goKGVsZW1lbnQpID0+IHJlc2l6ZU9ic2VydmVyPy5vYnNlcnZlKGVsZW1lbnQpKTtcbiAgfSwgW2VsZW1lbnRzXSk7XG5cbiAgcmV0dXJuIHJlY3RzO1xufVxuIiwiaW1wb3J0IHtpc0hUTUxFbGVtZW50fSBmcm9tICdAZG5kLWtpdC91dGlsaXRpZXMnO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TWVhc3VyYWJsZU5vZGUoXG4gIG5vZGU6IEhUTUxFbGVtZW50IHwgdW5kZWZpbmVkIHwgbnVsbFxuKTogSFRNTEVsZW1lbnQgfCBudWxsIHtcbiAgaWYgKCFub2RlKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpZiAobm9kZS5jaGlsZHJlbi5sZW5ndGggPiAxKSB7XG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cbiAgY29uc3QgZmlyc3RDaGlsZCA9IG5vZGUuY2hpbGRyZW5bMF07XG5cbiAgcmV0dXJuIGlzSFRNTEVsZW1lbnQoZmlyc3RDaGlsZCkgPyBmaXJzdENoaWxkIDogbm9kZTtcbn1cbiIsImltcG9ydCB7dXNlTWVtbywgdXNlQ2FsbGJhY2ssIHVzZVN0YXRlfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQge2lzSFRNTEVsZW1lbnQsIHVzZU5vZGVSZWZ9IGZyb20gJ0BkbmQta2l0L3V0aWxpdGllcyc7XG5cbmltcG9ydCB7dXNlUmVzaXplT2JzZXJ2ZXJ9IGZyb20gJy4vdXNlUmVzaXplT2JzZXJ2ZXInO1xuaW1wb3J0IHtnZXRNZWFzdXJhYmxlTm9kZX0gZnJvbSAnLi4vLi4vdXRpbGl0aWVzL25vZGVzJztcbmltcG9ydCB0eXBlIHtQdWJsaWNDb250ZXh0RGVzY3JpcHRvcn0gZnJvbSAnLi4vLi4vc3RvcmUnO1xuaW1wb3J0IHR5cGUge0NsaWVudFJlY3R9IGZyb20gJy4uLy4uL3R5cGVzJztcblxuaW50ZXJmYWNlIEFyZ3VtZW50cyB7XG4gIG1lYXN1cmUoZWxlbWVudDogSFRNTEVsZW1lbnQpOiBDbGllbnRSZWN0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXNlRHJhZ092ZXJsYXlNZWFzdXJpbmcoe1xuICBtZWFzdXJlLFxufTogQXJndW1lbnRzKTogUHVibGljQ29udGV4dERlc2NyaXB0b3JbJ2RyYWdPdmVybGF5J10ge1xuICBjb25zdCBbcmVjdCwgc2V0UmVjdF0gPSB1c2VTdGF0ZTxDbGllbnRSZWN0IHwgbnVsbD4obnVsbCk7XG4gIGNvbnN0IGhhbmRsZVJlc2l6ZSA9IHVzZUNhbGxiYWNrKFxuICAgIChlbnRyaWVzOiBSZXNpemVPYnNlcnZlckVudHJ5W10pID0+IHtcbiAgICAgIGZvciAoY29uc3Qge3RhcmdldH0gb2YgZW50cmllcykge1xuICAgICAgICBpZiAoaXNIVE1MRWxlbWVudCh0YXJnZXQpKSB7XG4gICAgICAgICAgc2V0UmVjdCgocmVjdCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbmV3UmVjdCA9IG1lYXN1cmUodGFyZ2V0KTtcblxuICAgICAgICAgICAgcmV0dXJuIHJlY3RcbiAgICAgICAgICAgICAgPyB7Li4ucmVjdCwgd2lkdGg6IG5ld1JlY3Qud2lkdGgsIGhlaWdodDogbmV3UmVjdC5oZWlnaHR9XG4gICAgICAgICAgICAgIDogbmV3UmVjdDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgW21lYXN1cmVdXG4gICk7XG4gIGNvbnN0IHJlc2l6ZU9ic2VydmVyID0gdXNlUmVzaXplT2JzZXJ2ZXIoe2NhbGxiYWNrOiBoYW5kbGVSZXNpemV9KTtcbiAgY29uc3QgaGFuZGxlTm9kZUNoYW5nZSA9IHVzZUNhbGxiYWNrKFxuICAgIChlbGVtZW50KSA9PiB7XG4gICAgICBjb25zdCBub2RlID0gZ2V0TWVhc3VyYWJsZU5vZGUoZWxlbWVudCk7XG5cbiAgICAgIHJlc2l6ZU9ic2VydmVyPy5kaXNjb25uZWN0KCk7XG5cbiAgICAgIGlmIChub2RlKSB7XG4gICAgICAgIHJlc2l6ZU9ic2VydmVyPy5vYnNlcnZlKG5vZGUpO1xuICAgICAgfVxuXG4gICAgICBzZXRSZWN0KG5vZGUgPyBtZWFzdXJlKG5vZGUpIDogbnVsbCk7XG4gICAgfSxcbiAgICBbbWVhc3VyZSwgcmVzaXplT2JzZXJ2ZXJdXG4gICk7XG4gIGNvbnN0IFtub2RlUmVmLCBzZXRSZWZdID0gdXNlTm9kZVJlZihoYW5kbGVOb2RlQ2hhbmdlKTtcblxuICByZXR1cm4gdXNlTWVtbyhcbiAgICAoKSA9PiAoe1xuICAgICAgbm9kZVJlZixcbiAgICAgIHJlY3QsXG4gICAgICBzZXRSZWYsXG4gICAgfSksXG4gICAgW3JlY3QsIG5vZGVSZWYsIHNldFJlZl1cbiAgKTtcbn1cbiIsImltcG9ydCB0eXBlIHtEZWVwUmVxdWlyZWR9IGZyb20gJ0BkbmQta2l0L3V0aWxpdGllcyc7XG5cbmltcG9ydCB0eXBlIHtEYXRhUmVmfSBmcm9tICcuLi8uLi9zdG9yZS90eXBlcyc7XG5pbXBvcnQge0tleWJvYXJkU2Vuc29yLCBQb2ludGVyU2Vuc29yfSBmcm9tICcuLi8uLi9zZW5zb3JzJztcbmltcG9ydCB7TWVhc3VyaW5nU3RyYXRlZ3ksIE1lYXN1cmluZ0ZyZXF1ZW5jeX0gZnJvbSAnLi4vLi4vaG9va3MvdXRpbGl0aWVzJztcbmltcG9ydCB7XG4gIGdldENsaWVudFJlY3QsXG4gIGdldFRyYW5zZm9ybUFnbm9zdGljQ2xpZW50UmVjdCxcbn0gZnJvbSAnLi4vLi4vdXRpbGl0aWVzL3JlY3QnO1xuXG5pbXBvcnQgdHlwZSB7TWVhc3VyaW5nQ29uZmlndXJhdGlvbn0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCBjb25zdCBkZWZhdWx0U2Vuc29ycyA9IFtcbiAge3NlbnNvcjogUG9pbnRlclNlbnNvciwgb3B0aW9uczoge319LFxuICB7c2Vuc29yOiBLZXlib2FyZFNlbnNvciwgb3B0aW9uczoge319LFxuXTtcblxuZXhwb3J0IGNvbnN0IGRlZmF1bHREYXRhOiBEYXRhUmVmID0ge2N1cnJlbnQ6IHt9fTtcblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRNZWFzdXJpbmdDb25maWd1cmF0aW9uOiBEZWVwUmVxdWlyZWQ8TWVhc3VyaW5nQ29uZmlndXJhdGlvbj4gPSB7XG4gIGRyYWdnYWJsZToge1xuICAgIG1lYXN1cmU6IGdldFRyYW5zZm9ybUFnbm9zdGljQ2xpZW50UmVjdCxcbiAgfSxcbiAgZHJvcHBhYmxlOiB7XG4gICAgbWVhc3VyZTogZ2V0VHJhbnNmb3JtQWdub3N0aWNDbGllbnRSZWN0LFxuICAgIHN0cmF0ZWd5OiBNZWFzdXJpbmdTdHJhdGVneS5XaGlsZURyYWdnaW5nLFxuICAgIGZyZXF1ZW5jeTogTWVhc3VyaW5nRnJlcXVlbmN5Lk9wdGltaXplZCxcbiAgfSxcbiAgZHJhZ092ZXJsYXk6IHtcbiAgICBtZWFzdXJlOiBnZXRDbGllbnRSZWN0LFxuICB9LFxufTtcbiIsImltcG9ydCB0eXBlIHtVbmlxdWVJZGVudGlmaWVyfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgdHlwZSB7RHJvcHBhYmxlQ29udGFpbmVyfSBmcm9tICcuL3R5cGVzJztcblxudHlwZSBJZGVudGlmaWVyID0gVW5pcXVlSWRlbnRpZmllciB8IG51bGwgfCB1bmRlZmluZWQ7XG5cbmV4cG9ydCBjbGFzcyBEcm9wcGFibGVDb250YWluZXJzTWFwIGV4dGVuZHMgTWFwPFxuICBVbmlxdWVJZGVudGlmaWVyLFxuICBEcm9wcGFibGVDb250YWluZXJcbj4ge1xuICBnZXQoaWQ6IElkZW50aWZpZXIpIHtcbiAgICByZXR1cm4gaWQgIT0gbnVsbCA/IHN1cGVyLmdldChpZCkgPz8gdW5kZWZpbmVkIDogdW5kZWZpbmVkO1xuICB9XG5cbiAgdG9BcnJheSgpOiBEcm9wcGFibGVDb250YWluZXJbXSB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy52YWx1ZXMoKSk7XG4gIH1cblxuICBnZXRFbmFibGVkKCk6IERyb3BwYWJsZUNvbnRhaW5lcltdIHtcbiAgICByZXR1cm4gdGhpcy50b0FycmF5KCkuZmlsdGVyKCh7ZGlzYWJsZWR9KSA9PiAhZGlzYWJsZWQpO1xuICB9XG5cbiAgZ2V0Tm9kZUZvcihpZDogSWRlbnRpZmllcikge1xuICAgIHJldHVybiB0aGlzLmdldChpZCk/Lm5vZGUuY3VycmVudCA/PyB1bmRlZmluZWQ7XG4gIH1cbn1cbiIsImltcG9ydCB7Y3JlYXRlQ29udGV4dH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQge25vb3B9IGZyb20gJy4uL3V0aWxpdGllcy9vdGhlcic7XG5pbXBvcnQge2RlZmF1bHRNZWFzdXJpbmdDb25maWd1cmF0aW9ufSBmcm9tICcuLi9jb21wb25lbnRzL0RuZENvbnRleHQvZGVmYXVsdHMnO1xuaW1wb3J0IHtEcm9wcGFibGVDb250YWluZXJzTWFwfSBmcm9tICcuL2NvbnN0cnVjdG9ycyc7XG5pbXBvcnQgdHlwZSB7SW50ZXJuYWxDb250ZXh0RGVzY3JpcHRvciwgUHVibGljQ29udGV4dERlc2NyaXB0b3J9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgY29uc3QgZGVmYXVsdFB1YmxpY0NvbnRleHQ6IFB1YmxpY0NvbnRleHREZXNjcmlwdG9yID0ge1xuICBhY3RpdmF0b3JFdmVudDogbnVsbCxcbiAgYWN0aXZlOiBudWxsLFxuICBhY3RpdmVOb2RlOiBudWxsLFxuICBhY3RpdmVOb2RlUmVjdDogbnVsbCxcbiAgY29sbGlzaW9uczogbnVsbCxcbiAgY29udGFpbmVyTm9kZVJlY3Q6IG51bGwsXG4gIGRyYWdnYWJsZU5vZGVzOiBuZXcgTWFwKCksXG4gIGRyb3BwYWJsZVJlY3RzOiBuZXcgTWFwKCksXG4gIGRyb3BwYWJsZUNvbnRhaW5lcnM6IG5ldyBEcm9wcGFibGVDb250YWluZXJzTWFwKCksXG4gIG92ZXI6IG51bGwsXG4gIGRyYWdPdmVybGF5OiB7XG4gICAgbm9kZVJlZjoge1xuICAgICAgY3VycmVudDogbnVsbCxcbiAgICB9LFxuICAgIHJlY3Q6IG51bGwsXG4gICAgc2V0UmVmOiBub29wLFxuICB9LFxuICBzY3JvbGxhYmxlQW5jZXN0b3JzOiBbXSxcbiAgc2Nyb2xsYWJsZUFuY2VzdG9yUmVjdHM6IFtdLFxuICBtZWFzdXJpbmdDb25maWd1cmF0aW9uOiBkZWZhdWx0TWVhc3VyaW5nQ29uZmlndXJhdGlvbixcbiAgbWVhc3VyZURyb3BwYWJsZUNvbnRhaW5lcnM6IG5vb3AsXG4gIHdpbmRvd1JlY3Q6IG51bGwsXG4gIG1lYXN1cmluZ1NjaGVkdWxlZDogZmFsc2UsXG59O1xuXG5leHBvcnQgY29uc3QgZGVmYXVsdEludGVybmFsQ29udGV4dDogSW50ZXJuYWxDb250ZXh0RGVzY3JpcHRvciA9IHtcbiAgYWN0aXZhdG9yRXZlbnQ6IG51bGwsXG4gIGFjdGl2YXRvcnM6IFtdLFxuICBhY3RpdmU6IG51bGwsXG4gIGFjdGl2ZU5vZGVSZWN0OiBudWxsLFxuICBhcmlhRGVzY3JpYmVkQnlJZDoge1xuICAgIGRyYWdnYWJsZTogJycsXG4gIH0sXG4gIGRpc3BhdGNoOiBub29wLFxuICBkcmFnZ2FibGVOb2RlczogbmV3IE1hcCgpLFxuICBvdmVyOiBudWxsLFxuICBtZWFzdXJlRHJvcHBhYmxlQ29udGFpbmVyczogbm9vcCxcbn07XG5cbmV4cG9ydCBjb25zdCBJbnRlcm5hbENvbnRleHQgPSBjcmVhdGVDb250ZXh0PEludGVybmFsQ29udGV4dERlc2NyaXB0b3I+KFxuICBkZWZhdWx0SW50ZXJuYWxDb250ZXh0XG4pO1xuXG5leHBvcnQgY29uc3QgUHVibGljQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQ8UHVibGljQ29udGV4dERlc2NyaXB0b3I+KFxuICBkZWZhdWx0UHVibGljQ29udGV4dFxuKTtcbiIsImltcG9ydCB7QWN0aW9uLCBBY3Rpb25zfSBmcm9tICcuL2FjdGlvbnMnO1xuaW1wb3J0IHtEcm9wcGFibGVDb250YWluZXJzTWFwfSBmcm9tICcuL2NvbnN0cnVjdG9ycyc7XG5pbXBvcnQgdHlwZSB7U3RhdGV9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0SW5pdGlhbFN0YXRlKCk6IFN0YXRlIHtcbiAgcmV0dXJuIHtcbiAgICBkcmFnZ2FibGU6IHtcbiAgICAgIGFjdGl2ZTogbnVsbCxcbiAgICAgIGluaXRpYWxDb29yZGluYXRlczoge3g6IDAsIHk6IDB9LFxuICAgICAgbm9kZXM6IG5ldyBNYXAoKSxcbiAgICAgIHRyYW5zbGF0ZToge3g6IDAsIHk6IDB9LFxuICAgIH0sXG4gICAgZHJvcHBhYmxlOiB7XG4gICAgICBjb250YWluZXJzOiBuZXcgRHJvcHBhYmxlQ29udGFpbmVyc01hcCgpLFxuICAgIH0sXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWR1Y2VyKHN0YXRlOiBTdGF0ZSwgYWN0aW9uOiBBY3Rpb25zKTogU3RhdGUge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSBBY3Rpb24uRHJhZ1N0YXJ0OlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIGRyYWdnYWJsZToge1xuICAgICAgICAgIC4uLnN0YXRlLmRyYWdnYWJsZSxcbiAgICAgICAgICBpbml0aWFsQ29vcmRpbmF0ZXM6IGFjdGlvbi5pbml0aWFsQ29vcmRpbmF0ZXMsXG4gICAgICAgICAgYWN0aXZlOiBhY3Rpb24uYWN0aXZlLFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICBjYXNlIEFjdGlvbi5EcmFnTW92ZTpcbiAgICAgIGlmIChzdGF0ZS5kcmFnZ2FibGUuYWN0aXZlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgZHJhZ2dhYmxlOiB7XG4gICAgICAgICAgLi4uc3RhdGUuZHJhZ2dhYmxlLFxuICAgICAgICAgIHRyYW5zbGF0ZToge1xuICAgICAgICAgICAgeDogYWN0aW9uLmNvb3JkaW5hdGVzLnggLSBzdGF0ZS5kcmFnZ2FibGUuaW5pdGlhbENvb3JkaW5hdGVzLngsXG4gICAgICAgICAgICB5OiBhY3Rpb24uY29vcmRpbmF0ZXMueSAtIHN0YXRlLmRyYWdnYWJsZS5pbml0aWFsQ29vcmRpbmF0ZXMueSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICBjYXNlIEFjdGlvbi5EcmFnRW5kOlxuICAgIGNhc2UgQWN0aW9uLkRyYWdDYW5jZWw6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgZHJhZ2dhYmxlOiB7XG4gICAgICAgICAgLi4uc3RhdGUuZHJhZ2dhYmxlLFxuICAgICAgICAgIGFjdGl2ZTogbnVsbCxcbiAgICAgICAgICBpbml0aWFsQ29vcmRpbmF0ZXM6IHt4OiAwLCB5OiAwfSxcbiAgICAgICAgICB0cmFuc2xhdGU6IHt4OiAwLCB5OiAwfSxcbiAgICAgICAgfSxcbiAgICAgIH07XG5cbiAgICBjYXNlIEFjdGlvbi5SZWdpc3RlckRyb3BwYWJsZToge1xuICAgICAgY29uc3Qge2VsZW1lbnR9ID0gYWN0aW9uO1xuICAgICAgY29uc3Qge2lkfSA9IGVsZW1lbnQ7XG4gICAgICBjb25zdCBjb250YWluZXJzID0gbmV3IERyb3BwYWJsZUNvbnRhaW5lcnNNYXAoc3RhdGUuZHJvcHBhYmxlLmNvbnRhaW5lcnMpO1xuICAgICAgY29udGFpbmVycy5zZXQoaWQsIGVsZW1lbnQpO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgZHJvcHBhYmxlOiB7XG4gICAgICAgICAgLi4uc3RhdGUuZHJvcHBhYmxlLFxuICAgICAgICAgIGNvbnRhaW5lcnMsXG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgIH1cblxuICAgIGNhc2UgQWN0aW9uLlNldERyb3BwYWJsZURpc2FibGVkOiB7XG4gICAgICBjb25zdCB7aWQsIGtleSwgZGlzYWJsZWR9ID0gYWN0aW9uO1xuICAgICAgY29uc3QgZWxlbWVudCA9IHN0YXRlLmRyb3BwYWJsZS5jb250YWluZXJzLmdldChpZCk7XG5cbiAgICAgIGlmICghZWxlbWVudCB8fCBrZXkgIT09IGVsZW1lbnQua2V5KSB7XG4gICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgY29udGFpbmVycyA9IG5ldyBEcm9wcGFibGVDb250YWluZXJzTWFwKHN0YXRlLmRyb3BwYWJsZS5jb250YWluZXJzKTtcbiAgICAgIGNvbnRhaW5lcnMuc2V0KGlkLCB7XG4gICAgICAgIC4uLmVsZW1lbnQsXG4gICAgICAgIGRpc2FibGVkLFxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBkcm9wcGFibGU6IHtcbiAgICAgICAgICAuLi5zdGF0ZS5kcm9wcGFibGUsXG4gICAgICAgICAgY29udGFpbmVycyxcbiAgICAgICAgfSxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgY2FzZSBBY3Rpb24uVW5yZWdpc3RlckRyb3BwYWJsZToge1xuICAgICAgY29uc3Qge2lkLCBrZXl9ID0gYWN0aW9uO1xuICAgICAgY29uc3QgZWxlbWVudCA9IHN0YXRlLmRyb3BwYWJsZS5jb250YWluZXJzLmdldChpZCk7XG5cbiAgICAgIGlmICghZWxlbWVudCB8fCBrZXkgIT09IGVsZW1lbnQua2V5KSB7XG4gICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgY29udGFpbmVycyA9IG5ldyBEcm9wcGFibGVDb250YWluZXJzTWFwKHN0YXRlLmRyb3BwYWJsZS5jb250YWluZXJzKTtcbiAgICAgIGNvbnRhaW5lcnMuZGVsZXRlKGlkKTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIGRyb3BwYWJsZToge1xuICAgICAgICAgIC4uLnN0YXRlLmRyb3BwYWJsZSxcbiAgICAgICAgICBjb250YWluZXJzLFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBkZWZhdWx0OiB7XG4gICAgICByZXR1cm4gc3RhdGU7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQge3VzZUNvbnRleHQsIHVzZUVmZmVjdH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtcbiAgZmluZEZpcnN0Rm9jdXNhYmxlTm9kZSxcbiAgaXNLZXlib2FyZEV2ZW50LFxuICB1c2VQcmV2aW91cyxcbn0gZnJvbSAnQGRuZC1raXQvdXRpbGl0aWVzJztcblxuaW1wb3J0IHtJbnRlcm5hbENvbnRleHR9IGZyb20gJy4uLy4uLy4uL3N0b3JlJztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgZGlzYWJsZWQ6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBSZXN0b3JlRm9jdXMoe2Rpc2FibGVkfTogUHJvcHMpIHtcbiAgY29uc3Qge2FjdGl2ZSwgYWN0aXZhdG9yRXZlbnQsIGRyYWdnYWJsZU5vZGVzfSA9IHVzZUNvbnRleHQoSW50ZXJuYWxDb250ZXh0KTtcbiAgY29uc3QgcHJldmlvdXNBY3RpdmF0b3JFdmVudCA9IHVzZVByZXZpb3VzKGFjdGl2YXRvckV2ZW50KTtcbiAgY29uc3QgcHJldmlvdXNBY3RpdmVJZCA9IHVzZVByZXZpb3VzKGFjdGl2ZT8uaWQpO1xuXG4gIC8vIFJlc3RvcmUga2V5Ym9hcmQgZm9jdXMgb24gdGhlIGFjdGl2YXRvciBub2RlXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFhY3RpdmF0b3JFdmVudCAmJiBwcmV2aW91c0FjdGl2YXRvckV2ZW50ICYmIHByZXZpb3VzQWN0aXZlSWQgIT0gbnVsbCkge1xuICAgICAgaWYgKCFpc0tleWJvYXJkRXZlbnQocHJldmlvdXNBY3RpdmF0b3JFdmVudCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCA9PT0gcHJldmlvdXNBY3RpdmF0b3JFdmVudC50YXJnZXQpIHtcbiAgICAgICAgLy8gTm8gbmVlZCB0byByZXN0b3JlIGZvY3VzXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZHJhZ2dhYmxlTm9kZSA9IGRyYWdnYWJsZU5vZGVzLmdldChwcmV2aW91c0FjdGl2ZUlkKTtcblxuICAgICAgaWYgKCFkcmFnZ2FibGVOb2RlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3Qge2FjdGl2YXRvck5vZGUsIG5vZGV9ID0gZHJhZ2dhYmxlTm9kZTtcblxuICAgICAgaWYgKCFhY3RpdmF0b3JOb2RlLmN1cnJlbnQgJiYgIW5vZGUuY3VycmVudCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgIGZvciAoY29uc3QgZWxlbWVudCBvZiBbYWN0aXZhdG9yTm9kZS5jdXJyZW50LCBub2RlLmN1cnJlbnRdKSB7XG4gICAgICAgICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBmb2N1c2FibGVOb2RlID0gZmluZEZpcnN0Rm9jdXNhYmxlTm9kZShlbGVtZW50KTtcblxuICAgICAgICAgIGlmIChmb2N1c2FibGVOb2RlKSB7XG4gICAgICAgICAgICBmb2N1c2FibGVOb2RlLmZvY3VzKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW1xuICAgIGFjdGl2YXRvckV2ZW50LFxuICAgIGRpc2FibGVkLFxuICAgIGRyYWdnYWJsZU5vZGVzLFxuICAgIHByZXZpb3VzQWN0aXZlSWQsXG4gICAgcHJldmlvdXNBY3RpdmF0b3JFdmVudCxcbiAgXSk7XG5cbiAgcmV0dXJuIG51bGw7XG59XG4iLCJpbXBvcnQgdHlwZSB7Rmlyc3RBcmd1bWVudCwgVHJhbnNmb3JtfSBmcm9tICdAZG5kLWtpdC91dGlsaXRpZXMnO1xuXG5pbXBvcnQgdHlwZSB7TW9kaWZpZXJzLCBNb2RpZmllcn0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBseU1vZGlmaWVycyhcbiAgbW9kaWZpZXJzOiBNb2RpZmllcnMgfCB1bmRlZmluZWQsXG4gIHt0cmFuc2Zvcm0sIC4uLmFyZ3N9OiBGaXJzdEFyZ3VtZW50PE1vZGlmaWVyPlxuKTogVHJhbnNmb3JtIHtcbiAgcmV0dXJuIG1vZGlmaWVycz8ubGVuZ3RoXG4gICAgPyBtb2RpZmllcnMucmVkdWNlPFRyYW5zZm9ybT4oKGFjY3VtdWxhdG9yLCBtb2RpZmllcikgPT4ge1xuICAgICAgICByZXR1cm4gbW9kaWZpZXIoe1xuICAgICAgICAgIHRyYW5zZm9ybTogYWNjdW11bGF0b3IsXG4gICAgICAgICAgLi4uYXJncyxcbiAgICAgICAgfSk7XG4gICAgICB9LCB0cmFuc2Zvcm0pXG4gICAgOiB0cmFuc2Zvcm07XG59XG4iLCJpbXBvcnQge3VzZU1lbW99IGZyb20gJ3JlYWN0JztcbmltcG9ydCB0eXBlIHtEZWVwUmVxdWlyZWR9IGZyb20gJ0BkbmQta2l0L3V0aWxpdGllcyc7XG5cbmltcG9ydCB7ZGVmYXVsdE1lYXN1cmluZ0NvbmZpZ3VyYXRpb259IGZyb20gJy4uL2RlZmF1bHRzJztcbmltcG9ydCB0eXBlIHtNZWFzdXJpbmdDb25maWd1cmF0aW9ufSBmcm9tICcuLi90eXBlcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VNZWFzdXJpbmdDb25maWd1cmF0aW9uKFxuICBjb25maWc6IE1lYXN1cmluZ0NvbmZpZ3VyYXRpb24gfCB1bmRlZmluZWRcbik6IERlZXBSZXF1aXJlZDxNZWFzdXJpbmdDb25maWd1cmF0aW9uPiB7XG4gIHJldHVybiB1c2VNZW1vKFxuICAgICgpID0+ICh7XG4gICAgICBkcmFnZ2FibGU6IHtcbiAgICAgICAgLi4uZGVmYXVsdE1lYXN1cmluZ0NvbmZpZ3VyYXRpb24uZHJhZ2dhYmxlLFxuICAgICAgICAuLi5jb25maWc/LmRyYWdnYWJsZSxcbiAgICAgIH0sXG4gICAgICBkcm9wcGFibGU6IHtcbiAgICAgICAgLi4uZGVmYXVsdE1lYXN1cmluZ0NvbmZpZ3VyYXRpb24uZHJvcHBhYmxlLFxuICAgICAgICAuLi5jb25maWc/LmRyb3BwYWJsZSxcbiAgICAgIH0sXG4gICAgICBkcmFnT3ZlcmxheToge1xuICAgICAgICAuLi5kZWZhdWx0TWVhc3VyaW5nQ29uZmlndXJhdGlvbi5kcmFnT3ZlcmxheSxcbiAgICAgICAgLi4uY29uZmlnPy5kcmFnT3ZlcmxheSxcbiAgICAgIH0sXG4gICAgfSksXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICAgIFtjb25maWc/LmRyYWdnYWJsZSwgY29uZmlnPy5kcm9wcGFibGUsIGNvbmZpZz8uZHJhZ092ZXJsYXldXG4gICk7XG59XG4iLCJpbXBvcnQge3VzZVJlZn0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHt1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0fSBmcm9tICdAZG5kLWtpdC91dGlsaXRpZXMnO1xuXG5pbXBvcnQge2dldFJlY3REZWx0YX0gZnJvbSAnLi4vLi4vLi4vdXRpbGl0aWVzL3JlY3QnO1xuaW1wb3J0IHtnZXRGaXJzdFNjcm9sbGFibGVBbmNlc3Rvcn0gZnJvbSAnLi4vLi4vLi4vdXRpbGl0aWVzL3Njcm9sbCc7XG5pbXBvcnQgdHlwZSB7Q2xpZW50UmVjdH0gZnJvbSAnLi4vLi4vLi4vdHlwZXMnO1xuaW1wb3J0IHR5cGUge0RyYWdnYWJsZU5vZGV9IGZyb20gJy4uLy4uLy4uL3N0b3JlJztcbmltcG9ydCB0eXBlIHtNZWFzdXJpbmdGdW5jdGlvbn0gZnJvbSAnLi4vdHlwZXMnO1xuXG5pbnRlcmZhY2UgT3B0aW9ucyB7XG4gIGFjdGl2ZU5vZGU6IERyYWdnYWJsZU5vZGUgfCBudWxsIHwgdW5kZWZpbmVkO1xuICBjb25maWc6IGJvb2xlYW4gfCB7eDogYm9vbGVhbjsgeTogYm9vbGVhbn0gfCB1bmRlZmluZWQ7XG4gIGluaXRpYWxSZWN0OiBDbGllbnRSZWN0IHwgbnVsbDtcbiAgbWVhc3VyZTogTWVhc3VyaW5nRnVuY3Rpb247XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VMYXlvdXRTaGlmdFNjcm9sbENvbXBlbnNhdGlvbih7XG4gIGFjdGl2ZU5vZGUsXG4gIG1lYXN1cmUsXG4gIGluaXRpYWxSZWN0LFxuICBjb25maWcgPSB0cnVlLFxufTogT3B0aW9ucykge1xuICBjb25zdCBpbml0aWFsaXplZCA9IHVzZVJlZihmYWxzZSk7XG4gIGNvbnN0IHt4LCB5fSA9IHR5cGVvZiBjb25maWcgPT09ICdib29sZWFuJyA/IHt4OiBjb25maWcsIHk6IGNvbmZpZ30gOiBjb25maWc7XG5cbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgZGlzYWJsZWQgPSAheCAmJiAheTtcblxuICAgIGlmIChkaXNhYmxlZCB8fCAhYWN0aXZlTm9kZSkge1xuICAgICAgaW5pdGlhbGl6ZWQuY3VycmVudCA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChpbml0aWFsaXplZC5jdXJyZW50IHx8ICFpbml0aWFsUmVjdCkge1xuICAgICAgLy8gUmV0dXJuIGVhcmx5IGlmIGxheW91dCBzaGlmdCBzY3JvbGwgY29tcGVuc2F0aW9uIHdhcyBhbHJlYWR5IGF0dGVtcHRlZFxuICAgICAgLy8gb3IgaWYgdGhlcmUgaXMgbm8gaW5pdGlhbFJlY3QgdG8gY29tcGFyZSB0by5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBHZXQgdGhlIG1vc3QgdXAgdG8gZGF0ZSBub2RlIHJlZiBmb3IgdGhlIGFjdGl2ZSBkcmFnZ2FibGVcbiAgICBjb25zdCBub2RlID0gYWN0aXZlTm9kZT8ubm9kZS5jdXJyZW50O1xuXG4gICAgaWYgKCFub2RlIHx8IG5vZGUuaXNDb25uZWN0ZWQgPT09IGZhbHNlKSB7XG4gICAgICAvLyBSZXR1cm4gZWFybHkgaWYgdGhlcmUgaXMgbm8gYXR0YWNoZWQgbm9kZSByZWYgb3IgaWYgdGhlIG5vZGUgaXNcbiAgICAgIC8vIGRpc2Nvbm5lY3RlZCBmcm9tIHRoZSBkb2N1bWVudC5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCByZWN0ID0gbWVhc3VyZShub2RlKTtcbiAgICBjb25zdCByZWN0RGVsdGEgPSBnZXRSZWN0RGVsdGEocmVjdCwgaW5pdGlhbFJlY3QpO1xuXG4gICAgaWYgKCF4KSB7XG4gICAgICByZWN0RGVsdGEueCA9IDA7XG4gICAgfVxuXG4gICAgaWYgKCF5KSB7XG4gICAgICByZWN0RGVsdGEueSA9IDA7XG4gICAgfVxuXG4gICAgLy8gT25seSBwZXJmb3JtIGxheW91dCBzaGlmdCBzY3JvbGwgY29tcGVuc2F0aW9uIG9uY2VcbiAgICBpbml0aWFsaXplZC5jdXJyZW50ID0gdHJ1ZTtcblxuICAgIGlmIChNYXRoLmFicyhyZWN0RGVsdGEueCkgPiAwIHx8IE1hdGguYWJzKHJlY3REZWx0YS55KSA+IDApIHtcbiAgICAgIGNvbnN0IGZpcnN0U2Nyb2xsYWJsZUFuY2VzdG9yID0gZ2V0Rmlyc3RTY3JvbGxhYmxlQW5jZXN0b3Iobm9kZSk7XG5cbiAgICAgIGlmIChmaXJzdFNjcm9sbGFibGVBbmNlc3Rvcikge1xuICAgICAgICBmaXJzdFNjcm9sbGFibGVBbmNlc3Rvci5zY3JvbGxCeSh7XG4gICAgICAgICAgdG9wOiByZWN0RGVsdGEueSxcbiAgICAgICAgICBsZWZ0OiByZWN0RGVsdGEueCxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9LCBbYWN0aXZlTm9kZSwgeCwgeSwgaW5pdGlhbFJlY3QsIG1lYXN1cmVdKTtcbn1cbiIsImltcG9ydCBSZWFjdCwge1xuICBtZW1vLFxuICBjcmVhdGVDb250ZXh0LFxuICB1c2VDYWxsYmFjayxcbiAgdXNlRWZmZWN0LFxuICB1c2VNZW1vLFxuICB1c2VSZWR1Y2VyLFxuICB1c2VSZWYsXG4gIHVzZVN0YXRlLFxufSBmcm9tICdyZWFjdCc7XG5pbXBvcnQge3Vuc3RhYmxlX2JhdGNoZWRVcGRhdGVzfSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IHtcbiAgYWRkLFxuICBnZXRFdmVudENvb3JkaW5hdGVzLFxuICBnZXRXaW5kb3csXG4gIHVzZUxhdGVzdFZhbHVlLFxuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0LFxuICB1c2VVbmlxdWVJZCxcbn0gZnJvbSAnQGRuZC1raXQvdXRpbGl0aWVzJztcbmltcG9ydCB0eXBlIHtUcmFuc2Zvcm19IGZyb20gJ0BkbmQta2l0L3V0aWxpdGllcyc7XG5cbmltcG9ydCB7XG4gIEFjdGlvbixcbiAgUHVibGljQ29udGV4dCxcbiAgSW50ZXJuYWxDb250ZXh0LFxuICBQdWJsaWNDb250ZXh0RGVzY3JpcHRvcixcbiAgSW50ZXJuYWxDb250ZXh0RGVzY3JpcHRvcixcbiAgZ2V0SW5pdGlhbFN0YXRlLFxuICByZWR1Y2VyLFxufSBmcm9tICcuLi8uLi9zdG9yZSc7XG5pbXBvcnQge0RuZE1vbml0b3JDb250ZXh0LCB1c2VEbmRNb25pdG9yUHJvdmlkZXJ9IGZyb20gJy4uL0RuZE1vbml0b3InO1xuaW1wb3J0IHtcbiAgdXNlQXV0b1Njcm9sbGVyLFxuICB1c2VDYWNoZWROb2RlLFxuICB1c2VDb21iaW5lQWN0aXZhdG9ycyxcbiAgdXNlRHJhZ092ZXJsYXlNZWFzdXJpbmcsXG4gIHVzZURyb3BwYWJsZU1lYXN1cmluZyxcbiAgdXNlSW5pdGlhbFJlY3QsXG4gIHVzZVJlY3QsXG4gIHVzZVJlY3REZWx0YSxcbiAgdXNlUmVjdHMsXG4gIHVzZVNjcm9sbGFibGVBbmNlc3RvcnMsXG4gIHVzZVNjcm9sbE9mZnNldHMsXG4gIHVzZVNjcm9sbE9mZnNldHNEZWx0YSxcbiAgdXNlU2Vuc29yU2V0dXAsXG4gIHVzZVdpbmRvd1JlY3QsXG59IGZyb20gJy4uLy4uL2hvb2tzL3V0aWxpdGllcyc7XG5pbXBvcnQgdHlwZSB7QXV0b1Njcm9sbE9wdGlvbnMsIFN5bnRoZXRpY0xpc3RlbmVyfSBmcm9tICcuLi8uLi9ob29rcy91dGlsaXRpZXMnO1xuaW1wb3J0IHR5cGUge1xuICBTZW5zb3IsXG4gIFNlbnNvckNvbnRleHQsXG4gIFNlbnNvckRlc2NyaXB0b3IsXG4gIFNlbnNvckFjdGl2YXRvckZ1bmN0aW9uLFxuICBTZW5zb3JJbnN0YW5jZSxcbn0gZnJvbSAnLi4vLi4vc2Vuc29ycyc7XG5pbXBvcnQge1xuICBhZGp1c3RTY2FsZSxcbiAgQ29sbGlzaW9uRGV0ZWN0aW9uLFxuICBkZWZhdWx0Q29vcmRpbmF0ZXMsXG4gIGdldEFkanVzdGVkUmVjdCxcbiAgZ2V0Rmlyc3RDb2xsaXNpb24sXG4gIHJlY3RJbnRlcnNlY3Rpb24sXG59IGZyb20gJy4uLy4uL3V0aWxpdGllcyc7XG5pbXBvcnQge2FwcGx5TW9kaWZpZXJzLCBNb2RpZmllcnN9IGZyb20gJy4uLy4uL21vZGlmaWVycyc7XG5pbXBvcnQgdHlwZSB7QWN0aXZlLCBPdmVyfSBmcm9tICcuLi8uLi9zdG9yZS90eXBlcyc7XG5pbXBvcnQgdHlwZSB7XG4gIERyYWdTdGFydEV2ZW50LFxuICBEcmFnQ2FuY2VsRXZlbnQsXG4gIERyYWdFbmRFdmVudCxcbiAgRHJhZ01vdmVFdmVudCxcbiAgRHJhZ092ZXJFdmVudCxcbiAgVW5pcXVlSWRlbnRpZmllcixcbiAgRHJhZ1BlbmRpbmdFdmVudCxcbiAgRHJhZ0Fib3J0RXZlbnQsXG59IGZyb20gJy4uLy4uL3R5cGVzJztcbmltcG9ydCB7XG4gIEFjY2Vzc2liaWxpdHksXG4gIEFubm91bmNlbWVudHMsXG4gIFJlc3RvcmVGb2N1cyxcbiAgU2NyZWVuUmVhZGVySW5zdHJ1Y3Rpb25zLFxufSBmcm9tICcuLi9BY2Nlc3NpYmlsaXR5JztcblxuaW1wb3J0IHtkZWZhdWx0RGF0YSwgZGVmYXVsdFNlbnNvcnN9IGZyb20gJy4vZGVmYXVsdHMnO1xuaW1wb3J0IHtcbiAgdXNlTGF5b3V0U2hpZnRTY3JvbGxDb21wZW5zYXRpb24sXG4gIHVzZU1lYXN1cmluZ0NvbmZpZ3VyYXRpb24sXG59IGZyb20gJy4vaG9va3MnO1xuaW1wb3J0IHR5cGUge01lYXN1cmluZ0NvbmZpZ3VyYXRpb259IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFByb3BzIHtcbiAgaWQ/OiBzdHJpbmc7XG4gIGFjY2Vzc2liaWxpdHk/OiB7XG4gICAgYW5ub3VuY2VtZW50cz86IEFubm91bmNlbWVudHM7XG4gICAgY29udGFpbmVyPzogRWxlbWVudDtcbiAgICByZXN0b3JlRm9jdXM/OiBib29sZWFuO1xuICAgIHNjcmVlblJlYWRlckluc3RydWN0aW9ucz86IFNjcmVlblJlYWRlckluc3RydWN0aW9ucztcbiAgfTtcbiAgYXV0b1Njcm9sbD86IGJvb2xlYW4gfCBBdXRvU2Nyb2xsT3B0aW9ucztcbiAgY2FuY2VsRHJvcD86IENhbmNlbERyb3A7XG4gIGNoaWxkcmVuPzogUmVhY3QuUmVhY3ROb2RlO1xuICBjb2xsaXNpb25EZXRlY3Rpb24/OiBDb2xsaXNpb25EZXRlY3Rpb247XG4gIG1lYXN1cmluZz86IE1lYXN1cmluZ0NvbmZpZ3VyYXRpb247XG4gIG1vZGlmaWVycz86IE1vZGlmaWVycztcbiAgc2Vuc29ycz86IFNlbnNvckRlc2NyaXB0b3I8YW55PltdO1xuICBvbkRyYWdBYm9ydD8oZXZlbnQ6IERyYWdBYm9ydEV2ZW50KTogdm9pZDtcbiAgb25EcmFnUGVuZGluZz8oZXZlbnQ6IERyYWdQZW5kaW5nRXZlbnQpOiB2b2lkO1xuICBvbkRyYWdTdGFydD8oZXZlbnQ6IERyYWdTdGFydEV2ZW50KTogdm9pZDtcbiAgb25EcmFnTW92ZT8oZXZlbnQ6IERyYWdNb3ZlRXZlbnQpOiB2b2lkO1xuICBvbkRyYWdPdmVyPyhldmVudDogRHJhZ092ZXJFdmVudCk6IHZvaWQ7XG4gIG9uRHJhZ0VuZD8oZXZlbnQ6IERyYWdFbmRFdmVudCk6IHZvaWQ7XG4gIG9uRHJhZ0NhbmNlbD8oZXZlbnQ6IERyYWdDYW5jZWxFdmVudCk6IHZvaWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2FuY2VsRHJvcEFyZ3VtZW50cyBleHRlbmRzIERyYWdFbmRFdmVudCB7fVxuXG5leHBvcnQgdHlwZSBDYW5jZWxEcm9wID0gKFxuICBhcmdzOiBDYW5jZWxEcm9wQXJndW1lbnRzXG4pID0+IGJvb2xlYW4gfCBQcm9taXNlPGJvb2xlYW4+O1xuXG5pbnRlcmZhY2UgRG5kRXZlbnQgZXh0ZW5kcyBFdmVudCB7XG4gIGRuZEtpdD86IHtcbiAgICBjYXB0dXJlZEJ5OiBTZW5zb3I8YW55PjtcbiAgfTtcbn1cblxuZXhwb3J0IGNvbnN0IEFjdGl2ZURyYWdnYWJsZUNvbnRleHQgPSBjcmVhdGVDb250ZXh0PFRyYW5zZm9ybT4oe1xuICAuLi5kZWZhdWx0Q29vcmRpbmF0ZXMsXG4gIHNjYWxlWDogMSxcbiAgc2NhbGVZOiAxLFxufSk7XG5cbmVudW0gU3RhdHVzIHtcbiAgVW5pbml0aWFsaXplZCxcbiAgSW5pdGlhbGl6aW5nLFxuICBJbml0aWFsaXplZCxcbn1cblxuZXhwb3J0IGNvbnN0IERuZENvbnRleHQgPSBtZW1vKGZ1bmN0aW9uIERuZENvbnRleHQoe1xuICBpZCxcbiAgYWNjZXNzaWJpbGl0eSxcbiAgYXV0b1Njcm9sbCA9IHRydWUsXG4gIGNoaWxkcmVuLFxuICBzZW5zb3JzID0gZGVmYXVsdFNlbnNvcnMsXG4gIGNvbGxpc2lvbkRldGVjdGlvbiA9IHJlY3RJbnRlcnNlY3Rpb24sXG4gIG1lYXN1cmluZyxcbiAgbW9kaWZpZXJzLFxuICAuLi5wcm9wc1xufTogUHJvcHMpIHtcbiAgY29uc3Qgc3RvcmUgPSB1c2VSZWR1Y2VyKHJlZHVjZXIsIHVuZGVmaW5lZCwgZ2V0SW5pdGlhbFN0YXRlKTtcbiAgY29uc3QgW3N0YXRlLCBkaXNwYXRjaF0gPSBzdG9yZTtcbiAgY29uc3QgW2Rpc3BhdGNoTW9uaXRvckV2ZW50LCByZWdpc3Rlck1vbml0b3JMaXN0ZW5lcl0gPVxuICAgIHVzZURuZE1vbml0b3JQcm92aWRlcigpO1xuICBjb25zdCBbc3RhdHVzLCBzZXRTdGF0dXNdID0gdXNlU3RhdGU8U3RhdHVzPihTdGF0dXMuVW5pbml0aWFsaXplZCk7XG4gIGNvbnN0IGlzSW5pdGlhbGl6ZWQgPSBzdGF0dXMgPT09IFN0YXR1cy5Jbml0aWFsaXplZDtcbiAgY29uc3Qge1xuICAgIGRyYWdnYWJsZToge2FjdGl2ZTogYWN0aXZlSWQsIG5vZGVzOiBkcmFnZ2FibGVOb2RlcywgdHJhbnNsYXRlfSxcbiAgICBkcm9wcGFibGU6IHtjb250YWluZXJzOiBkcm9wcGFibGVDb250YWluZXJzfSxcbiAgfSA9IHN0YXRlO1xuICBjb25zdCBub2RlID0gYWN0aXZlSWQgIT0gbnVsbCA/IGRyYWdnYWJsZU5vZGVzLmdldChhY3RpdmVJZCkgOiBudWxsO1xuICBjb25zdCBhY3RpdmVSZWN0cyA9IHVzZVJlZjxBY3RpdmVbJ3JlY3QnXVsnY3VycmVudCddPih7XG4gICAgaW5pdGlhbDogbnVsbCxcbiAgICB0cmFuc2xhdGVkOiBudWxsLFxuICB9KTtcbiAgY29uc3QgYWN0aXZlID0gdXNlTWVtbzxBY3RpdmUgfCBudWxsPihcbiAgICAoKSA9PlxuICAgICAgYWN0aXZlSWQgIT0gbnVsbFxuICAgICAgICA/IHtcbiAgICAgICAgICAgIGlkOiBhY3RpdmVJZCxcbiAgICAgICAgICAgIC8vIEl0J3MgcG9zc2libGUgZm9yIHRoZSBhY3RpdmUgbm9kZSB0byB1bm1vdW50IHdoaWxlIGRyYWdnaW5nXG4gICAgICAgICAgICBkYXRhOiBub2RlPy5kYXRhID8/IGRlZmF1bHREYXRhLFxuICAgICAgICAgICAgcmVjdDogYWN0aXZlUmVjdHMsXG4gICAgICAgICAgfVxuICAgICAgICA6IG51bGwsXG4gICAgW2FjdGl2ZUlkLCBub2RlXVxuICApO1xuICBjb25zdCBhY3RpdmVSZWYgPSB1c2VSZWY8VW5pcXVlSWRlbnRpZmllciB8IG51bGw+KG51bGwpO1xuICBjb25zdCBbYWN0aXZlU2Vuc29yLCBzZXRBY3RpdmVTZW5zb3JdID0gdXNlU3RhdGU8U2Vuc29ySW5zdGFuY2UgfCBudWxsPihudWxsKTtcbiAgY29uc3QgW2FjdGl2YXRvckV2ZW50LCBzZXRBY3RpdmF0b3JFdmVudF0gPSB1c2VTdGF0ZTxFdmVudCB8IG51bGw+KG51bGwpO1xuICBjb25zdCBsYXRlc3RQcm9wcyA9IHVzZUxhdGVzdFZhbHVlKHByb3BzLCBPYmplY3QudmFsdWVzKHByb3BzKSk7XG4gIGNvbnN0IGRyYWdnYWJsZURlc2NyaWJlZEJ5SWQgPSB1c2VVbmlxdWVJZChgRG5kRGVzY3JpYmVkQnlgLCBpZCk7XG4gIGNvbnN0IGVuYWJsZWREcm9wcGFibGVDb250YWluZXJzID0gdXNlTWVtbyhcbiAgICAoKSA9PiBkcm9wcGFibGVDb250YWluZXJzLmdldEVuYWJsZWQoKSxcbiAgICBbZHJvcHBhYmxlQ29udGFpbmVyc11cbiAgKTtcbiAgY29uc3QgbWVhc3VyaW5nQ29uZmlndXJhdGlvbiA9IHVzZU1lYXN1cmluZ0NvbmZpZ3VyYXRpb24obWVhc3VyaW5nKTtcbiAgY29uc3Qge2Ryb3BwYWJsZVJlY3RzLCBtZWFzdXJlRHJvcHBhYmxlQ29udGFpbmVycywgbWVhc3VyaW5nU2NoZWR1bGVkfSA9XG4gICAgdXNlRHJvcHBhYmxlTWVhc3VyaW5nKGVuYWJsZWREcm9wcGFibGVDb250YWluZXJzLCB7XG4gICAgICBkcmFnZ2luZzogaXNJbml0aWFsaXplZCxcbiAgICAgIGRlcGVuZGVuY2llczogW3RyYW5zbGF0ZS54LCB0cmFuc2xhdGUueV0sXG4gICAgICBjb25maWc6IG1lYXN1cmluZ0NvbmZpZ3VyYXRpb24uZHJvcHBhYmxlLFxuICAgIH0pO1xuICBjb25zdCBhY3RpdmVOb2RlID0gdXNlQ2FjaGVkTm9kZShkcmFnZ2FibGVOb2RlcywgYWN0aXZlSWQpO1xuICBjb25zdCBhY3RpdmF0aW9uQ29vcmRpbmF0ZXMgPSB1c2VNZW1vKFxuICAgICgpID0+IChhY3RpdmF0b3JFdmVudCA/IGdldEV2ZW50Q29vcmRpbmF0ZXMoYWN0aXZhdG9yRXZlbnQpIDogbnVsbCksXG4gICAgW2FjdGl2YXRvckV2ZW50XVxuICApO1xuICBjb25zdCBhdXRvU2Nyb2xsT3B0aW9ucyA9IGdldEF1dG9TY3JvbGxlck9wdGlvbnMoKTtcbiAgY29uc3QgaW5pdGlhbEFjdGl2ZU5vZGVSZWN0ID0gdXNlSW5pdGlhbFJlY3QoXG4gICAgYWN0aXZlTm9kZSxcbiAgICBtZWFzdXJpbmdDb25maWd1cmF0aW9uLmRyYWdnYWJsZS5tZWFzdXJlXG4gICk7XG5cbiAgdXNlTGF5b3V0U2hpZnRTY3JvbGxDb21wZW5zYXRpb24oe1xuICAgIGFjdGl2ZU5vZGU6IGFjdGl2ZUlkICE9IG51bGwgPyBkcmFnZ2FibGVOb2Rlcy5nZXQoYWN0aXZlSWQpIDogbnVsbCxcbiAgICBjb25maWc6IGF1dG9TY3JvbGxPcHRpb25zLmxheW91dFNoaWZ0Q29tcGVuc2F0aW9uLFxuICAgIGluaXRpYWxSZWN0OiBpbml0aWFsQWN0aXZlTm9kZVJlY3QsXG4gICAgbWVhc3VyZTogbWVhc3VyaW5nQ29uZmlndXJhdGlvbi5kcmFnZ2FibGUubWVhc3VyZSxcbiAgfSk7XG5cbiAgY29uc3QgYWN0aXZlTm9kZVJlY3QgPSB1c2VSZWN0KFxuICAgIGFjdGl2ZU5vZGUsXG4gICAgbWVhc3VyaW5nQ29uZmlndXJhdGlvbi5kcmFnZ2FibGUubWVhc3VyZSxcbiAgICBpbml0aWFsQWN0aXZlTm9kZVJlY3RcbiAgKTtcbiAgY29uc3QgY29udGFpbmVyTm9kZVJlY3QgPSB1c2VSZWN0KFxuICAgIGFjdGl2ZU5vZGUgPyBhY3RpdmVOb2RlLnBhcmVudEVsZW1lbnQgOiBudWxsXG4gICk7XG4gIGNvbnN0IHNlbnNvckNvbnRleHQgPSB1c2VSZWY8U2Vuc29yQ29udGV4dD4oe1xuICAgIGFjdGl2YXRvckV2ZW50OiBudWxsLFxuICAgIGFjdGl2ZTogbnVsbCxcbiAgICBhY3RpdmVOb2RlLFxuICAgIGNvbGxpc2lvblJlY3Q6IG51bGwsXG4gICAgY29sbGlzaW9uczogbnVsbCxcbiAgICBkcm9wcGFibGVSZWN0cyxcbiAgICBkcmFnZ2FibGVOb2RlcyxcbiAgICBkcmFnZ2luZ05vZGU6IG51bGwsXG4gICAgZHJhZ2dpbmdOb2RlUmVjdDogbnVsbCxcbiAgICBkcm9wcGFibGVDb250YWluZXJzLFxuICAgIG92ZXI6IG51bGwsXG4gICAgc2Nyb2xsYWJsZUFuY2VzdG9yczogW10sXG4gICAgc2Nyb2xsQWRqdXN0ZWRUcmFuc2xhdGU6IG51bGwsXG4gIH0pO1xuICBjb25zdCBvdmVyTm9kZSA9IGRyb3BwYWJsZUNvbnRhaW5lcnMuZ2V0Tm9kZUZvcihcbiAgICBzZW5zb3JDb250ZXh0LmN1cnJlbnQub3Zlcj8uaWRcbiAgKTtcbiAgY29uc3QgZHJhZ092ZXJsYXkgPSB1c2VEcmFnT3ZlcmxheU1lYXN1cmluZyh7XG4gICAgbWVhc3VyZTogbWVhc3VyaW5nQ29uZmlndXJhdGlvbi5kcmFnT3ZlcmxheS5tZWFzdXJlLFxuICB9KTtcblxuICAvLyBVc2UgdGhlIHJlY3Qgb2YgdGhlIGRyYWcgb3ZlcmxheSBpZiBpdCBpcyBtb3VudGVkXG4gIGNvbnN0IGRyYWdnaW5nTm9kZSA9IGRyYWdPdmVybGF5Lm5vZGVSZWYuY3VycmVudCA/PyBhY3RpdmVOb2RlO1xuICBjb25zdCBkcmFnZ2luZ05vZGVSZWN0ID0gaXNJbml0aWFsaXplZFxuICAgID8gZHJhZ092ZXJsYXkucmVjdCA/PyBhY3RpdmVOb2RlUmVjdFxuICAgIDogbnVsbDtcbiAgY29uc3QgdXNlc0RyYWdPdmVybGF5ID0gQm9vbGVhbihcbiAgICBkcmFnT3ZlcmxheS5ub2RlUmVmLmN1cnJlbnQgJiYgZHJhZ092ZXJsYXkucmVjdFxuICApO1xuICAvLyBUaGUgZGVsdGEgYmV0d2VlbiB0aGUgcHJldmlvdXMgYW5kIG5ldyBwb3NpdGlvbiBvZiB0aGUgZHJhZ2dhYmxlIG5vZGVcbiAgLy8gaXMgb25seSByZWxldmFudCB3aGVuIHRoZXJlIGlzIG5vIGRyYWcgb3ZlcmxheVxuICBjb25zdCBub2RlUmVjdERlbHRhID0gdXNlUmVjdERlbHRhKHVzZXNEcmFnT3ZlcmxheSA/IG51bGwgOiBhY3RpdmVOb2RlUmVjdCk7XG5cbiAgLy8gR2V0IHRoZSB3aW5kb3cgcmVjdCBvZiB0aGUgZHJhZ2dpbmcgbm9kZVxuICBjb25zdCB3aW5kb3dSZWN0ID0gdXNlV2luZG93UmVjdChcbiAgICBkcmFnZ2luZ05vZGUgPyBnZXRXaW5kb3coZHJhZ2dpbmdOb2RlKSA6IG51bGxcbiAgKTtcblxuICAvLyBHZXQgc2Nyb2xsYWJsZSBhbmNlc3RvcnMgb2YgdGhlIGRyYWdnaW5nIG5vZGVcbiAgY29uc3Qgc2Nyb2xsYWJsZUFuY2VzdG9ycyA9IHVzZVNjcm9sbGFibGVBbmNlc3RvcnMoXG4gICAgaXNJbml0aWFsaXplZCA/IG92ZXJOb2RlID8/IGFjdGl2ZU5vZGUgOiBudWxsXG4gICk7XG4gIGNvbnN0IHNjcm9sbGFibGVBbmNlc3RvclJlY3RzID0gdXNlUmVjdHMoc2Nyb2xsYWJsZUFuY2VzdG9ycyk7XG5cbiAgLy8gQXBwbHkgbW9kaWZpZXJzXG4gIGNvbnN0IG1vZGlmaWVkVHJhbnNsYXRlID0gYXBwbHlNb2RpZmllcnMobW9kaWZpZXJzLCB7XG4gICAgdHJhbnNmb3JtOiB7XG4gICAgICB4OiB0cmFuc2xhdGUueCAtIG5vZGVSZWN0RGVsdGEueCxcbiAgICAgIHk6IHRyYW5zbGF0ZS55IC0gbm9kZVJlY3REZWx0YS55LFxuICAgICAgc2NhbGVYOiAxLFxuICAgICAgc2NhbGVZOiAxLFxuICAgIH0sXG4gICAgYWN0aXZhdG9yRXZlbnQsXG4gICAgYWN0aXZlLFxuICAgIGFjdGl2ZU5vZGVSZWN0LFxuICAgIGNvbnRhaW5lck5vZGVSZWN0LFxuICAgIGRyYWdnaW5nTm9kZVJlY3QsXG4gICAgb3Zlcjogc2Vuc29yQ29udGV4dC5jdXJyZW50Lm92ZXIsXG4gICAgb3ZlcmxheU5vZGVSZWN0OiBkcmFnT3ZlcmxheS5yZWN0LFxuICAgIHNjcm9sbGFibGVBbmNlc3RvcnMsXG4gICAgc2Nyb2xsYWJsZUFuY2VzdG9yUmVjdHMsXG4gICAgd2luZG93UmVjdCxcbiAgfSk7XG5cbiAgY29uc3QgcG9pbnRlckNvb3JkaW5hdGVzID0gYWN0aXZhdGlvbkNvb3JkaW5hdGVzXG4gICAgPyBhZGQoYWN0aXZhdGlvbkNvb3JkaW5hdGVzLCB0cmFuc2xhdGUpXG4gICAgOiBudWxsO1xuXG4gIGNvbnN0IHNjcm9sbE9mZnNldHMgPSB1c2VTY3JvbGxPZmZzZXRzKHNjcm9sbGFibGVBbmNlc3RvcnMpO1xuICAvLyBSZXByZXNlbnRzIHRoZSBzY3JvbGwgZGVsdGEgc2luY2UgZHJhZ2dpbmcgd2FzIGluaXRpYXRlZFxuICBjb25zdCBzY3JvbGxBZGp1c3RtZW50ID0gdXNlU2Nyb2xsT2Zmc2V0c0RlbHRhKHNjcm9sbE9mZnNldHMpO1xuICAvLyBSZXByZXNlbnRzIHRoZSBzY3JvbGwgZGVsdGEgc2luY2UgdGhlIGxhc3QgdGltZSB0aGUgYWN0aXZlIG5vZGUgcmVjdCB3YXMgbWVhc3VyZWRcbiAgY29uc3QgYWN0aXZlTm9kZVNjcm9sbERlbHRhID0gdXNlU2Nyb2xsT2Zmc2V0c0RlbHRhKHNjcm9sbE9mZnNldHMsIFtcbiAgICBhY3RpdmVOb2RlUmVjdCxcbiAgXSk7XG5cbiAgY29uc3Qgc2Nyb2xsQWRqdXN0ZWRUcmFuc2xhdGUgPSBhZGQobW9kaWZpZWRUcmFuc2xhdGUsIHNjcm9sbEFkanVzdG1lbnQpO1xuXG4gIGNvbnN0IGNvbGxpc2lvblJlY3QgPSBkcmFnZ2luZ05vZGVSZWN0XG4gICAgPyBnZXRBZGp1c3RlZFJlY3QoZHJhZ2dpbmdOb2RlUmVjdCwgbW9kaWZpZWRUcmFuc2xhdGUpXG4gICAgOiBudWxsO1xuXG4gIGNvbnN0IGNvbGxpc2lvbnMgPVxuICAgIGFjdGl2ZSAmJiBjb2xsaXNpb25SZWN0XG4gICAgICA/IGNvbGxpc2lvbkRldGVjdGlvbih7XG4gICAgICAgICAgYWN0aXZlLFxuICAgICAgICAgIGNvbGxpc2lvblJlY3QsXG4gICAgICAgICAgZHJvcHBhYmxlUmVjdHMsXG4gICAgICAgICAgZHJvcHBhYmxlQ29udGFpbmVyczogZW5hYmxlZERyb3BwYWJsZUNvbnRhaW5lcnMsXG4gICAgICAgICAgcG9pbnRlckNvb3JkaW5hdGVzLFxuICAgICAgICB9KVxuICAgICAgOiBudWxsO1xuICBjb25zdCBvdmVySWQgPSBnZXRGaXJzdENvbGxpc2lvbihjb2xsaXNpb25zLCAnaWQnKTtcbiAgY29uc3QgW292ZXIsIHNldE92ZXJdID0gdXNlU3RhdGU8T3ZlciB8IG51bGw+KG51bGwpO1xuXG4gIC8vIFdoZW4gdGhlcmUgaXMgbm8gZHJhZyBvdmVybGF5IHVzZWQsIHdlIG5lZWQgdG8gYWNjb3VudCBmb3IgdGhlXG4gIC8vIHdpbmRvdyBzY3JvbGwgZGVsdGFcbiAgY29uc3QgYXBwbGllZFRyYW5zbGF0ZSA9IHVzZXNEcmFnT3ZlcmxheVxuICAgID8gbW9kaWZpZWRUcmFuc2xhdGVcbiAgICA6IGFkZChtb2RpZmllZFRyYW5zbGF0ZSwgYWN0aXZlTm9kZVNjcm9sbERlbHRhKTtcblxuICBjb25zdCB0cmFuc2Zvcm0gPSBhZGp1c3RTY2FsZShcbiAgICBhcHBsaWVkVHJhbnNsYXRlLFxuICAgIG92ZXI/LnJlY3QgPz8gbnVsbCxcbiAgICBhY3RpdmVOb2RlUmVjdFxuICApO1xuXG4gIGNvbnN0IGFjdGl2ZVNlbnNvclJlZiA9IHVzZVJlZjxTZW5zb3JJbnN0YW5jZSB8IG51bGw+KG51bGwpO1xuICBjb25zdCBpbnN0YW50aWF0ZVNlbnNvciA9IHVzZUNhbGxiYWNrKFxuICAgIChcbiAgICAgIGV2ZW50OiBSZWFjdC5TeW50aGV0aWNFdmVudCxcbiAgICAgIHtzZW5zb3I6IFNlbnNvciwgb3B0aW9uc306IFNlbnNvckRlc2NyaXB0b3I8YW55PlxuICAgICkgPT4ge1xuICAgICAgaWYgKGFjdGl2ZVJlZi5jdXJyZW50ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBhY3RpdmVOb2RlID0gZHJhZ2dhYmxlTm9kZXMuZ2V0KGFjdGl2ZVJlZi5jdXJyZW50KTtcblxuICAgICAgaWYgKCFhY3RpdmVOb2RlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3QgYWN0aXZhdG9yRXZlbnQgPSBldmVudC5uYXRpdmVFdmVudDtcblxuICAgICAgY29uc3Qgc2Vuc29ySW5zdGFuY2UgPSBuZXcgU2Vuc29yKHtcbiAgICAgICAgYWN0aXZlOiBhY3RpdmVSZWYuY3VycmVudCxcbiAgICAgICAgYWN0aXZlTm9kZSxcbiAgICAgICAgZXZlbnQ6IGFjdGl2YXRvckV2ZW50LFxuICAgICAgICBvcHRpb25zLFxuICAgICAgICAvLyBTZW5zb3JzIG5lZWQgdG8gYmUgaW5zdGFudGlhdGVkIHdpdGggcmVmcyBmb3IgYXJndW1lbnRzIHRoYXQgY2hhbmdlIG92ZXIgdGltZVxuICAgICAgICAvLyBvdGhlcndpc2UgdGhleSBhcmUgZnJvemVuIGluIHRpbWUgd2l0aCB0aGUgc3RhbGUgYXJndW1lbnRzXG4gICAgICAgIGNvbnRleHQ6IHNlbnNvckNvbnRleHQsXG4gICAgICAgIG9uQWJvcnQoaWQpIHtcbiAgICAgICAgICBjb25zdCBkcmFnZ2FibGVOb2RlID0gZHJhZ2dhYmxlTm9kZXMuZ2V0KGlkKTtcblxuICAgICAgICAgIGlmICghZHJhZ2dhYmxlTm9kZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IHtvbkRyYWdBYm9ydH0gPSBsYXRlc3RQcm9wcy5jdXJyZW50O1xuICAgICAgICAgIGNvbnN0IGV2ZW50OiBEcmFnQWJvcnRFdmVudCA9IHtpZH07XG4gICAgICAgICAgb25EcmFnQWJvcnQ/LihldmVudCk7XG4gICAgICAgICAgZGlzcGF0Y2hNb25pdG9yRXZlbnQoe3R5cGU6ICdvbkRyYWdBYm9ydCcsIGV2ZW50fSk7XG4gICAgICAgIH0sXG4gICAgICAgIG9uUGVuZGluZyhpZCwgY29uc3RyYWludCwgaW5pdGlhbENvb3JkaW5hdGVzLCBvZmZzZXQpIHtcbiAgICAgICAgICBjb25zdCBkcmFnZ2FibGVOb2RlID0gZHJhZ2dhYmxlTm9kZXMuZ2V0KGlkKTtcblxuICAgICAgICAgIGlmICghZHJhZ2dhYmxlTm9kZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IHtvbkRyYWdQZW5kaW5nfSA9IGxhdGVzdFByb3BzLmN1cnJlbnQ7XG4gICAgICAgICAgY29uc3QgZXZlbnQ6IERyYWdQZW5kaW5nRXZlbnQgPSB7XG4gICAgICAgICAgICBpZCxcbiAgICAgICAgICAgIGNvbnN0cmFpbnQsXG4gICAgICAgICAgICBpbml0aWFsQ29vcmRpbmF0ZXMsXG4gICAgICAgICAgICBvZmZzZXQsXG4gICAgICAgICAgfTtcblxuICAgICAgICAgIG9uRHJhZ1BlbmRpbmc/LihldmVudCk7XG4gICAgICAgICAgZGlzcGF0Y2hNb25pdG9yRXZlbnQoe3R5cGU6ICdvbkRyYWdQZW5kaW5nJywgZXZlbnR9KTtcbiAgICAgICAgfSxcbiAgICAgICAgb25TdGFydChpbml0aWFsQ29vcmRpbmF0ZXMpIHtcbiAgICAgICAgICBjb25zdCBpZCA9IGFjdGl2ZVJlZi5jdXJyZW50O1xuXG4gICAgICAgICAgaWYgKGlkID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBkcmFnZ2FibGVOb2RlID0gZHJhZ2dhYmxlTm9kZXMuZ2V0KGlkKTtcblxuICAgICAgICAgIGlmICghZHJhZ2dhYmxlTm9kZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IHtvbkRyYWdTdGFydH0gPSBsYXRlc3RQcm9wcy5jdXJyZW50O1xuICAgICAgICAgIGNvbnN0IGV2ZW50OiBEcmFnU3RhcnRFdmVudCA9IHtcbiAgICAgICAgICAgIGFjdGl2YXRvckV2ZW50LFxuICAgICAgICAgICAgYWN0aXZlOiB7aWQsIGRhdGE6IGRyYWdnYWJsZU5vZGUuZGF0YSwgcmVjdDogYWN0aXZlUmVjdHN9LFxuICAgICAgICAgIH07XG5cbiAgICAgICAgICB1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcygoKSA9PiB7XG4gICAgICAgICAgICBvbkRyYWdTdGFydD8uKGV2ZW50KTtcbiAgICAgICAgICAgIHNldFN0YXR1cyhTdGF0dXMuSW5pdGlhbGl6aW5nKTtcbiAgICAgICAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgdHlwZTogQWN0aW9uLkRyYWdTdGFydCxcbiAgICAgICAgICAgICAgaW5pdGlhbENvb3JkaW5hdGVzLFxuICAgICAgICAgICAgICBhY3RpdmU6IGlkLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBkaXNwYXRjaE1vbml0b3JFdmVudCh7dHlwZTogJ29uRHJhZ1N0YXJ0JywgZXZlbnR9KTtcbiAgICAgICAgICAgIHNldEFjdGl2ZVNlbnNvcihhY3RpdmVTZW5zb3JSZWYuY3VycmVudCk7XG4gICAgICAgICAgICBzZXRBY3RpdmF0b3JFdmVudChhY3RpdmF0b3JFdmVudCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIG9uTW92ZShjb29yZGluYXRlcykge1xuICAgICAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgICAgIHR5cGU6IEFjdGlvbi5EcmFnTW92ZSxcbiAgICAgICAgICAgIGNvb3JkaW5hdGVzLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBvbkVuZDogY3JlYXRlSGFuZGxlcihBY3Rpb24uRHJhZ0VuZCksXG4gICAgICAgIG9uQ2FuY2VsOiBjcmVhdGVIYW5kbGVyKEFjdGlvbi5EcmFnQ2FuY2VsKSxcbiAgICAgIH0pO1xuXG4gICAgICBhY3RpdmVTZW5zb3JSZWYuY3VycmVudCA9IHNlbnNvckluc3RhbmNlO1xuXG4gICAgICBmdW5jdGlvbiBjcmVhdGVIYW5kbGVyKHR5cGU6IEFjdGlvbi5EcmFnRW5kIHwgQWN0aW9uLkRyYWdDYW5jZWwpIHtcbiAgICAgICAgcmV0dXJuIGFzeW5jIGZ1bmN0aW9uIGhhbmRsZXIoKSB7XG4gICAgICAgICAgY29uc3Qge2FjdGl2ZSwgY29sbGlzaW9ucywgb3Zlciwgc2Nyb2xsQWRqdXN0ZWRUcmFuc2xhdGV9ID1cbiAgICAgICAgICAgIHNlbnNvckNvbnRleHQuY3VycmVudDtcbiAgICAgICAgICBsZXQgZXZlbnQ6IERyYWdFbmRFdmVudCB8IG51bGwgPSBudWxsO1xuXG4gICAgICAgICAgaWYgKGFjdGl2ZSAmJiBzY3JvbGxBZGp1c3RlZFRyYW5zbGF0ZSkge1xuICAgICAgICAgICAgY29uc3Qge2NhbmNlbERyb3B9ID0gbGF0ZXN0UHJvcHMuY3VycmVudDtcblxuICAgICAgICAgICAgZXZlbnQgPSB7XG4gICAgICAgICAgICAgIGFjdGl2YXRvckV2ZW50LFxuICAgICAgICAgICAgICBhY3RpdmU6IGFjdGl2ZSxcbiAgICAgICAgICAgICAgY29sbGlzaW9ucyxcbiAgICAgICAgICAgICAgZGVsdGE6IHNjcm9sbEFkanVzdGVkVHJhbnNsYXRlLFxuICAgICAgICAgICAgICBvdmVyLFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaWYgKHR5cGUgPT09IEFjdGlvbi5EcmFnRW5kICYmIHR5cGVvZiBjYW5jZWxEcm9wID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHNob3VsZENhbmNlbCA9IGF3YWl0IFByb21pc2UucmVzb2x2ZShjYW5jZWxEcm9wKGV2ZW50KSk7XG5cbiAgICAgICAgICAgICAgaWYgKHNob3VsZENhbmNlbCkge1xuICAgICAgICAgICAgICAgIHR5cGUgPSBBY3Rpb24uRHJhZ0NhbmNlbDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGFjdGl2ZVJlZi5jdXJyZW50ID0gbnVsbDtcblxuICAgICAgICAgIHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzKCgpID0+IHtcbiAgICAgICAgICAgIGRpc3BhdGNoKHt0eXBlfSk7XG4gICAgICAgICAgICBzZXRTdGF0dXMoU3RhdHVzLlVuaW5pdGlhbGl6ZWQpO1xuICAgICAgICAgICAgc2V0T3ZlcihudWxsKTtcbiAgICAgICAgICAgIHNldEFjdGl2ZVNlbnNvcihudWxsKTtcbiAgICAgICAgICAgIHNldEFjdGl2YXRvckV2ZW50KG51bGwpO1xuICAgICAgICAgICAgYWN0aXZlU2Vuc29yUmVmLmN1cnJlbnQgPSBudWxsO1xuXG4gICAgICAgICAgICBjb25zdCBldmVudE5hbWUgPVxuICAgICAgICAgICAgICB0eXBlID09PSBBY3Rpb24uRHJhZ0VuZCA/ICdvbkRyYWdFbmQnIDogJ29uRHJhZ0NhbmNlbCc7XG5cbiAgICAgICAgICAgIGlmIChldmVudCkge1xuICAgICAgICAgICAgICBjb25zdCBoYW5kbGVyID0gbGF0ZXN0UHJvcHMuY3VycmVudFtldmVudE5hbWVdO1xuXG4gICAgICAgICAgICAgIGhhbmRsZXI/LihldmVudCk7XG4gICAgICAgICAgICAgIGRpc3BhdGNoTW9uaXRvckV2ZW50KHt0eXBlOiBldmVudE5hbWUsIGV2ZW50fSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSxcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gICAgW2RyYWdnYWJsZU5vZGVzXVxuICApO1xuXG4gIGNvbnN0IGJpbmRBY3RpdmF0b3JUb1NlbnNvckluc3RhbnRpYXRvciA9IHVzZUNhbGxiYWNrKFxuICAgIChcbiAgICAgIGhhbmRsZXI6IFNlbnNvckFjdGl2YXRvckZ1bmN0aW9uPGFueT4sXG4gICAgICBzZW5zb3I6IFNlbnNvckRlc2NyaXB0b3I8YW55PlxuICAgICk6IFN5bnRoZXRpY0xpc3RlbmVyWydoYW5kbGVyJ10gPT4ge1xuICAgICAgcmV0dXJuIChldmVudCwgYWN0aXZlKSA9PiB7XG4gICAgICAgIGNvbnN0IG5hdGl2ZUV2ZW50ID0gZXZlbnQubmF0aXZlRXZlbnQgYXMgRG5kRXZlbnQ7XG4gICAgICAgIGNvbnN0IGFjdGl2ZURyYWdnYWJsZU5vZGUgPSBkcmFnZ2FibGVOb2Rlcy5nZXQoYWN0aXZlKTtcblxuICAgICAgICBpZiAoXG4gICAgICAgICAgLy8gQW5vdGhlciBzZW5zb3IgaXMgYWxyZWFkeSBpbnN0YW50aWF0aW5nXG4gICAgICAgICAgYWN0aXZlUmVmLmN1cnJlbnQgIT09IG51bGwgfHxcbiAgICAgICAgICAvLyBObyBhY3RpdmUgZHJhZ2dhYmxlXG4gICAgICAgICAgIWFjdGl2ZURyYWdnYWJsZU5vZGUgfHxcbiAgICAgICAgICAvLyBFdmVudCBoYXMgYWxyZWFkeSBiZWVuIGNhcHR1cmVkXG4gICAgICAgICAgbmF0aXZlRXZlbnQuZG5kS2l0IHx8XG4gICAgICAgICAgbmF0aXZlRXZlbnQuZGVmYXVsdFByZXZlbnRlZFxuICAgICAgICApIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBhY3RpdmF0aW9uQ29udGV4dCA9IHtcbiAgICAgICAgICBhY3RpdmU6IGFjdGl2ZURyYWdnYWJsZU5vZGUsXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHNob3VsZEFjdGl2YXRlID0gaGFuZGxlcihcbiAgICAgICAgICBldmVudCxcbiAgICAgICAgICBzZW5zb3Iub3B0aW9ucyxcbiAgICAgICAgICBhY3RpdmF0aW9uQ29udGV4dFxuICAgICAgICApO1xuXG4gICAgICAgIGlmIChzaG91bGRBY3RpdmF0ZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgIG5hdGl2ZUV2ZW50LmRuZEtpdCA9IHtcbiAgICAgICAgICAgIGNhcHR1cmVkQnk6IHNlbnNvci5zZW5zb3IsXG4gICAgICAgICAgfTtcblxuICAgICAgICAgIGFjdGl2ZVJlZi5jdXJyZW50ID0gYWN0aXZlO1xuICAgICAgICAgIGluc3RhbnRpYXRlU2Vuc29yKGV2ZW50LCBzZW5zb3IpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0sXG4gICAgW2RyYWdnYWJsZU5vZGVzLCBpbnN0YW50aWF0ZVNlbnNvcl1cbiAgKTtcblxuICBjb25zdCBhY3RpdmF0b3JzID0gdXNlQ29tYmluZUFjdGl2YXRvcnMoXG4gICAgc2Vuc29ycyxcbiAgICBiaW5kQWN0aXZhdG9yVG9TZW5zb3JJbnN0YW50aWF0b3JcbiAgKTtcblxuICB1c2VTZW5zb3JTZXR1cChzZW5zb3JzKTtcblxuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICBpZiAoYWN0aXZlTm9kZVJlY3QgJiYgc3RhdHVzID09PSBTdGF0dXMuSW5pdGlhbGl6aW5nKSB7XG4gICAgICBzZXRTdGF0dXMoU3RhdHVzLkluaXRpYWxpemVkKTtcbiAgICB9XG4gIH0sIFthY3RpdmVOb2RlUmVjdCwgc3RhdHVzXSk7XG5cbiAgdXNlRWZmZWN0KFxuICAgICgpID0+IHtcbiAgICAgIGNvbnN0IHtvbkRyYWdNb3ZlfSA9IGxhdGVzdFByb3BzLmN1cnJlbnQ7XG4gICAgICBjb25zdCB7YWN0aXZlLCBhY3RpdmF0b3JFdmVudCwgY29sbGlzaW9ucywgb3Zlcn0gPSBzZW5zb3JDb250ZXh0LmN1cnJlbnQ7XG5cbiAgICAgIGlmICghYWN0aXZlIHx8ICFhY3RpdmF0b3JFdmVudCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGV2ZW50OiBEcmFnTW92ZUV2ZW50ID0ge1xuICAgICAgICBhY3RpdmUsXG4gICAgICAgIGFjdGl2YXRvckV2ZW50LFxuICAgICAgICBjb2xsaXNpb25zLFxuICAgICAgICBkZWx0YToge1xuICAgICAgICAgIHg6IHNjcm9sbEFkanVzdGVkVHJhbnNsYXRlLngsXG4gICAgICAgICAgeTogc2Nyb2xsQWRqdXN0ZWRUcmFuc2xhdGUueSxcbiAgICAgICAgfSxcbiAgICAgICAgb3ZlcixcbiAgICAgIH07XG5cbiAgICAgIHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzKCgpID0+IHtcbiAgICAgICAgb25EcmFnTW92ZT8uKGV2ZW50KTtcbiAgICAgICAgZGlzcGF0Y2hNb25pdG9yRXZlbnQoe3R5cGU6ICdvbkRyYWdNb3ZlJywgZXZlbnR9KTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICAgIFtzY3JvbGxBZGp1c3RlZFRyYW5zbGF0ZS54LCBzY3JvbGxBZGp1c3RlZFRyYW5zbGF0ZS55XVxuICApO1xuXG4gIHVzZUVmZmVjdChcbiAgICAoKSA9PiB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIGFjdGl2ZSxcbiAgICAgICAgYWN0aXZhdG9yRXZlbnQsXG4gICAgICAgIGNvbGxpc2lvbnMsXG4gICAgICAgIGRyb3BwYWJsZUNvbnRhaW5lcnMsXG4gICAgICAgIHNjcm9sbEFkanVzdGVkVHJhbnNsYXRlLFxuICAgICAgfSA9IHNlbnNvckNvbnRleHQuY3VycmVudDtcblxuICAgICAgaWYgKFxuICAgICAgICAhYWN0aXZlIHx8XG4gICAgICAgIGFjdGl2ZVJlZi5jdXJyZW50ID09IG51bGwgfHxcbiAgICAgICAgIWFjdGl2YXRvckV2ZW50IHx8XG4gICAgICAgICFzY3JvbGxBZGp1c3RlZFRyYW5zbGF0ZVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3Qge29uRHJhZ092ZXJ9ID0gbGF0ZXN0UHJvcHMuY3VycmVudDtcbiAgICAgIGNvbnN0IG92ZXJDb250YWluZXIgPSBkcm9wcGFibGVDb250YWluZXJzLmdldChvdmVySWQpO1xuICAgICAgY29uc3Qgb3ZlciA9XG4gICAgICAgIG92ZXJDb250YWluZXIgJiYgb3ZlckNvbnRhaW5lci5yZWN0LmN1cnJlbnRcbiAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgaWQ6IG92ZXJDb250YWluZXIuaWQsXG4gICAgICAgICAgICAgIHJlY3Q6IG92ZXJDb250YWluZXIucmVjdC5jdXJyZW50LFxuICAgICAgICAgICAgICBkYXRhOiBvdmVyQ29udGFpbmVyLmRhdGEsXG4gICAgICAgICAgICAgIGRpc2FibGVkOiBvdmVyQ29udGFpbmVyLmRpc2FibGVkLFxuICAgICAgICAgICAgfVxuICAgICAgICAgIDogbnVsbDtcbiAgICAgIGNvbnN0IGV2ZW50OiBEcmFnT3ZlckV2ZW50ID0ge1xuICAgICAgICBhY3RpdmUsXG4gICAgICAgIGFjdGl2YXRvckV2ZW50LFxuICAgICAgICBjb2xsaXNpb25zLFxuICAgICAgICBkZWx0YToge1xuICAgICAgICAgIHg6IHNjcm9sbEFkanVzdGVkVHJhbnNsYXRlLngsXG4gICAgICAgICAgeTogc2Nyb2xsQWRqdXN0ZWRUcmFuc2xhdGUueSxcbiAgICAgICAgfSxcbiAgICAgICAgb3ZlcixcbiAgICAgIH07XG5cbiAgICAgIHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzKCgpID0+IHtcbiAgICAgICAgc2V0T3ZlcihvdmVyKTtcbiAgICAgICAgb25EcmFnT3Zlcj8uKGV2ZW50KTtcbiAgICAgICAgZGlzcGF0Y2hNb25pdG9yRXZlbnQoe3R5cGU6ICdvbkRyYWdPdmVyJywgZXZlbnR9KTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICAgIFtvdmVySWRdXG4gICk7XG5cbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgc2Vuc29yQ29udGV4dC5jdXJyZW50ID0ge1xuICAgICAgYWN0aXZhdG9yRXZlbnQsXG4gICAgICBhY3RpdmUsXG4gICAgICBhY3RpdmVOb2RlLFxuICAgICAgY29sbGlzaW9uUmVjdCxcbiAgICAgIGNvbGxpc2lvbnMsXG4gICAgICBkcm9wcGFibGVSZWN0cyxcbiAgICAgIGRyYWdnYWJsZU5vZGVzLFxuICAgICAgZHJhZ2dpbmdOb2RlLFxuICAgICAgZHJhZ2dpbmdOb2RlUmVjdCxcbiAgICAgIGRyb3BwYWJsZUNvbnRhaW5lcnMsXG4gICAgICBvdmVyLFxuICAgICAgc2Nyb2xsYWJsZUFuY2VzdG9ycyxcbiAgICAgIHNjcm9sbEFkanVzdGVkVHJhbnNsYXRlLFxuICAgIH07XG5cbiAgICBhY3RpdmVSZWN0cy5jdXJyZW50ID0ge1xuICAgICAgaW5pdGlhbDogZHJhZ2dpbmdOb2RlUmVjdCxcbiAgICAgIHRyYW5zbGF0ZWQ6IGNvbGxpc2lvblJlY3QsXG4gICAgfTtcbiAgfSwgW1xuICAgIGFjdGl2ZSxcbiAgICBhY3RpdmVOb2RlLFxuICAgIGNvbGxpc2lvbnMsXG4gICAgY29sbGlzaW9uUmVjdCxcbiAgICBkcmFnZ2FibGVOb2RlcyxcbiAgICBkcmFnZ2luZ05vZGUsXG4gICAgZHJhZ2dpbmdOb2RlUmVjdCxcbiAgICBkcm9wcGFibGVSZWN0cyxcbiAgICBkcm9wcGFibGVDb250YWluZXJzLFxuICAgIG92ZXIsXG4gICAgc2Nyb2xsYWJsZUFuY2VzdG9ycyxcbiAgICBzY3JvbGxBZGp1c3RlZFRyYW5zbGF0ZSxcbiAgXSk7XG5cbiAgdXNlQXV0b1Njcm9sbGVyKHtcbiAgICAuLi5hdXRvU2Nyb2xsT3B0aW9ucyxcbiAgICBkZWx0YTogdHJhbnNsYXRlLFxuICAgIGRyYWdnaW5nUmVjdDogY29sbGlzaW9uUmVjdCxcbiAgICBwb2ludGVyQ29vcmRpbmF0ZXMsXG4gICAgc2Nyb2xsYWJsZUFuY2VzdG9ycyxcbiAgICBzY3JvbGxhYmxlQW5jZXN0b3JSZWN0cyxcbiAgfSk7XG5cbiAgY29uc3QgcHVibGljQ29udGV4dCA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIGNvbnN0IGNvbnRleHQ6IFB1YmxpY0NvbnRleHREZXNjcmlwdG9yID0ge1xuICAgICAgYWN0aXZlLFxuICAgICAgYWN0aXZlTm9kZSxcbiAgICAgIGFjdGl2ZU5vZGVSZWN0LFxuICAgICAgYWN0aXZhdG9yRXZlbnQsXG4gICAgICBjb2xsaXNpb25zLFxuICAgICAgY29udGFpbmVyTm9kZVJlY3QsXG4gICAgICBkcmFnT3ZlcmxheSxcbiAgICAgIGRyYWdnYWJsZU5vZGVzLFxuICAgICAgZHJvcHBhYmxlQ29udGFpbmVycyxcbiAgICAgIGRyb3BwYWJsZVJlY3RzLFxuICAgICAgb3ZlcixcbiAgICAgIG1lYXN1cmVEcm9wcGFibGVDb250YWluZXJzLFxuICAgICAgc2Nyb2xsYWJsZUFuY2VzdG9ycyxcbiAgICAgIHNjcm9sbGFibGVBbmNlc3RvclJlY3RzLFxuICAgICAgbWVhc3VyaW5nQ29uZmlndXJhdGlvbixcbiAgICAgIG1lYXN1cmluZ1NjaGVkdWxlZCxcbiAgICAgIHdpbmRvd1JlY3QsXG4gICAgfTtcblxuICAgIHJldHVybiBjb250ZXh0O1xuICB9LCBbXG4gICAgYWN0aXZlLFxuICAgIGFjdGl2ZU5vZGUsXG4gICAgYWN0aXZlTm9kZVJlY3QsXG4gICAgYWN0aXZhdG9yRXZlbnQsXG4gICAgY29sbGlzaW9ucyxcbiAgICBjb250YWluZXJOb2RlUmVjdCxcbiAgICBkcmFnT3ZlcmxheSxcbiAgICBkcmFnZ2FibGVOb2RlcyxcbiAgICBkcm9wcGFibGVDb250YWluZXJzLFxuICAgIGRyb3BwYWJsZVJlY3RzLFxuICAgIG92ZXIsXG4gICAgbWVhc3VyZURyb3BwYWJsZUNvbnRhaW5lcnMsXG4gICAgc2Nyb2xsYWJsZUFuY2VzdG9ycyxcbiAgICBzY3JvbGxhYmxlQW5jZXN0b3JSZWN0cyxcbiAgICBtZWFzdXJpbmdDb25maWd1cmF0aW9uLFxuICAgIG1lYXN1cmluZ1NjaGVkdWxlZCxcbiAgICB3aW5kb3dSZWN0LFxuICBdKTtcblxuICBjb25zdCBpbnRlcm5hbENvbnRleHQgPSB1c2VNZW1vKCgpID0+IHtcbiAgICBjb25zdCBjb250ZXh0OiBJbnRlcm5hbENvbnRleHREZXNjcmlwdG9yID0ge1xuICAgICAgYWN0aXZhdG9yRXZlbnQsXG4gICAgICBhY3RpdmF0b3JzLFxuICAgICAgYWN0aXZlLFxuICAgICAgYWN0aXZlTm9kZVJlY3QsXG4gICAgICBhcmlhRGVzY3JpYmVkQnlJZDoge1xuICAgICAgICBkcmFnZ2FibGU6IGRyYWdnYWJsZURlc2NyaWJlZEJ5SWQsXG4gICAgICB9LFxuICAgICAgZGlzcGF0Y2gsXG4gICAgICBkcmFnZ2FibGVOb2RlcyxcbiAgICAgIG92ZXIsXG4gICAgICBtZWFzdXJlRHJvcHBhYmxlQ29udGFpbmVycyxcbiAgICB9O1xuXG4gICAgcmV0dXJuIGNvbnRleHQ7XG4gIH0sIFtcbiAgICBhY3RpdmF0b3JFdmVudCxcbiAgICBhY3RpdmF0b3JzLFxuICAgIGFjdGl2ZSxcbiAgICBhY3RpdmVOb2RlUmVjdCxcbiAgICBkaXNwYXRjaCxcbiAgICBkcmFnZ2FibGVEZXNjcmliZWRCeUlkLFxuICAgIGRyYWdnYWJsZU5vZGVzLFxuICAgIG92ZXIsXG4gICAgbWVhc3VyZURyb3BwYWJsZUNvbnRhaW5lcnMsXG4gIF0pO1xuXG4gIHJldHVybiAoXG4gICAgPERuZE1vbml0b3JDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXtyZWdpc3Rlck1vbml0b3JMaXN0ZW5lcn0+XG4gICAgICA8SW50ZXJuYWxDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXtpbnRlcm5hbENvbnRleHR9PlxuICAgICAgICA8UHVibGljQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17cHVibGljQ29udGV4dH0+XG4gICAgICAgICAgPEFjdGl2ZURyYWdnYWJsZUNvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3RyYW5zZm9ybX0+XG4gICAgICAgICAgICB7Y2hpbGRyZW59XG4gICAgICAgICAgPC9BY3RpdmVEcmFnZ2FibGVDb250ZXh0LlByb3ZpZGVyPlxuICAgICAgICA8L1B1YmxpY0NvbnRleHQuUHJvdmlkZXI+XG4gICAgICAgIDxSZXN0b3JlRm9jdXMgZGlzYWJsZWQ9e2FjY2Vzc2liaWxpdHk/LnJlc3RvcmVGb2N1cyA9PT0gZmFsc2V9IC8+XG4gICAgICA8L0ludGVybmFsQ29udGV4dC5Qcm92aWRlcj5cbiAgICAgIDxBY2Nlc3NpYmlsaXR5XG4gICAgICAgIHsuLi5hY2Nlc3NpYmlsaXR5fVxuICAgICAgICBoaWRkZW5UZXh0RGVzY3JpYmVkQnlJZD17ZHJhZ2dhYmxlRGVzY3JpYmVkQnlJZH1cbiAgICAgIC8+XG4gICAgPC9EbmRNb25pdG9yQ29udGV4dC5Qcm92aWRlcj5cbiAgKTtcblxuICBmdW5jdGlvbiBnZXRBdXRvU2Nyb2xsZXJPcHRpb25zKCkge1xuICAgIGNvbnN0IGFjdGl2ZVNlbnNvckRpc2FibGVzQXV0b3Njcm9sbCA9XG4gICAgICBhY3RpdmVTZW5zb3I/LmF1dG9TY3JvbGxFbmFibGVkID09PSBmYWxzZTtcbiAgICBjb25zdCBhdXRvU2Nyb2xsR2xvYmFsbHlEaXNhYmxlZCA9XG4gICAgICB0eXBlb2YgYXV0b1Njcm9sbCA9PT0gJ29iamVjdCdcbiAgICAgICAgPyBhdXRvU2Nyb2xsLmVuYWJsZWQgPT09IGZhbHNlXG4gICAgICAgIDogYXV0b1Njcm9sbCA9PT0gZmFsc2U7XG4gICAgY29uc3QgZW5hYmxlZCA9XG4gICAgICBpc0luaXRpYWxpemVkICYmXG4gICAgICAhYWN0aXZlU2Vuc29yRGlzYWJsZXNBdXRvc2Nyb2xsICYmXG4gICAgICAhYXV0b1Njcm9sbEdsb2JhbGx5RGlzYWJsZWQ7XG5cbiAgICBpZiAodHlwZW9mIGF1dG9TY3JvbGwgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5hdXRvU2Nyb2xsLFxuICAgICAgICBlbmFibGVkLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4ge2VuYWJsZWR9O1xuICB9XG59KTtcbiIsImltcG9ydCB7Y3JlYXRlQ29udGV4dCwgdXNlQ29udGV4dCwgdXNlTWVtb30gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtcbiAgVHJhbnNmb3JtLFxuICB1c2VOb2RlUmVmLFxuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0LFxuICB1c2VMYXRlc3RWYWx1ZSxcbiAgdXNlVW5pcXVlSWQsXG59IGZyb20gJ0BkbmQta2l0L3V0aWxpdGllcyc7XG5cbmltcG9ydCB7SW50ZXJuYWxDb250ZXh0LCBEYXRhfSBmcm9tICcuLi9zdG9yZSc7XG5pbXBvcnQgdHlwZSB7VW5pcXVlSWRlbnRpZmllcn0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHtBY3RpdmVEcmFnZ2FibGVDb250ZXh0fSBmcm9tICcuLi9jb21wb25lbnRzL0RuZENvbnRleHQnO1xuaW1wb3J0IHt1c2VTeW50aGV0aWNMaXN0ZW5lcnMsIFN5bnRoZXRpY0xpc3RlbmVyTWFwfSBmcm9tICcuL3V0aWxpdGllcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlRHJhZ2dhYmxlQXJndW1lbnRzIHtcbiAgaWQ6IFVuaXF1ZUlkZW50aWZpZXI7XG4gIGRhdGE/OiBEYXRhO1xuICBkaXNhYmxlZD86IGJvb2xlYW47XG4gIGF0dHJpYnV0ZXM/OiB7XG4gICAgcm9sZT86IHN0cmluZztcbiAgICByb2xlRGVzY3JpcHRpb24/OiBzdHJpbmc7XG4gICAgdGFiSW5kZXg/OiBudW1iZXI7XG4gIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRHJhZ2dhYmxlQXR0cmlidXRlcyB7XG4gIHJvbGU6IHN0cmluZztcbiAgdGFiSW5kZXg6IG51bWJlcjtcbiAgJ2FyaWEtZGlzYWJsZWQnOiBib29sZWFuO1xuICAnYXJpYS1wcmVzc2VkJzogYm9vbGVhbiB8IHVuZGVmaW5lZDtcbiAgJ2FyaWEtcm9sZWRlc2NyaXB0aW9uJzogc3RyaW5nO1xuICAnYXJpYS1kZXNjcmliZWRieSc6IHN0cmluZztcbn1cblxuZXhwb3J0IHR5cGUgRHJhZ2dhYmxlU3ludGhldGljTGlzdGVuZXJzID0gU3ludGhldGljTGlzdGVuZXJNYXAgfCB1bmRlZmluZWQ7XG5cbmNvbnN0IE51bGxDb250ZXh0ID0gY3JlYXRlQ29udGV4dDxhbnk+KG51bGwpO1xuXG5jb25zdCBkZWZhdWx0Um9sZSA9ICdidXR0b24nO1xuXG5jb25zdCBJRF9QUkVGSVggPSAnRHJhZ2dhYmxlJztcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZURyYWdnYWJsZSh7XG4gIGlkLFxuICBkYXRhLFxuICBkaXNhYmxlZCA9IGZhbHNlLFxuICBhdHRyaWJ1dGVzLFxufTogVXNlRHJhZ2dhYmxlQXJndW1lbnRzKSB7XG4gIGNvbnN0IGtleSA9IHVzZVVuaXF1ZUlkKElEX1BSRUZJWCk7XG4gIGNvbnN0IHtcbiAgICBhY3RpdmF0b3JzLFxuICAgIGFjdGl2YXRvckV2ZW50LFxuICAgIGFjdGl2ZSxcbiAgICBhY3RpdmVOb2RlUmVjdCxcbiAgICBhcmlhRGVzY3JpYmVkQnlJZCxcbiAgICBkcmFnZ2FibGVOb2RlcyxcbiAgICBvdmVyLFxuICB9ID0gdXNlQ29udGV4dChJbnRlcm5hbENvbnRleHQpO1xuICBjb25zdCB7XG4gICAgcm9sZSA9IGRlZmF1bHRSb2xlLFxuICAgIHJvbGVEZXNjcmlwdGlvbiA9ICdkcmFnZ2FibGUnLFxuICAgIHRhYkluZGV4ID0gMCxcbiAgfSA9IGF0dHJpYnV0ZXMgPz8ge307XG4gIGNvbnN0IGlzRHJhZ2dpbmcgPSBhY3RpdmU/LmlkID09PSBpZDtcbiAgY29uc3QgdHJhbnNmb3JtOiBUcmFuc2Zvcm0gfCBudWxsID0gdXNlQ29udGV4dChcbiAgICBpc0RyYWdnaW5nID8gQWN0aXZlRHJhZ2dhYmxlQ29udGV4dCA6IE51bGxDb250ZXh0XG4gICk7XG4gIGNvbnN0IFtub2RlLCBzZXROb2RlUmVmXSA9IHVzZU5vZGVSZWYoKTtcbiAgY29uc3QgW2FjdGl2YXRvck5vZGUsIHNldEFjdGl2YXRvck5vZGVSZWZdID0gdXNlTm9kZVJlZigpO1xuICBjb25zdCBsaXN0ZW5lcnMgPSB1c2VTeW50aGV0aWNMaXN0ZW5lcnMoYWN0aXZhdG9ycywgaWQpO1xuICBjb25zdCBkYXRhUmVmID0gdXNlTGF0ZXN0VmFsdWUoZGF0YSk7XG5cbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChcbiAgICAoKSA9PiB7XG4gICAgICBkcmFnZ2FibGVOb2Rlcy5zZXQoaWQsIHtpZCwga2V5LCBub2RlLCBhY3RpdmF0b3JOb2RlLCBkYXRhOiBkYXRhUmVmfSk7XG5cbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGNvbnN0IG5vZGUgPSBkcmFnZ2FibGVOb2Rlcy5nZXQoaWQpO1xuXG4gICAgICAgIGlmIChub2RlICYmIG5vZGUua2V5ID09PSBrZXkpIHtcbiAgICAgICAgICBkcmFnZ2FibGVOb2Rlcy5kZWxldGUoaWQpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0sXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICAgIFtkcmFnZ2FibGVOb2RlcywgaWRdXG4gICk7XG5cbiAgY29uc3QgbWVtb2l6ZWRBdHRyaWJ1dGVzOiBEcmFnZ2FibGVBdHRyaWJ1dGVzID0gdXNlTWVtbyhcbiAgICAoKSA9PiAoe1xuICAgICAgcm9sZSxcbiAgICAgIHRhYkluZGV4LFxuICAgICAgJ2FyaWEtZGlzYWJsZWQnOiBkaXNhYmxlZCxcbiAgICAgICdhcmlhLXByZXNzZWQnOiBpc0RyYWdnaW5nICYmIHJvbGUgPT09IGRlZmF1bHRSb2xlID8gdHJ1ZSA6IHVuZGVmaW5lZCxcbiAgICAgICdhcmlhLXJvbGVkZXNjcmlwdGlvbic6IHJvbGVEZXNjcmlwdGlvbixcbiAgICAgICdhcmlhLWRlc2NyaWJlZGJ5JzogYXJpYURlc2NyaWJlZEJ5SWQuZHJhZ2dhYmxlLFxuICAgIH0pLFxuICAgIFtcbiAgICAgIGRpc2FibGVkLFxuICAgICAgcm9sZSxcbiAgICAgIHRhYkluZGV4LFxuICAgICAgaXNEcmFnZ2luZyxcbiAgICAgIHJvbGVEZXNjcmlwdGlvbixcbiAgICAgIGFyaWFEZXNjcmliZWRCeUlkLmRyYWdnYWJsZSxcbiAgICBdXG4gICk7XG5cbiAgcmV0dXJuIHtcbiAgICBhY3RpdmUsXG4gICAgYWN0aXZhdG9yRXZlbnQsXG4gICAgYWN0aXZlTm9kZVJlY3QsXG4gICAgYXR0cmlidXRlczogbWVtb2l6ZWRBdHRyaWJ1dGVzLFxuICAgIGlzRHJhZ2dpbmcsXG4gICAgbGlzdGVuZXJzOiBkaXNhYmxlZCA/IHVuZGVmaW5lZCA6IGxpc3RlbmVycyxcbiAgICBub2RlLFxuICAgIG92ZXIsXG4gICAgc2V0Tm9kZVJlZixcbiAgICBzZXRBY3RpdmF0b3JOb2RlUmVmLFxuICAgIHRyYW5zZm9ybSxcbiAgfTtcbn1cbiIsImltcG9ydCB7Q29udGV4dFR5cGUsIHVzZUNvbnRleHR9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7UHVibGljQ29udGV4dH0gZnJvbSAnLi4vc3RvcmUnO1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlRG5kQ29udGV4dCgpIHtcbiAgcmV0dXJuIHVzZUNvbnRleHQoUHVibGljQ29udGV4dCk7XG59XG5cbmV4cG9ydCB0eXBlIFVzZURuZENvbnRleHRSZXR1cm5WYWx1ZSA9IENvbnRleHRUeXBlPHR5cGVvZiBQdWJsaWNDb250ZXh0PjtcbiIsImltcG9ydCB7dXNlQ2FsbGJhY2ssIHVzZUNvbnRleHQsIHVzZUVmZmVjdCwgdXNlUmVmfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQge3VzZUxhdGVzdFZhbHVlLCB1c2VOb2RlUmVmLCB1c2VVbmlxdWVJZH0gZnJvbSAnQGRuZC1raXQvdXRpbGl0aWVzJztcblxuaW1wb3J0IHtJbnRlcm5hbENvbnRleHQsIEFjdGlvbiwgRGF0YX0gZnJvbSAnLi4vc3RvcmUnO1xuaW1wb3J0IHR5cGUge0NsaWVudFJlY3QsIFVuaXF1ZUlkZW50aWZpZXJ9IGZyb20gJy4uL3R5cGVzJztcblxuaW1wb3J0IHt1c2VSZXNpemVPYnNlcnZlcn0gZnJvbSAnLi91dGlsaXRpZXMnO1xuXG5pbnRlcmZhY2UgUmVzaXplT2JzZXJ2ZXJDb25maWcge1xuICAvKiogV2hldGhlciB0aGUgUmVzaXplT2JzZXJ2ZXIgc2hvdWxkIGJlIGRpc2FibGVkIGVudGlyZWx5ICovXG4gIGRpc2FibGVkPzogYm9vbGVhbjtcbiAgLyoqIFJlc2l6ZSBldmVudHMgbWF5IGFmZmVjdCB0aGUgbGF5b3V0IGFuZCBwb3NpdGlvbiBvZiBvdGhlciBkcm9wcGFibGUgY29udGFpbmVycy5cbiAgICogU3BlY2lmeSBhbiBhcnJheSBvZiBgVW5pcXVlSWRlbnRpZmllcmAgb2YgZHJvcHBhYmxlIGNvbnRhaW5lcnMgdGhhdCBzaG91bGQgYWxzbyBiZSByZS1tZWFzdXJlZFxuICAgKiB3aGVuIHRoaXMgZHJvcHBhYmxlIGNvbnRhaW5lciByZXNpemVzLiBTcGVjaWZ5aW5nIGFuIGVtcHR5IGFycmF5IHJlLW1lYXN1cmVzIGFsbCBkcm9wcGFibGUgY29udGFpbmVycy5cbiAgICovXG4gIHVwZGF0ZU1lYXN1cmVtZW50c0Zvcj86IFVuaXF1ZUlkZW50aWZpZXJbXTtcbiAgLyoqIFJlcHJlc2VudHMgdGhlIGRlYm91bmNlIHRpbWVvdXQgYmV0d2VlbiB3aGVuIHJlc2l6ZSBldmVudHMgYXJlIG9ic2VydmVkIGFuZCB3aGVuIGVsZW1lbnRzIGFyZSByZS1tZWFzdXJlZCAqL1xuICB0aW1lb3V0PzogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFVzZURyb3BwYWJsZUFyZ3VtZW50cyB7XG4gIGlkOiBVbmlxdWVJZGVudGlmaWVyO1xuICBkaXNhYmxlZD86IGJvb2xlYW47XG4gIGRhdGE/OiBEYXRhO1xuICByZXNpemVPYnNlcnZlckNvbmZpZz86IFJlc2l6ZU9ic2VydmVyQ29uZmlnO1xufVxuXG5jb25zdCBJRF9QUkVGSVggPSAnRHJvcHBhYmxlJztcblxuY29uc3QgZGVmYXVsdFJlc2l6ZU9ic2VydmVyQ29uZmlnID0ge1xuICB0aW1lb3V0OiAyNSxcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VEcm9wcGFibGUoe1xuICBkYXRhLFxuICBkaXNhYmxlZCA9IGZhbHNlLFxuICBpZCxcbiAgcmVzaXplT2JzZXJ2ZXJDb25maWcsXG59OiBVc2VEcm9wcGFibGVBcmd1bWVudHMpIHtcbiAgY29uc3Qga2V5ID0gdXNlVW5pcXVlSWQoSURfUFJFRklYKTtcbiAgY29uc3Qge2FjdGl2ZSwgZGlzcGF0Y2gsIG92ZXIsIG1lYXN1cmVEcm9wcGFibGVDb250YWluZXJzfSA9XG4gICAgdXNlQ29udGV4dChJbnRlcm5hbENvbnRleHQpO1xuICBjb25zdCBwcmV2aW91cyA9IHVzZVJlZih7ZGlzYWJsZWR9KTtcbiAgY29uc3QgcmVzaXplT2JzZXJ2ZXJDb25uZWN0ZWQgPSB1c2VSZWYoZmFsc2UpO1xuICBjb25zdCByZWN0ID0gdXNlUmVmPENsaWVudFJlY3QgfCBudWxsPihudWxsKTtcbiAgY29uc3QgY2FsbGJhY2tJZCA9IHVzZVJlZjxOb2RlSlMuVGltZW91dCB8IG51bGw+KG51bGwpO1xuICBjb25zdCB7XG4gICAgZGlzYWJsZWQ6IHJlc2l6ZU9ic2VydmVyRGlzYWJsZWQsXG4gICAgdXBkYXRlTWVhc3VyZW1lbnRzRm9yLFxuICAgIHRpbWVvdXQ6IHJlc2l6ZU9ic2VydmVyVGltZW91dCxcbiAgfSA9IHtcbiAgICAuLi5kZWZhdWx0UmVzaXplT2JzZXJ2ZXJDb25maWcsXG4gICAgLi4ucmVzaXplT2JzZXJ2ZXJDb25maWcsXG4gIH07XG4gIGNvbnN0IGlkcyA9IHVzZUxhdGVzdFZhbHVlKHVwZGF0ZU1lYXN1cmVtZW50c0ZvciA/PyBpZCk7XG4gIGNvbnN0IGhhbmRsZVJlc2l6ZSA9IHVzZUNhbGxiYWNrKFxuICAgICgpID0+IHtcbiAgICAgIGlmICghcmVzaXplT2JzZXJ2ZXJDb25uZWN0ZWQuY3VycmVudCkge1xuICAgICAgICAvLyBSZXNpemVPYnNlcnZlciBpbnZva2VzIHRoZSBgaGFuZGxlUmVzaXplYCBjYWxsYmFjayBhcyBzb29uIGFzIGBvYnNlcnZlYCBpcyBjYWxsZWQsXG4gICAgICAgIC8vIGFzc3VtaW5nIHRoZSBlbGVtZW50IGlzIHJlbmRlcmVkIGFuZCBkaXNwbGF5ZWQuXG4gICAgICAgIHJlc2l6ZU9ic2VydmVyQ29ubmVjdGVkLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChjYWxsYmFja0lkLmN1cnJlbnQgIT0gbnVsbCkge1xuICAgICAgICBjbGVhclRpbWVvdXQoY2FsbGJhY2tJZC5jdXJyZW50KTtcbiAgICAgIH1cblxuICAgICAgY2FsbGJhY2tJZC5jdXJyZW50ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIG1lYXN1cmVEcm9wcGFibGVDb250YWluZXJzKFxuICAgICAgICAgIEFycmF5LmlzQXJyYXkoaWRzLmN1cnJlbnQpID8gaWRzLmN1cnJlbnQgOiBbaWRzLmN1cnJlbnRdXG4gICAgICAgICk7XG4gICAgICAgIGNhbGxiYWNrSWQuY3VycmVudCA9IG51bGw7XG4gICAgICB9LCByZXNpemVPYnNlcnZlclRpbWVvdXQpO1xuICAgIH0sXG4gICAgLy9lc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gICAgW3Jlc2l6ZU9ic2VydmVyVGltZW91dF1cbiAgKTtcbiAgY29uc3QgcmVzaXplT2JzZXJ2ZXIgPSB1c2VSZXNpemVPYnNlcnZlcih7XG4gICAgY2FsbGJhY2s6IGhhbmRsZVJlc2l6ZSxcbiAgICBkaXNhYmxlZDogcmVzaXplT2JzZXJ2ZXJEaXNhYmxlZCB8fCAhYWN0aXZlLFxuICB9KTtcbiAgY29uc3QgaGFuZGxlTm9kZUNoYW5nZSA9IHVzZUNhbGxiYWNrKFxuICAgIChuZXdFbGVtZW50OiBIVE1MRWxlbWVudCB8IG51bGwsIHByZXZpb3VzRWxlbWVudDogSFRNTEVsZW1lbnQgfCBudWxsKSA9PiB7XG4gICAgICBpZiAoIXJlc2l6ZU9ic2VydmVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHByZXZpb3VzRWxlbWVudCkge1xuICAgICAgICByZXNpemVPYnNlcnZlci51bm9ic2VydmUocHJldmlvdXNFbGVtZW50KTtcbiAgICAgICAgcmVzaXplT2JzZXJ2ZXJDb25uZWN0ZWQuY3VycmVudCA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAobmV3RWxlbWVudCkge1xuICAgICAgICByZXNpemVPYnNlcnZlci5vYnNlcnZlKG5ld0VsZW1lbnQpO1xuICAgICAgfVxuICAgIH0sXG4gICAgW3Jlc2l6ZU9ic2VydmVyXVxuICApO1xuICBjb25zdCBbbm9kZVJlZiwgc2V0Tm9kZVJlZl0gPSB1c2VOb2RlUmVmKGhhbmRsZU5vZGVDaGFuZ2UpO1xuICBjb25zdCBkYXRhUmVmID0gdXNlTGF0ZXN0VmFsdWUoZGF0YSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIXJlc2l6ZU9ic2VydmVyIHx8ICFub2RlUmVmLmN1cnJlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByZXNpemVPYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgcmVzaXplT2JzZXJ2ZXJDb25uZWN0ZWQuY3VycmVudCA9IGZhbHNlO1xuICAgIHJlc2l6ZU9ic2VydmVyLm9ic2VydmUobm9kZVJlZi5jdXJyZW50KTtcbiAgfSwgW25vZGVSZWYsIHJlc2l6ZU9ic2VydmVyXSk7XG5cbiAgdXNlRWZmZWN0KFxuICAgICgpID0+IHtcbiAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgdHlwZTogQWN0aW9uLlJlZ2lzdGVyRHJvcHBhYmxlLFxuICAgICAgICBlbGVtZW50OiB7XG4gICAgICAgICAgaWQsXG4gICAgICAgICAga2V5LFxuICAgICAgICAgIGRpc2FibGVkLFxuICAgICAgICAgIG5vZGU6IG5vZGVSZWYsXG4gICAgICAgICAgcmVjdCxcbiAgICAgICAgICBkYXRhOiBkYXRhUmVmLFxuICAgICAgICB9LFxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiAoKSA9PlxuICAgICAgICBkaXNwYXRjaCh7XG4gICAgICAgICAgdHlwZTogQWN0aW9uLlVucmVnaXN0ZXJEcm9wcGFibGUsXG4gICAgICAgICAga2V5LFxuICAgICAgICAgIGlkLFxuICAgICAgICB9KTtcbiAgICB9LFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgICBbaWRdXG4gICk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoZGlzYWJsZWQgIT09IHByZXZpb3VzLmN1cnJlbnQuZGlzYWJsZWQpIHtcbiAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgdHlwZTogQWN0aW9uLlNldERyb3BwYWJsZURpc2FibGVkLFxuICAgICAgICBpZCxcbiAgICAgICAga2V5LFxuICAgICAgICBkaXNhYmxlZCxcbiAgICAgIH0pO1xuXG4gICAgICBwcmV2aW91cy5jdXJyZW50LmRpc2FibGVkID0gZGlzYWJsZWQ7XG4gICAgfVxuICB9LCBbaWQsIGtleSwgZGlzYWJsZWQsIGRpc3BhdGNoXSk7XG5cbiAgcmV0dXJuIHtcbiAgICBhY3RpdmUsXG4gICAgcmVjdCxcbiAgICBpc092ZXI6IG92ZXI/LmlkID09PSBpZCxcbiAgICBub2RlOiBub2RlUmVmLFxuICAgIG92ZXIsXG4gICAgc2V0Tm9kZVJlZixcbiAgfTtcbn1cbiIsImltcG9ydCBSZWFjdCwge2Nsb25lRWxlbWVudCwgdXNlU3RhdGV9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7dXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCwgdXNlUHJldmlvdXN9IGZyb20gJ0BkbmQta2l0L3V0aWxpdGllcyc7XG5cbmltcG9ydCB0eXBlIHtVbmlxdWVJZGVudGlmaWVyfSBmcm9tICcuLi8uLi8uLi8uLi90eXBlcyc7XG5cbmV4cG9ydCB0eXBlIEFuaW1hdGlvbiA9IChcbiAga2V5OiBVbmlxdWVJZGVudGlmaWVyLFxuICBub2RlOiBIVE1MRWxlbWVudFxuKSA9PiBQcm9taXNlPHZvaWQ+IHwgdm9pZDtcblxuZXhwb3J0IGludGVyZmFjZSBQcm9wcyB7XG4gIGFuaW1hdGlvbjogQW5pbWF0aW9uO1xuICBjaGlsZHJlbjogUmVhY3QuUmVhY3RFbGVtZW50IHwgbnVsbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEFuaW1hdGlvbk1hbmFnZXIoe2FuaW1hdGlvbiwgY2hpbGRyZW59OiBQcm9wcykge1xuICBjb25zdCBbXG4gICAgY2xvbmVkQ2hpbGRyZW4sXG4gICAgc2V0Q2xvbmVkQ2hpbGRyZW4sXG4gIF0gPSB1c2VTdGF0ZTxSZWFjdC5SZWFjdEVsZW1lbnQgfCBudWxsPihudWxsKTtcbiAgY29uc3QgW2VsZW1lbnQsIHNldEVsZW1lbnRdID0gdXNlU3RhdGU8SFRNTEVsZW1lbnQgfCBudWxsPihudWxsKTtcbiAgY29uc3QgcHJldmlvdXNDaGlsZHJlbiA9IHVzZVByZXZpb3VzKGNoaWxkcmVuKTtcblxuICBpZiAoIWNoaWxkcmVuICYmICFjbG9uZWRDaGlsZHJlbiAmJiBwcmV2aW91c0NoaWxkcmVuKSB7XG4gICAgc2V0Q2xvbmVkQ2hpbGRyZW4ocHJldmlvdXNDaGlsZHJlbik7XG4gIH1cblxuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBrZXkgPSBjbG9uZWRDaGlsZHJlbj8ua2V5O1xuICAgIGNvbnN0IGlkID0gY2xvbmVkQ2hpbGRyZW4/LnByb3BzLmlkO1xuXG4gICAgaWYgKGtleSA9PSBudWxsIHx8IGlkID09IG51bGwpIHtcbiAgICAgIHNldENsb25lZENoaWxkcmVuKG51bGwpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIFByb21pc2UucmVzb2x2ZShhbmltYXRpb24oaWQsIGVsZW1lbnQpKS50aGVuKCgpID0+IHtcbiAgICAgIHNldENsb25lZENoaWxkcmVuKG51bGwpO1xuICAgIH0pO1xuICB9LCBbYW5pbWF0aW9uLCBjbG9uZWRDaGlsZHJlbiwgZWxlbWVudF0pO1xuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICAgIHtjbG9uZWRDaGlsZHJlbiA/IGNsb25lRWxlbWVudChjbG9uZWRDaGlsZHJlbiwge3JlZjogc2V0RWxlbWVudH0pIDogbnVsbH1cbiAgICA8Lz5cbiAgKTtcbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdHlwZSB7VHJhbnNmb3JtfSBmcm9tICdAZG5kLWtpdC91dGlsaXRpZXMnO1xuXG5pbXBvcnQge0ludGVybmFsQ29udGV4dCwgZGVmYXVsdEludGVybmFsQ29udGV4dH0gZnJvbSAnLi4vLi4vLi4vLi4vc3RvcmUnO1xuaW1wb3J0IHtBY3RpdmVEcmFnZ2FibGVDb250ZXh0fSBmcm9tICcuLi8uLi8uLi9EbmRDb250ZXh0JztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZTtcbn1cblxuY29uc3QgZGVmYXVsdFRyYW5zZm9ybTogVHJhbnNmb3JtID0ge1xuICB4OiAwLFxuICB5OiAwLFxuICBzY2FsZVg6IDEsXG4gIHNjYWxlWTogMSxcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBOdWxsaWZpZWRDb250ZXh0UHJvdmlkZXIoe2NoaWxkcmVufTogUHJvcHMpIHtcbiAgcmV0dXJuIChcbiAgICA8SW50ZXJuYWxDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXtkZWZhdWx0SW50ZXJuYWxDb250ZXh0fT5cbiAgICAgIDxBY3RpdmVEcmFnZ2FibGVDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXtkZWZhdWx0VHJhbnNmb3JtfT5cbiAgICAgICAge2NoaWxkcmVufVxuICAgICAgPC9BY3RpdmVEcmFnZ2FibGVDb250ZXh0LlByb3ZpZGVyPlxuICAgIDwvSW50ZXJuYWxDb250ZXh0LlByb3ZpZGVyPlxuICApO1xufVxuIiwiaW1wb3J0IFJlYWN0LCB7Zm9yd2FyZFJlZn0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtDU1MsIGlzS2V5Ym9hcmRFdmVudH0gZnJvbSAnQGRuZC1raXQvdXRpbGl0aWVzJztcblxuaW1wb3J0IHR5cGUge1RyYW5zZm9ybX0gZnJvbSAnQGRuZC1raXQvdXRpbGl0aWVzJztcblxuaW1wb3J0IHtnZXRSZWxhdGl2ZVRyYW5zZm9ybU9yaWdpbn0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbGl0aWVzJztcbmltcG9ydCB0eXBlIHtDbGllbnRSZWN0LCBVbmlxdWVJZGVudGlmaWVyfSBmcm9tICcuLi8uLi8uLi8uLi90eXBlcyc7XG5cbnR5cGUgVHJhbnNpdGlvbkdldHRlciA9IChcbiAgYWN0aXZhdG9yRXZlbnQ6IEV2ZW50IHwgbnVsbFxuKSA9PiBSZWFjdC5DU1NQcm9wZXJ0aWVzWyd0cmFuc2l0aW9uJ10gfCB1bmRlZmluZWQ7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUHJvcHMge1xuICBhczoga2V5b2YgSlNYLkludHJpbnNpY0VsZW1lbnRzO1xuICBhY3RpdmF0b3JFdmVudDogRXZlbnQgfCBudWxsO1xuICBhZGp1c3RTY2FsZT86IGJvb2xlYW47XG4gIGNoaWxkcmVuPzogUmVhY3QuUmVhY3ROb2RlO1xuICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gIGlkOiBVbmlxdWVJZGVudGlmaWVyO1xuICByZWN0OiBDbGllbnRSZWN0IHwgbnVsbDtcbiAgc3R5bGU/OiBSZWFjdC5DU1NQcm9wZXJ0aWVzO1xuICB0cmFuc2l0aW9uPzogc3RyaW5nIHwgVHJhbnNpdGlvbkdldHRlcjtcbiAgdHJhbnNmb3JtOiBUcmFuc2Zvcm07XG59XG5cbmNvbnN0IGJhc2VTdHlsZXM6IFJlYWN0LkNTU1Byb3BlcnRpZXMgPSB7XG4gIHBvc2l0aW9uOiAnZml4ZWQnLFxuICB0b3VjaEFjdGlvbjogJ25vbmUnLFxufTtcblxuY29uc3QgZGVmYXVsdFRyYW5zaXRpb246IFRyYW5zaXRpb25HZXR0ZXIgPSAoYWN0aXZhdG9yRXZlbnQpID0+IHtcbiAgY29uc3QgaXNLZXlib2FyZEFjdGl2YXRvciA9IGlzS2V5Ym9hcmRFdmVudChhY3RpdmF0b3JFdmVudCk7XG5cbiAgcmV0dXJuIGlzS2V5Ym9hcmRBY3RpdmF0b3IgPyAndHJhbnNmb3JtIDI1MG1zIGVhc2UnIDogdW5kZWZpbmVkO1xufTtcblxuZXhwb3J0IGNvbnN0IFBvc2l0aW9uZWRPdmVybGF5ID0gZm9yd2FyZFJlZjxIVE1MRWxlbWVudCwgUHJvcHM+KFxuICAoXG4gICAge1xuICAgICAgYXMsXG4gICAgICBhY3RpdmF0b3JFdmVudCxcbiAgICAgIGFkanVzdFNjYWxlLFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUsXG4gICAgICByZWN0LFxuICAgICAgc3R5bGUsXG4gICAgICB0cmFuc2Zvcm0sXG4gICAgICB0cmFuc2l0aW9uID0gZGVmYXVsdFRyYW5zaXRpb24sXG4gICAgfSxcbiAgICByZWZcbiAgKSA9PiB7XG4gICAgaWYgKCFyZWN0KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCBzY2FsZUFkanVzdGVkVHJhbnNmb3JtID0gYWRqdXN0U2NhbGVcbiAgICAgID8gdHJhbnNmb3JtXG4gICAgICA6IHtcbiAgICAgICAgICAuLi50cmFuc2Zvcm0sXG4gICAgICAgICAgc2NhbGVYOiAxLFxuICAgICAgICAgIHNjYWxlWTogMSxcbiAgICAgICAgfTtcbiAgICBjb25zdCBzdHlsZXM6IFJlYWN0LkNTU1Byb3BlcnRpZXMgfCB1bmRlZmluZWQgPSB7XG4gICAgICAuLi5iYXNlU3R5bGVzLFxuICAgICAgd2lkdGg6IHJlY3Qud2lkdGgsXG4gICAgICBoZWlnaHQ6IHJlY3QuaGVpZ2h0LFxuICAgICAgdG9wOiByZWN0LnRvcCxcbiAgICAgIGxlZnQ6IHJlY3QubGVmdCxcbiAgICAgIHRyYW5zZm9ybTogQ1NTLlRyYW5zZm9ybS50b1N0cmluZyhzY2FsZUFkanVzdGVkVHJhbnNmb3JtKSxcbiAgICAgIHRyYW5zZm9ybU9yaWdpbjpcbiAgICAgICAgYWRqdXN0U2NhbGUgJiYgYWN0aXZhdG9yRXZlbnRcbiAgICAgICAgICA/IGdldFJlbGF0aXZlVHJhbnNmb3JtT3JpZ2luKFxuICAgICAgICAgICAgICBhY3RpdmF0b3JFdmVudCBhcyBNb3VzZUV2ZW50IHwgS2V5Ym9hcmRFdmVudCB8IFRvdWNoRXZlbnQsXG4gICAgICAgICAgICAgIHJlY3RcbiAgICAgICAgICAgIClcbiAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgIHRyYW5zaXRpb246XG4gICAgICAgIHR5cGVvZiB0cmFuc2l0aW9uID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgPyB0cmFuc2l0aW9uKGFjdGl2YXRvckV2ZW50KVxuICAgICAgICAgIDogdHJhbnNpdGlvbixcbiAgICAgIC4uLnN0eWxlLFxuICAgIH07XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIGFzLFxuICAgICAge1xuICAgICAgICBjbGFzc05hbWUsXG4gICAgICAgIHN0eWxlOiBzdHlsZXMsXG4gICAgICAgIHJlZixcbiAgICAgIH0sXG4gICAgICBjaGlsZHJlblxuICAgICk7XG4gIH1cbik7XG4iLCJpbXBvcnQge0NTUywgdXNlRXZlbnQsIGdldFdpbmRvd30gZnJvbSAnQGRuZC1raXQvdXRpbGl0aWVzJztcbmltcG9ydCB0eXBlIHtEZWVwUmVxdWlyZWQsIFRyYW5zZm9ybX0gZnJvbSAnQGRuZC1raXQvdXRpbGl0aWVzJztcblxuaW1wb3J0IHR5cGUge1xuICBBY3RpdmUsXG4gIERyYWdnYWJsZU5vZGUsXG4gIERyYWdnYWJsZU5vZGVzLFxuICBEcm9wcGFibGVDb250YWluZXJzLFxufSBmcm9tICcuLi8uLi8uLi9zdG9yZSc7XG5pbXBvcnQgdHlwZSB7Q2xpZW50UmVjdCwgVW5pcXVlSWRlbnRpZmllcn0gZnJvbSAnLi4vLi4vLi4vdHlwZXMnO1xuaW1wb3J0IHtnZXRNZWFzdXJhYmxlTm9kZX0gZnJvbSAnLi4vLi4vLi4vdXRpbGl0aWVzL25vZGVzJztcbmltcG9ydCB7c2Nyb2xsSW50b1ZpZXdJZk5lZWRlZH0gZnJvbSAnLi4vLi4vLi4vdXRpbGl0aWVzL3Njcm9sbCc7XG5pbXBvcnQge3BhcnNlVHJhbnNmb3JtfSBmcm9tICcuLi8uLi8uLi91dGlsaXRpZXMvdHJhbnNmb3JtJztcbmltcG9ydCB0eXBlIHtNZWFzdXJpbmdDb25maWd1cmF0aW9ufSBmcm9tICcuLi8uLi9EbmRDb250ZXh0JztcbmltcG9ydCB0eXBlIHtBbmltYXRpb259IGZyb20gJy4uL2NvbXBvbmVudHMnO1xuXG5pbnRlcmZhY2UgU2hhcmVkUGFyYW1ldGVycyB7XG4gIGFjdGl2ZToge1xuICAgIGlkOiBVbmlxdWVJZGVudGlmaWVyO1xuICAgIGRhdGE6IEFjdGl2ZVsnZGF0YSddO1xuICAgIG5vZGU6IEhUTUxFbGVtZW50O1xuICAgIHJlY3Q6IENsaWVudFJlY3Q7XG4gIH07XG4gIGRyYWdPdmVybGF5OiB7XG4gICAgbm9kZTogSFRNTEVsZW1lbnQ7XG4gICAgcmVjdDogQ2xpZW50UmVjdDtcbiAgfTtcbiAgZHJhZ2dhYmxlTm9kZXM6IERyYWdnYWJsZU5vZGVzO1xuICBkcm9wcGFibGVDb250YWluZXJzOiBEcm9wcGFibGVDb250YWluZXJzO1xuICBtZWFzdXJpbmdDb25maWd1cmF0aW9uOiBEZWVwUmVxdWlyZWQ8TWVhc3VyaW5nQ29uZmlndXJhdGlvbj47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgS2V5ZnJhbWVSZXNvbHZlclBhcmFtZXRlcnMgZXh0ZW5kcyBTaGFyZWRQYXJhbWV0ZXJzIHtcbiAgdHJhbnNmb3JtOiB7XG4gICAgaW5pdGlhbDogVHJhbnNmb3JtO1xuICAgIGZpbmFsOiBUcmFuc2Zvcm07XG4gIH07XG59XG5cbmV4cG9ydCB0eXBlIEtleWZyYW1lUmVzb2x2ZXIgPSAoXG4gIHBhcmFtZXRlcnM6IEtleWZyYW1lUmVzb2x2ZXJQYXJhbWV0ZXJzXG4pID0+IEtleWZyYW1lW107XG5cbmV4cG9ydCBpbnRlcmZhY2UgRHJvcEFuaW1hdGlvbk9wdGlvbnMge1xuICBrZXlmcmFtZXM/OiBLZXlmcmFtZVJlc29sdmVyO1xuICBkdXJhdGlvbj86IG51bWJlcjtcbiAgZWFzaW5nPzogc3RyaW5nO1xuICBzaWRlRWZmZWN0cz86IERyb3BBbmltYXRpb25TaWRlRWZmZWN0cyB8IG51bGw7XG59XG5cbmV4cG9ydCB0eXBlIERyb3BBbmltYXRpb24gPSBEcm9wQW5pbWF0aW9uRnVuY3Rpb24gfCBEcm9wQW5pbWF0aW9uT3B0aW9ucztcblxuaW50ZXJmYWNlIEFyZ3VtZW50cyB7XG4gIGRyYWdnYWJsZU5vZGVzOiBEcmFnZ2FibGVOb2RlcztcbiAgZHJvcHBhYmxlQ29udGFpbmVyczogRHJvcHBhYmxlQ29udGFpbmVycztcbiAgbWVhc3VyaW5nQ29uZmlndXJhdGlvbjogRGVlcFJlcXVpcmVkPE1lYXN1cmluZ0NvbmZpZ3VyYXRpb24+O1xuICBjb25maWc/OiBEcm9wQW5pbWF0aW9uIHwgbnVsbDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBEcm9wQW5pbWF0aW9uRnVuY3Rpb25Bcmd1bWVudHMgZXh0ZW5kcyBTaGFyZWRQYXJhbWV0ZXJzIHtcbiAgdHJhbnNmb3JtOiBUcmFuc2Zvcm07XG59XG5cbmV4cG9ydCB0eXBlIERyb3BBbmltYXRpb25GdW5jdGlvbiA9IChcbiAgYXJnczogRHJvcEFuaW1hdGlvbkZ1bmN0aW9uQXJndW1lbnRzXG4pID0+IFByb21pc2U8dm9pZD4gfCB2b2lkO1xuXG50eXBlIENsZWFudXBGdW5jdGlvbiA9ICgpID0+IHZvaWQ7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRHJvcEFuaW1hdGlvblNpZGVFZmZlY3RzUGFyYW1ldGVycyBleHRlbmRzIFNoYXJlZFBhcmFtZXRlcnMge31cblxuZXhwb3J0IHR5cGUgRHJvcEFuaW1hdGlvblNpZGVFZmZlY3RzID0gKFxuICBwYXJhbWV0ZXJzOiBEcm9wQW5pbWF0aW9uU2lkZUVmZmVjdHNQYXJhbWV0ZXJzXG4pID0+IENsZWFudXBGdW5jdGlvbiB8IHZvaWQ7XG5cbnR5cGUgRXh0cmFjdFN0cmluZ1Byb3BlcnRpZXM8VD4gPSB7XG4gIFtLIGluIGtleW9mIFRdPzogVFtLXSBleHRlbmRzIHN0cmluZyA/IHN0cmluZyA6IG5ldmVyO1xufTtcblxudHlwZSBTdHlsZXMgPSBFeHRyYWN0U3RyaW5nUHJvcGVydGllczxDU1NTdHlsZURlY2xhcmF0aW9uPjtcblxuaW50ZXJmYWNlIERlZmF1bHREcm9wQW5pbWF0aW9uU2lkZUVmZmVjdHNPcHRpb25zIHtcbiAgY2xhc3NOYW1lPzoge1xuICAgIGFjdGl2ZT86IHN0cmluZztcbiAgICBkcmFnT3ZlcmxheT86IHN0cmluZztcbiAgfTtcbiAgc3R5bGVzPzoge1xuICAgIGFjdGl2ZT86IFN0eWxlcztcbiAgICBkcmFnT3ZlcmxheT86IFN0eWxlcztcbiAgfTtcbn1cblxuZXhwb3J0IGNvbnN0IGRlZmF1bHREcm9wQW5pbWF0aW9uU2lkZUVmZmVjdHMgPSAoXG4gIG9wdGlvbnM6IERlZmF1bHREcm9wQW5pbWF0aW9uU2lkZUVmZmVjdHNPcHRpb25zXG4pOiBEcm9wQW5pbWF0aW9uU2lkZUVmZmVjdHMgPT4gKHthY3RpdmUsIGRyYWdPdmVybGF5fSkgPT4ge1xuICBjb25zdCBvcmlnaW5hbFN0eWxlczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHt9O1xuICBjb25zdCB7c3R5bGVzLCBjbGFzc05hbWV9ID0gb3B0aW9ucztcblxuICBpZiAoc3R5bGVzPy5hY3RpdmUpIHtcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhzdHlsZXMuYWN0aXZlKSkge1xuICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIG9yaWdpbmFsU3R5bGVzW2tleV0gPSBhY3RpdmUubm9kZS5zdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKGtleSk7XG4gICAgICBhY3RpdmUubm9kZS5zdHlsZS5zZXRQcm9wZXJ0eShrZXksIHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICBpZiAoc3R5bGVzPy5kcmFnT3ZlcmxheSkge1xuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHN0eWxlcy5kcmFnT3ZlcmxheSkpIHtcbiAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBkcmFnT3ZlcmxheS5ub2RlLnN0eWxlLnNldFByb3BlcnR5KGtleSwgdmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChjbGFzc05hbWU/LmFjdGl2ZSkge1xuICAgIGFjdGl2ZS5ub2RlLmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lLmFjdGl2ZSk7XG4gIH1cblxuICBpZiAoY2xhc3NOYW1lPy5kcmFnT3ZlcmxheSkge1xuICAgIGRyYWdPdmVybGF5Lm5vZGUuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUuZHJhZ092ZXJsYXkpO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMob3JpZ2luYWxTdHlsZXMpKSB7XG4gICAgICBhY3RpdmUubm9kZS5zdHlsZS5zZXRQcm9wZXJ0eShrZXksIHZhbHVlKTtcbiAgICB9XG5cbiAgICBpZiAoY2xhc3NOYW1lPy5hY3RpdmUpIHtcbiAgICAgIGFjdGl2ZS5ub2RlLmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lLmFjdGl2ZSk7XG4gICAgfVxuICB9O1xufTtcblxuY29uc3QgZGVmYXVsdEtleWZyYW1lUmVzb2x2ZXI6IEtleWZyYW1lUmVzb2x2ZXIgPSAoe1xuICB0cmFuc2Zvcm06IHtpbml0aWFsLCBmaW5hbH0sXG59KSA9PiBbXG4gIHtcbiAgICB0cmFuc2Zvcm06IENTUy5UcmFuc2Zvcm0udG9TdHJpbmcoaW5pdGlhbCksXG4gIH0sXG4gIHtcbiAgICB0cmFuc2Zvcm06IENTUy5UcmFuc2Zvcm0udG9TdHJpbmcoZmluYWwpLFxuICB9LFxuXTtcblxuZXhwb3J0IGNvbnN0IGRlZmF1bHREcm9wQW5pbWF0aW9uQ29uZmlndXJhdGlvbjogUmVxdWlyZWQ8RHJvcEFuaW1hdGlvbk9wdGlvbnM+ID0ge1xuICBkdXJhdGlvbjogMjUwLFxuICBlYXNpbmc6ICdlYXNlJyxcbiAga2V5ZnJhbWVzOiBkZWZhdWx0S2V5ZnJhbWVSZXNvbHZlcixcbiAgc2lkZUVmZmVjdHM6IGRlZmF1bHREcm9wQW5pbWF0aW9uU2lkZUVmZmVjdHMoe1xuICAgIHN0eWxlczoge1xuICAgICAgYWN0aXZlOiB7XG4gICAgICAgIG9wYWNpdHk6ICcwJyxcbiAgICAgIH0sXG4gICAgfSxcbiAgfSksXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlRHJvcEFuaW1hdGlvbih7XG4gIGNvbmZpZyxcbiAgZHJhZ2dhYmxlTm9kZXMsXG4gIGRyb3BwYWJsZUNvbnRhaW5lcnMsXG4gIG1lYXN1cmluZ0NvbmZpZ3VyYXRpb24sXG59OiBBcmd1bWVudHMpIHtcbiAgcmV0dXJuIHVzZUV2ZW50PEFuaW1hdGlvbj4oKGlkLCBub2RlKSA9PiB7XG4gICAgaWYgKGNvbmZpZyA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGFjdGl2ZURyYWdnYWJsZTogRHJhZ2dhYmxlTm9kZSB8IHVuZGVmaW5lZCA9IGRyYWdnYWJsZU5vZGVzLmdldChpZCk7XG5cbiAgICBpZiAoIWFjdGl2ZURyYWdnYWJsZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGFjdGl2ZU5vZGUgPSBhY3RpdmVEcmFnZ2FibGUubm9kZS5jdXJyZW50O1xuXG4gICAgaWYgKCFhY3RpdmVOb2RlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgbWVhc3VyYWJsZU5vZGUgPSBnZXRNZWFzdXJhYmxlTm9kZShub2RlKTtcblxuICAgIGlmICghbWVhc3VyYWJsZU5vZGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qge3RyYW5zZm9ybX0gPSBnZXRXaW5kb3cobm9kZSkuZ2V0Q29tcHV0ZWRTdHlsZShub2RlKTtcbiAgICBjb25zdCBwYXJzZWRUcmFuc2Zvcm0gPSBwYXJzZVRyYW5zZm9ybSh0cmFuc2Zvcm0pO1xuXG4gICAgaWYgKCFwYXJzZWRUcmFuc2Zvcm0pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBhbmltYXRpb246IERyb3BBbmltYXRpb25GdW5jdGlvbiA9XG4gICAgICB0eXBlb2YgY29uZmlnID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gY29uZmlnXG4gICAgICAgIDogY3JlYXRlRGVmYXVsdERyb3BBbmltYXRpb24oY29uZmlnKTtcblxuICAgIHNjcm9sbEludG9WaWV3SWZOZWVkZWQoXG4gICAgICBhY3RpdmVOb2RlLFxuICAgICAgbWVhc3VyaW5nQ29uZmlndXJhdGlvbi5kcmFnZ2FibGUubWVhc3VyZVxuICAgICk7XG5cbiAgICByZXR1cm4gYW5pbWF0aW9uKHtcbiAgICAgIGFjdGl2ZToge1xuICAgICAgICBpZCxcbiAgICAgICAgZGF0YTogYWN0aXZlRHJhZ2dhYmxlLmRhdGEsXG4gICAgICAgIG5vZGU6IGFjdGl2ZU5vZGUsXG4gICAgICAgIHJlY3Q6IG1lYXN1cmluZ0NvbmZpZ3VyYXRpb24uZHJhZ2dhYmxlLm1lYXN1cmUoYWN0aXZlTm9kZSksXG4gICAgICB9LFxuICAgICAgZHJhZ2dhYmxlTm9kZXMsXG4gICAgICBkcmFnT3ZlcmxheToge1xuICAgICAgICBub2RlLFxuICAgICAgICByZWN0OiBtZWFzdXJpbmdDb25maWd1cmF0aW9uLmRyYWdPdmVybGF5Lm1lYXN1cmUobWVhc3VyYWJsZU5vZGUpLFxuICAgICAgfSxcbiAgICAgIGRyb3BwYWJsZUNvbnRhaW5lcnMsXG4gICAgICBtZWFzdXJpbmdDb25maWd1cmF0aW9uLFxuICAgICAgdHJhbnNmb3JtOiBwYXJzZWRUcmFuc2Zvcm0sXG4gICAgfSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVEZWZhdWx0RHJvcEFuaW1hdGlvbihcbiAgb3B0aW9uczogRHJvcEFuaW1hdGlvbk9wdGlvbnMgfCB1bmRlZmluZWRcbik6IERyb3BBbmltYXRpb25GdW5jdGlvbiB7XG4gIGNvbnN0IHtkdXJhdGlvbiwgZWFzaW5nLCBzaWRlRWZmZWN0cywga2V5ZnJhbWVzfSA9IHtcbiAgICAuLi5kZWZhdWx0RHJvcEFuaW1hdGlvbkNvbmZpZ3VyYXRpb24sXG4gICAgLi4ub3B0aW9ucyxcbiAgfTtcblxuICByZXR1cm4gKHthY3RpdmUsIGRyYWdPdmVybGF5LCB0cmFuc2Zvcm0sIC4uLnJlc3R9KSA9PiB7XG4gICAgaWYgKCFkdXJhdGlvbikge1xuICAgICAgLy8gRG8gbm90IGFuaW1hdGUgaWYgYW5pbWF0aW9uIGR1cmF0aW9uIGlzIHplcm8uXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgZGVsdGEgPSB7XG4gICAgICB4OiBkcmFnT3ZlcmxheS5yZWN0LmxlZnQgLSBhY3RpdmUucmVjdC5sZWZ0LFxuICAgICAgeTogZHJhZ092ZXJsYXkucmVjdC50b3AgLSBhY3RpdmUucmVjdC50b3AsXG4gICAgfTtcblxuICAgIGNvbnN0IHNjYWxlID0ge1xuICAgICAgc2NhbGVYOlxuICAgICAgICB0cmFuc2Zvcm0uc2NhbGVYICE9PSAxXG4gICAgICAgICAgPyAoYWN0aXZlLnJlY3Qud2lkdGggKiB0cmFuc2Zvcm0uc2NhbGVYKSAvIGRyYWdPdmVybGF5LnJlY3Qud2lkdGhcbiAgICAgICAgICA6IDEsXG4gICAgICBzY2FsZVk6XG4gICAgICAgIHRyYW5zZm9ybS5zY2FsZVkgIT09IDFcbiAgICAgICAgICA/IChhY3RpdmUucmVjdC5oZWlnaHQgKiB0cmFuc2Zvcm0uc2NhbGVZKSAvIGRyYWdPdmVybGF5LnJlY3QuaGVpZ2h0XG4gICAgICAgICAgOiAxLFxuICAgIH07XG4gICAgY29uc3QgZmluYWxUcmFuc2Zvcm0gPSB7XG4gICAgICB4OiB0cmFuc2Zvcm0ueCAtIGRlbHRhLngsXG4gICAgICB5OiB0cmFuc2Zvcm0ueSAtIGRlbHRhLnksXG4gICAgICAuLi5zY2FsZSxcbiAgICB9O1xuXG4gICAgY29uc3QgYW5pbWF0aW9uS2V5ZnJhbWVzID0ga2V5ZnJhbWVzKHtcbiAgICAgIC4uLnJlc3QsXG4gICAgICBhY3RpdmUsXG4gICAgICBkcmFnT3ZlcmxheSxcbiAgICAgIHRyYW5zZm9ybToge2luaXRpYWw6IHRyYW5zZm9ybSwgZmluYWw6IGZpbmFsVHJhbnNmb3JtfSxcbiAgICB9KTtcblxuICAgIGNvbnN0IFtmaXJzdEtleWZyYW1lXSA9IGFuaW1hdGlvbktleWZyYW1lcztcbiAgICBjb25zdCBsYXN0S2V5ZnJhbWUgPSBhbmltYXRpb25LZXlmcmFtZXNbYW5pbWF0aW9uS2V5ZnJhbWVzLmxlbmd0aCAtIDFdO1xuXG4gICAgaWYgKEpTT04uc3RyaW5naWZ5KGZpcnN0S2V5ZnJhbWUpID09PSBKU09OLnN0cmluZ2lmeShsYXN0S2V5ZnJhbWUpKSB7XG4gICAgICAvLyBUaGUgc3RhcnQgYW5kIGVuZCBrZXlmcmFtZXMgYXJlIHRoZSBzYW1lLCBpbmZlciB0aGF0IHRoZXJlIGlzIG5vIGFuaW1hdGlvbiBuZWVkZWQuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgY2xlYW51cCA9IHNpZGVFZmZlY3RzPy4oe2FjdGl2ZSwgZHJhZ092ZXJsYXksIC4uLnJlc3R9KTtcbiAgICBjb25zdCBhbmltYXRpb24gPSBkcmFnT3ZlcmxheS5ub2RlLmFuaW1hdGUoYW5pbWF0aW9uS2V5ZnJhbWVzLCB7XG4gICAgICBkdXJhdGlvbixcbiAgICAgIGVhc2luZyxcbiAgICAgIGZpbGw6ICdmb3J3YXJkcycsXG4gICAgfSk7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgIGFuaW1hdGlvbi5vbmZpbmlzaCA9ICgpID0+IHtcbiAgICAgICAgY2xlYW51cD8uKCk7XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH07XG59XG4iLCJpbXBvcnQge3VzZU1lbW99IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHR5cGUge1VuaXF1ZUlkZW50aWZpZXJ9IGZyb20gJy4uLy4uLy4uL3R5cGVzJztcblxubGV0IGtleSA9IDA7XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VLZXkoaWQ6IFVuaXF1ZUlkZW50aWZpZXIgfCB1bmRlZmluZWQpIHtcbiAgcmV0dXJuIHVzZU1lbW8oKCkgPT4ge1xuICAgIGlmIChpZCA9PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAga2V5Kys7XG4gICAgcmV0dXJuIGtleTtcbiAgfSwgW2lkXSk7XG59XG4iLCJpbXBvcnQgUmVhY3QsIHt1c2VDb250ZXh0fSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7YXBwbHlNb2RpZmllcnMsIE1vZGlmaWVyc30gZnJvbSAnLi4vLi4vbW9kaWZpZXJzJztcbmltcG9ydCB7QWN0aXZlRHJhZ2dhYmxlQ29udGV4dH0gZnJvbSAnLi4vRG5kQ29udGV4dCc7XG5pbXBvcnQge3VzZURuZENvbnRleHR9IGZyb20gJy4uLy4uL2hvb2tzJztcbmltcG9ydCB7dXNlSW5pdGlhbFZhbHVlfSBmcm9tICcuLi8uLi9ob29rcy91dGlsaXRpZXMnO1xuXG5pbXBvcnQge1xuICBBbmltYXRpb25NYW5hZ2VyLFxuICBOdWxsaWZpZWRDb250ZXh0UHJvdmlkZXIsXG4gIFBvc2l0aW9uZWRPdmVybGF5LFxufSBmcm9tICcuL2NvbXBvbmVudHMnO1xuaW1wb3J0IHR5cGUge1Bvc2l0aW9uZWRPdmVybGF5UHJvcHN9IGZyb20gJy4vY29tcG9uZW50cyc7XG5cbmltcG9ydCB7dXNlRHJvcEFuaW1hdGlvbiwgdXNlS2V5fSBmcm9tICcuL2hvb2tzJztcbmltcG9ydCB0eXBlIHtEcm9wQW5pbWF0aW9ufSBmcm9tICcuL2hvb2tzJztcblxuZXhwb3J0IGludGVyZmFjZSBQcm9wc1xuICBleHRlbmRzIFBpY2s8XG4gICAgUG9zaXRpb25lZE92ZXJsYXlQcm9wcyxcbiAgICAnYWRqdXN0U2NhbGUnIHwgJ2NoaWxkcmVuJyB8ICdjbGFzc05hbWUnIHwgJ3N0eWxlJyB8ICd0cmFuc2l0aW9uJ1xuICA+IHtcbiAgZHJvcEFuaW1hdGlvbj86IERyb3BBbmltYXRpb24gfCBudWxsIHwgdW5kZWZpbmVkO1xuICBtb2RpZmllcnM/OiBNb2RpZmllcnM7XG4gIHdyYXBwZXJFbGVtZW50Pzoga2V5b2YgSlNYLkludHJpbnNpY0VsZW1lbnRzO1xuICB6SW5kZXg/OiBudW1iZXI7XG59XG5cbmV4cG9ydCBjb25zdCBEcmFnT3ZlcmxheSA9IFJlYWN0Lm1lbW8oXG4gICh7XG4gICAgYWRqdXN0U2NhbGUgPSBmYWxzZSxcbiAgICBjaGlsZHJlbixcbiAgICBkcm9wQW5pbWF0aW9uOiBkcm9wQW5pbWF0aW9uQ29uZmlnLFxuICAgIHN0eWxlLFxuICAgIHRyYW5zaXRpb24sXG4gICAgbW9kaWZpZXJzLFxuICAgIHdyYXBwZXJFbGVtZW50ID0gJ2RpdicsXG4gICAgY2xhc3NOYW1lLFxuICAgIHpJbmRleCA9IDk5OSxcbiAgfTogUHJvcHMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBhY3RpdmF0b3JFdmVudCxcbiAgICAgIGFjdGl2ZSxcbiAgICAgIGFjdGl2ZU5vZGVSZWN0LFxuICAgICAgY29udGFpbmVyTm9kZVJlY3QsXG4gICAgICBkcmFnZ2FibGVOb2RlcyxcbiAgICAgIGRyb3BwYWJsZUNvbnRhaW5lcnMsXG4gICAgICBkcmFnT3ZlcmxheSxcbiAgICAgIG92ZXIsXG4gICAgICBtZWFzdXJpbmdDb25maWd1cmF0aW9uLFxuICAgICAgc2Nyb2xsYWJsZUFuY2VzdG9ycyxcbiAgICAgIHNjcm9sbGFibGVBbmNlc3RvclJlY3RzLFxuICAgICAgd2luZG93UmVjdCxcbiAgICB9ID0gdXNlRG5kQ29udGV4dCgpO1xuICAgIGNvbnN0IHRyYW5zZm9ybSA9IHVzZUNvbnRleHQoQWN0aXZlRHJhZ2dhYmxlQ29udGV4dCk7XG4gICAgY29uc3Qga2V5ID0gdXNlS2V5KGFjdGl2ZT8uaWQpO1xuICAgIGNvbnN0IG1vZGlmaWVkVHJhbnNmb3JtID0gYXBwbHlNb2RpZmllcnMobW9kaWZpZXJzLCB7XG4gICAgICBhY3RpdmF0b3JFdmVudCxcbiAgICAgIGFjdGl2ZSxcbiAgICAgIGFjdGl2ZU5vZGVSZWN0LFxuICAgICAgY29udGFpbmVyTm9kZVJlY3QsXG4gICAgICBkcmFnZ2luZ05vZGVSZWN0OiBkcmFnT3ZlcmxheS5yZWN0LFxuICAgICAgb3ZlcixcbiAgICAgIG92ZXJsYXlOb2RlUmVjdDogZHJhZ092ZXJsYXkucmVjdCxcbiAgICAgIHNjcm9sbGFibGVBbmNlc3RvcnMsXG4gICAgICBzY3JvbGxhYmxlQW5jZXN0b3JSZWN0cyxcbiAgICAgIHRyYW5zZm9ybSxcbiAgICAgIHdpbmRvd1JlY3QsXG4gICAgfSk7XG4gICAgY29uc3QgaW5pdGlhbFJlY3QgPSB1c2VJbml0aWFsVmFsdWUoYWN0aXZlTm9kZVJlY3QpO1xuICAgIGNvbnN0IGRyb3BBbmltYXRpb24gPSB1c2VEcm9wQW5pbWF0aW9uKHtcbiAgICAgIGNvbmZpZzogZHJvcEFuaW1hdGlvbkNvbmZpZyxcbiAgICAgIGRyYWdnYWJsZU5vZGVzLFxuICAgICAgZHJvcHBhYmxlQ29udGFpbmVycyxcbiAgICAgIG1lYXN1cmluZ0NvbmZpZ3VyYXRpb24sXG4gICAgfSk7XG4gICAgLy8gV2UgbmVlZCB0byB3YWl0IGZvciB0aGUgYWN0aXZlIG5vZGUgdG8gYmUgbWVhc3VyZWQgYmVmb3JlIGNvbm5lY3RpbmcgdGhlIGRyYWcgb3ZlcmxheSByZWZcbiAgICAvLyBvdGhlcndpc2UgY29sbGlzaW9ucyBjYW4gYmUgY29tcHV0ZWQgYWdhaW5zdCBhIG1pc3Bvc2l0aW9uZWQgZHJhZyBvdmVybGF5XG4gICAgY29uc3QgcmVmID0gaW5pdGlhbFJlY3QgPyBkcmFnT3ZlcmxheS5zZXRSZWYgOiB1bmRlZmluZWQ7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPE51bGxpZmllZENvbnRleHRQcm92aWRlcj5cbiAgICAgICAgPEFuaW1hdGlvbk1hbmFnZXIgYW5pbWF0aW9uPXtkcm9wQW5pbWF0aW9ufT5cbiAgICAgICAgICB7YWN0aXZlICYmIGtleSA/IChcbiAgICAgICAgICAgIDxQb3NpdGlvbmVkT3ZlcmxheVxuICAgICAgICAgICAgICBrZXk9e2tleX1cbiAgICAgICAgICAgICAgaWQ9e2FjdGl2ZS5pZH1cbiAgICAgICAgICAgICAgcmVmPXtyZWZ9XG4gICAgICAgICAgICAgIGFzPXt3cmFwcGVyRWxlbWVudH1cbiAgICAgICAgICAgICAgYWN0aXZhdG9yRXZlbnQ9e2FjdGl2YXRvckV2ZW50fVxuICAgICAgICAgICAgICBhZGp1c3RTY2FsZT17YWRqdXN0U2NhbGV9XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lfVxuICAgICAgICAgICAgICB0cmFuc2l0aW9uPXt0cmFuc2l0aW9ufVxuICAgICAgICAgICAgICByZWN0PXtpbml0aWFsUmVjdH1cbiAgICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgICB6SW5kZXgsXG4gICAgICAgICAgICAgICAgLi4uc3R5bGUsXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgIHRyYW5zZm9ybT17bW9kaWZpZWRUcmFuc2Zvcm19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgICAgIDwvUG9zaXRpb25lZE92ZXJsYXk+XG4gICAgICAgICAgKSA6IG51bGx9XG4gICAgICAgIDwvQW5pbWF0aW9uTWFuYWdlcj5cbiAgICAgIDwvTnVsbGlmaWVkQ29udGV4dFByb3ZpZGVyPlxuICAgICk7XG4gIH1cbik7XG4iXSwibmFtZXMiOlsiRG5kTW9uaXRvckNvbnRleHQiLCJjcmVhdGVDb250ZXh0IiwidXNlRG5kTW9uaXRvciIsImxpc3RlbmVyIiwicmVnaXN0ZXJMaXN0ZW5lciIsInVzZUNvbnRleHQiLCJ1c2VFZmZlY3QiLCJFcnJvciIsInVuc3Vic2NyaWJlIiwidXNlRG5kTW9uaXRvclByb3ZpZGVyIiwibGlzdGVuZXJzIiwidXNlU3RhdGUiLCJTZXQiLCJ1c2VDYWxsYmFjayIsImFkZCIsImRlbGV0ZSIsImRpc3BhdGNoIiwidHlwZSIsImV2ZW50IiwiZm9yRWFjaCIsImRlZmF1bHRTY3JlZW5SZWFkZXJJbnN0cnVjdGlvbnMiLCJkcmFnZ2FibGUiLCJkZWZhdWx0QW5ub3VuY2VtZW50cyIsIm9uRHJhZ1N0YXJ0IiwiYWN0aXZlIiwiaWQiLCJvbkRyYWdPdmVyIiwib3ZlciIsIm9uRHJhZ0VuZCIsIm9uRHJhZ0NhbmNlbCIsIkFjY2Vzc2liaWxpdHkiLCJhbm5vdW5jZW1lbnRzIiwiY29udGFpbmVyIiwiaGlkZGVuVGV4dERlc2NyaWJlZEJ5SWQiLCJzY3JlZW5SZWFkZXJJbnN0cnVjdGlvbnMiLCJhbm5vdW5jZSIsImFubm91bmNlbWVudCIsInVzZUFubm91bmNlbWVudCIsImxpdmVSZWdpb25JZCIsInVzZVVuaXF1ZUlkIiwibW91bnRlZCIsInNldE1vdW50ZWQiLCJ1c2VNZW1vIiwib25EcmFnTW92ZSIsIm1hcmt1cCIsIlJlYWN0IiwiSGlkZGVuVGV4dCIsInZhbHVlIiwiTGl2ZVJlZ2lvbiIsImNyZWF0ZVBvcnRhbCIsIkFjdGlvbiIsIm5vb3AiLCJ1c2VTZW5zb3IiLCJzZW5zb3IiLCJvcHRpb25zIiwidXNlU2Vuc29ycyIsInNlbnNvcnMiLCJmaWx0ZXIiLCJkZWZhdWx0Q29vcmRpbmF0ZXMiLCJPYmplY3QiLCJmcmVlemUiLCJ4IiwieSIsImRpc3RhbmNlQmV0d2VlbiIsInAxIiwicDIiLCJNYXRoIiwic3FydCIsInBvdyIsImdldFJlbGF0aXZlVHJhbnNmb3JtT3JpZ2luIiwicmVjdCIsImV2ZW50Q29vcmRpbmF0ZXMiLCJnZXRFdmVudENvb3JkaW5hdGVzIiwidHJhbnNmb3JtT3JpZ2luIiwibGVmdCIsIndpZHRoIiwidG9wIiwiaGVpZ2h0Iiwic29ydENvbGxpc2lvbnNBc2MiLCJkYXRhIiwiYSIsImIiLCJzb3J0Q29sbGlzaW9uc0Rlc2MiLCJjb3JuZXJzT2ZSZWN0YW5nbGUiLCJnZXRGaXJzdENvbGxpc2lvbiIsImNvbGxpc2lvbnMiLCJwcm9wZXJ0eSIsImxlbmd0aCIsImZpcnN0Q29sbGlzaW9uIiwiY2VudGVyT2ZSZWN0YW5nbGUiLCJjbG9zZXN0Q2VudGVyIiwiY29sbGlzaW9uUmVjdCIsImRyb3BwYWJsZVJlY3RzIiwiZHJvcHBhYmxlQ29udGFpbmVycyIsImNlbnRlclJlY3QiLCJkcm9wcGFibGVDb250YWluZXIiLCJnZXQiLCJkaXN0QmV0d2VlbiIsInB1c2giLCJzb3J0IiwiY2xvc2VzdENvcm5lcnMiLCJjb3JuZXJzIiwicmVjdENvcm5lcnMiLCJkaXN0YW5jZXMiLCJyZWR1Y2UiLCJhY2N1bXVsYXRvciIsImNvcm5lciIsImluZGV4IiwiZWZmZWN0aXZlRGlzdGFuY2UiLCJOdW1iZXIiLCJ0b0ZpeGVkIiwiZ2V0SW50ZXJzZWN0aW9uUmF0aW8iLCJlbnRyeSIsInRhcmdldCIsIm1heCIsInJpZ2h0IiwibWluIiwiYm90dG9tIiwidGFyZ2V0QXJlYSIsImVudHJ5QXJlYSIsImludGVyc2VjdGlvbkFyZWEiLCJpbnRlcnNlY3Rpb25SYXRpbyIsInJlY3RJbnRlcnNlY3Rpb24iLCJpc1BvaW50V2l0aGluUmVjdCIsInBvaW50IiwicG9pbnRlcldpdGhpbiIsInBvaW50ZXJDb29yZGluYXRlcyIsImFkanVzdFNjYWxlIiwidHJhbnNmb3JtIiwicmVjdDEiLCJyZWN0MiIsInNjYWxlWCIsInNjYWxlWSIsImdldFJlY3REZWx0YSIsImNyZWF0ZVJlY3RBZGp1c3RtZW50Rm4iLCJtb2RpZmllciIsImFkanVzdENsaWVudFJlY3QiLCJhZGp1c3RtZW50cyIsImFjYyIsImFkanVzdG1lbnQiLCJnZXRBZGp1c3RlZFJlY3QiLCJwYXJzZVRyYW5zZm9ybSIsInN0YXJ0c1dpdGgiLCJ0cmFuc2Zvcm1BcnJheSIsInNsaWNlIiwic3BsaXQiLCJpbnZlcnNlVHJhbnNmb3JtIiwicGFyc2VkVHJhbnNmb3JtIiwidHJhbnNsYXRlWCIsInRyYW5zbGF0ZVkiLCJwYXJzZUZsb2F0IiwiaW5kZXhPZiIsInciLCJoIiwiZGVmYXVsdE9wdGlvbnMiLCJpZ25vcmVUcmFuc2Zvcm0iLCJnZXRDbGllbnRSZWN0IiwiZWxlbWVudCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImdldFdpbmRvdyIsImdldENvbXB1dGVkU3R5bGUiLCJnZXRUcmFuc2Zvcm1BZ25vc3RpY0NsaWVudFJlY3QiLCJnZXRXaW5kb3dDbGllbnRSZWN0IiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0IiwiaXNGaXhlZCIsIm5vZGUiLCJjb21wdXRlZFN0eWxlIiwicG9zaXRpb24iLCJpc1Njcm9sbGFibGUiLCJvdmVyZmxvd1JlZ2V4IiwicHJvcGVydGllcyIsInNvbWUiLCJ0ZXN0IiwiZ2V0U2Nyb2xsYWJsZUFuY2VzdG9ycyIsImxpbWl0Iiwic2Nyb2xsUGFyZW50cyIsImZpbmRTY3JvbGxhYmxlQW5jZXN0b3JzIiwiaXNEb2N1bWVudCIsInNjcm9sbGluZ0VsZW1lbnQiLCJpbmNsdWRlcyIsImlzSFRNTEVsZW1lbnQiLCJpc1NWR0VsZW1lbnQiLCJwYXJlbnROb2RlIiwiZ2V0Rmlyc3RTY3JvbGxhYmxlQW5jZXN0b3IiLCJmaXJzdFNjcm9sbGFibGVBbmNlc3RvciIsImdldFNjcm9sbGFibGVFbGVtZW50IiwiY2FuVXNlRE9NIiwiaXNXaW5kb3ciLCJpc05vZGUiLCJnZXRPd25lckRvY3VtZW50Iiwid2luZG93IiwiZ2V0U2Nyb2xsWENvb3JkaW5hdGUiLCJzY3JvbGxYIiwic2Nyb2xsTGVmdCIsImdldFNjcm9sbFlDb29yZGluYXRlIiwic2Nyb2xsWSIsInNjcm9sbFRvcCIsImdldFNjcm9sbENvb3JkaW5hdGVzIiwiRGlyZWN0aW9uIiwiaXNEb2N1bWVudFNjcm9sbGluZ0VsZW1lbnQiLCJkb2N1bWVudCIsImdldFNjcm9sbFBvc2l0aW9uIiwic2Nyb2xsaW5nQ29udGFpbmVyIiwibWluU2Nyb2xsIiwiZGltZW5zaW9ucyIsImNsaWVudEhlaWdodCIsImNsaWVudFdpZHRoIiwibWF4U2Nyb2xsIiwic2Nyb2xsV2lkdGgiLCJzY3JvbGxIZWlnaHQiLCJpc1RvcCIsImlzTGVmdCIsImlzQm90dG9tIiwiaXNSaWdodCIsImRlZmF1bHRUaHJlc2hvbGQiLCJnZXRTY3JvbGxEaXJlY3Rpb25BbmRTcGVlZCIsInNjcm9sbENvbnRhaW5lciIsInNjcm9sbENvbnRhaW5lclJlY3QiLCJhY2NlbGVyYXRpb24iLCJ0aHJlc2hvbGRQZXJjZW50YWdlIiwiZGlyZWN0aW9uIiwic3BlZWQiLCJ0aHJlc2hvbGQiLCJCYWNrd2FyZCIsImFicyIsIkZvcndhcmQiLCJnZXRTY3JvbGxFbGVtZW50UmVjdCIsImdldFNjcm9sbE9mZnNldHMiLCJzY3JvbGxhYmxlQW5jZXN0b3JzIiwiZ2V0U2Nyb2xsWE9mZnNldCIsImdldFNjcm9sbFlPZmZzZXQiLCJzY3JvbGxJbnRvVmlld0lmTmVlZGVkIiwibWVhc3VyZSIsInNjcm9sbEludG9WaWV3IiwiYmxvY2siLCJpbmxpbmUiLCJSZWN0IiwiY29uc3RydWN0b3IiLCJzY3JvbGxPZmZzZXRzIiwiYXhpcyIsImtleXMiLCJnZXRTY3JvbGxPZmZzZXQiLCJrZXkiLCJkZWZpbmVQcm9wZXJ0eSIsImN1cnJlbnRPZmZzZXRzIiwic2Nyb2xsT2Zmc2V0c0RlbHRsYSIsImVudW1lcmFibGUiLCJMaXN0ZW5lcnMiLCJyZW1vdmVBbGwiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZXZlbnROYW1lIiwiaGFuZGxlciIsImFkZEV2ZW50TGlzdGVuZXIiLCJnZXRFdmVudExpc3RlbmVyVGFyZ2V0IiwiRXZlbnRUYXJnZXQiLCJoYXNFeGNlZWRlZERpc3RhbmNlIiwiZGVsdGEiLCJtZWFzdXJlbWVudCIsImR4IiwiZHkiLCJFdmVudE5hbWUiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsIktleWJvYXJkQ29kZSIsImRlZmF1bHRLZXlib2FyZENvZGVzIiwic3RhcnQiLCJTcGFjZSIsIkVudGVyIiwiY2FuY2VsIiwiRXNjIiwiZW5kIiwiVGFiIiwiZGVmYXVsdEtleWJvYXJkQ29vcmRpbmF0ZUdldHRlciIsImN1cnJlbnRDb29yZGluYXRlcyIsImNvZGUiLCJSaWdodCIsIkxlZnQiLCJEb3duIiwiVXAiLCJ1bmRlZmluZWQiLCJLZXlib2FyZFNlbnNvciIsInByb3BzIiwiYXV0b1Njcm9sbEVuYWJsZWQiLCJyZWZlcmVuY2VDb29yZGluYXRlcyIsIndpbmRvd0xpc3RlbmVycyIsImhhbmRsZUtleURvd24iLCJiaW5kIiwiaGFuZGxlQ2FuY2VsIiwiYXR0YWNoIiwiaGFuZGxlU3RhcnQiLCJSZXNpemUiLCJWaXNpYmlsaXR5Q2hhbmdlIiwic2V0VGltZW91dCIsIktleWRvd24iLCJhY3RpdmVOb2RlIiwib25TdGFydCIsImN1cnJlbnQiLCJpc0tleWJvYXJkRXZlbnQiLCJjb250ZXh0Iiwia2V5Ym9hcmRDb2RlcyIsImNvb3JkaW5hdGVHZXR0ZXIiLCJzY3JvbGxCZWhhdmlvciIsImhhbmRsZUVuZCIsIm5ld0Nvb3JkaW5hdGVzIiwiY29vcmRpbmF0ZXNEZWx0YSIsImdldENvb3JkaW5hdGVzRGVsdGEiLCJzY3JvbGxEZWx0YSIsInNjcm9sbEVsZW1lbnRSZWN0IiwiY2xhbXBlZENvb3JkaW5hdGVzIiwiY2FuU2Nyb2xsWCIsImNhblNjcm9sbFkiLCJuZXdTY3JvbGxDb29yZGluYXRlcyIsImNhblNjcm9sbFRvTmV3Q29vcmRpbmF0ZXMiLCJzY3JvbGxUbyIsImJlaGF2aW9yIiwic2Nyb2xsQnkiLCJoYW5kbGVNb3ZlIiwiZ2V0QWRqdXN0ZWRDb29yZGluYXRlcyIsImNvb3JkaW5hdGVzIiwib25Nb3ZlIiwib25FbmQiLCJkZXRhY2giLCJvbkNhbmNlbCIsImFjdGl2YXRvcnMiLCJvbkFjdGl2YXRpb24iLCJuYXRpdmVFdmVudCIsImFjdGl2YXRvciIsImFjdGl2YXRvck5vZGUiLCJpc0Rpc3RhbmNlQ29uc3RyYWludCIsImNvbnN0cmFpbnQiLCJCb29sZWFuIiwiaXNEZWxheUNvbnN0cmFpbnQiLCJBYnN0cmFjdFBvaW50ZXJTZW5zb3IiLCJldmVudHMiLCJsaXN0ZW5lclRhcmdldCIsImFjdGl2YXRlZCIsImluaXRpYWxDb29yZGluYXRlcyIsInRpbWVvdXRJZCIsImRvY3VtZW50TGlzdGVuZXJzIiwiaGFuZGxlS2V5ZG93biIsInJlbW92ZVRleHRTZWxlY3Rpb24iLCJhY3RpdmF0aW9uQ29uc3RyYWludCIsImJ5cGFzc0FjdGl2YXRpb25Db25zdHJhaW50IiwibW92ZSIsIm5hbWUiLCJwYXNzaXZlIiwiRHJhZ1N0YXJ0IiwiQ29udGV4dE1lbnUiLCJkZWxheSIsImhhbmRsZVBlbmRpbmciLCJjbGVhclRpbWVvdXQiLCJvZmZzZXQiLCJvblBlbmRpbmciLCJDbGljayIsImNhcHR1cmUiLCJTZWxlY3Rpb25DaGFuZ2UiLCJ0b2xlcmFuY2UiLCJkaXN0YW5jZSIsImNhbmNlbGFibGUiLCJvbkFib3J0IiwiZ2V0U2VsZWN0aW9uIiwicmVtb3ZlQWxsUmFuZ2VzIiwiUG9pbnRlclNlbnNvciIsImlzUHJpbWFyeSIsImJ1dHRvbiIsIk1vdXNlQnV0dG9uIiwiTW91c2VTZW5zb3IiLCJSaWdodENsaWNrIiwiVG91Y2hTZW5zb3IiLCJzZXR1cCIsInRlYXJkb3duIiwidG91Y2hlcyIsIkF1dG9TY3JvbGxBY3RpdmF0b3IiLCJUcmF2ZXJzYWxPcmRlciIsInVzZUF1dG9TY3JvbGxlciIsIlBvaW50ZXIiLCJjYW5TY3JvbGwiLCJkcmFnZ2luZ1JlY3QiLCJlbmFibGVkIiwiaW50ZXJ2YWwiLCJvcmRlciIsIlRyZWVPcmRlciIsInNjcm9sbGFibGVBbmNlc3RvclJlY3RzIiwic2Nyb2xsSW50ZW50IiwidXNlU2Nyb2xsSW50ZW50IiwiZGlzYWJsZWQiLCJzZXRBdXRvU2Nyb2xsSW50ZXJ2YWwiLCJjbGVhckF1dG9TY3JvbGxJbnRlcnZhbCIsInVzZUludGVydmFsIiwic2Nyb2xsU3BlZWQiLCJ1c2VSZWYiLCJzY3JvbGxEaXJlY3Rpb24iLCJEcmFnZ2FibGVSZWN0Iiwic2Nyb2xsQ29udGFpbmVyUmVmIiwiYXV0b1Njcm9sbCIsInNvcnRlZFNjcm9sbGFibGVBbmNlc3RvcnMiLCJyZXZlcnNlIiwiSlNPTiIsInN0cmluZ2lmeSIsImRlZmF1bHRTY3JvbGxJbnRlbnQiLCJwcmV2aW91c0RlbHRhIiwidXNlUHJldmlvdXMiLCJ1c2VMYXp5TWVtbyIsInByZXZpb3VzSW50ZW50Iiwic2lnbiIsInVzZUNhY2hlZE5vZGUiLCJkcmFnZ2FibGVOb2RlcyIsImRyYWdnYWJsZU5vZGUiLCJjYWNoZWROb2RlIiwidXNlQ29tYmluZUFjdGl2YXRvcnMiLCJnZXRTeW50aGV0aWNIYW5kbGVyIiwiU2Vuc29yIiwic2Vuc29yQWN0aXZhdG9ycyIsIm1hcCIsIk1lYXN1cmluZ1N0cmF0ZWd5IiwiTWVhc3VyaW5nRnJlcXVlbmN5IiwiZGVmYXVsdFZhbHVlIiwiTWFwIiwidXNlRHJvcHBhYmxlTWVhc3VyaW5nIiwiY29udGFpbmVycyIsImRyYWdnaW5nIiwiZGVwZW5kZW5jaWVzIiwiY29uZmlnIiwicXVldWUiLCJzZXRRdWV1ZSIsImZyZXF1ZW5jeSIsInN0cmF0ZWd5IiwiY29udGFpbmVyc1JlZiIsImlzRGlzYWJsZWQiLCJkaXNhYmxlZFJlZiIsInVzZUxhdGVzdFZhbHVlIiwibWVhc3VyZURyb3BwYWJsZUNvbnRhaW5lcnMiLCJpZHMiLCJjb25jYXQiLCJwcmV2aW91c1ZhbHVlIiwic2V0IiwibWVhc3VyaW5nU2NoZWR1bGVkIiwiQWx3YXlzIiwiQmVmb3JlRHJhZ2dpbmciLCJ1c2VJbml0aWFsVmFsdWUiLCJjb21wdXRlRm4iLCJ1c2VJbml0aWFsUmVjdCIsInVzZU11dGF0aW9uT2JzZXJ2ZXIiLCJjYWxsYmFjayIsImhhbmRsZU11dGF0aW9ucyIsInVzZUV2ZW50IiwibXV0YXRpb25PYnNlcnZlciIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJkaXNjb25uZWN0IiwidXNlUmVzaXplT2JzZXJ2ZXIiLCJoYW5kbGVSZXNpemUiLCJyZXNpemVPYnNlcnZlciIsIlJlc2l6ZU9ic2VydmVyIiwiZGVmYXVsdE1lYXN1cmUiLCJ1c2VSZWN0IiwiZmFsbGJhY2tSZWN0Iiwic2V0UmVjdCIsIm1lYXN1cmVSZWN0IiwiY3VycmVudFJlY3QiLCJpc0Nvbm5lY3RlZCIsIm5ld1JlY3QiLCJyZWNvcmRzIiwicmVjb3JkIiwiSFRNTEVsZW1lbnQiLCJjb250YWlucyIsInVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QiLCJvYnNlcnZlIiwiYm9keSIsImNoaWxkTGlzdCIsInN1YnRyZWUiLCJ1c2VSZWN0RGVsdGEiLCJpbml0aWFsUmVjdCIsInVzZVNjcm9sbGFibGVBbmNlc3RvcnMiLCJwcmV2aW91c05vZGUiLCJhbmNlc3RvcnMiLCJ1c2VTY3JvbGxPZmZzZXRzIiwiZWxlbWVudHMiLCJzY3JvbGxDb29yZGluYXRlcyIsInNldFNjcm9sbENvb3JkaW5hdGVzIiwicHJldkVsZW1lbnRzIiwiaGFuZGxlU2Nyb2xsIiwicHJldmlvdXNFbGVtZW50cyIsImNsZWFudXAiLCJlbnRyaWVzIiwic2Nyb2xsYWJsZUVsZW1lbnQiLCJBcnJheSIsImZyb20iLCJ2YWx1ZXMiLCJ1c2VTY3JvbGxPZmZzZXRzRGVsdGEiLCJpbml0aWFsU2Nyb2xsT2Zmc2V0cyIsImhhc1Njcm9sbE9mZnNldHMiLCJzdWJ0cmFjdCIsInVzZVNlbnNvclNldHVwIiwidGVhcmRvd25GbnMiLCJ1c2VTeW50aGV0aWNMaXN0ZW5lcnMiLCJ1c2VXaW5kb3dSZWN0IiwidXNlUmVjdHMiLCJmaXJzdEVsZW1lbnQiLCJ3aW5kb3dSZWN0IiwicmVjdHMiLCJzZXRSZWN0cyIsIm1lYXN1cmVSZWN0cyIsImdldE1lYXN1cmFibGVOb2RlIiwiY2hpbGRyZW4iLCJmaXJzdENoaWxkIiwidXNlRHJhZ092ZXJsYXlNZWFzdXJpbmciLCJoYW5kbGVOb2RlQ2hhbmdlIiwibm9kZVJlZiIsInNldFJlZiIsInVzZU5vZGVSZWYiLCJkZWZhdWx0U2Vuc29ycyIsImRlZmF1bHREYXRhIiwiZGVmYXVsdE1lYXN1cmluZ0NvbmZpZ3VyYXRpb24iLCJkcm9wcGFibGUiLCJXaGlsZURyYWdnaW5nIiwiT3B0aW1pemVkIiwiZHJhZ092ZXJsYXkiLCJEcm9wcGFibGVDb250YWluZXJzTWFwIiwidG9BcnJheSIsImdldEVuYWJsZWQiLCJnZXROb2RlRm9yIiwiZGVmYXVsdFB1YmxpY0NvbnRleHQiLCJhY3RpdmF0b3JFdmVudCIsImFjdGl2ZU5vZGVSZWN0IiwiY29udGFpbmVyTm9kZVJlY3QiLCJtZWFzdXJpbmdDb25maWd1cmF0aW9uIiwiZGVmYXVsdEludGVybmFsQ29udGV4dCIsImFyaWFEZXNjcmliZWRCeUlkIiwiSW50ZXJuYWxDb250ZXh0IiwiUHVibGljQ29udGV4dCIsImdldEluaXRpYWxTdGF0ZSIsIm5vZGVzIiwidHJhbnNsYXRlIiwicmVkdWNlciIsInN0YXRlIiwiYWN0aW9uIiwiRHJhZ01vdmUiLCJEcmFnRW5kIiwiRHJhZ0NhbmNlbCIsIlJlZ2lzdGVyRHJvcHBhYmxlIiwiU2V0RHJvcHBhYmxlRGlzYWJsZWQiLCJVbnJlZ2lzdGVyRHJvcHBhYmxlIiwiUmVzdG9yZUZvY3VzIiwicHJldmlvdXNBY3RpdmF0b3JFdmVudCIsInByZXZpb3VzQWN0aXZlSWQiLCJhY3RpdmVFbGVtZW50IiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiZm9jdXNhYmxlTm9kZSIsImZpbmRGaXJzdEZvY3VzYWJsZU5vZGUiLCJmb2N1cyIsImFwcGx5TW9kaWZpZXJzIiwibW9kaWZpZXJzIiwiYXJncyIsInVzZU1lYXN1cmluZ0NvbmZpZ3VyYXRpb24iLCJ1c2VMYXlvdXRTaGlmdFNjcm9sbENvbXBlbnNhdGlvbiIsImluaXRpYWxpemVkIiwicmVjdERlbHRhIiwiQWN0aXZlRHJhZ2dhYmxlQ29udGV4dCIsIlN0YXR1cyIsIkRuZENvbnRleHQiLCJtZW1vIiwiYWNjZXNzaWJpbGl0eSIsImNvbGxpc2lvbkRldGVjdGlvbiIsIm1lYXN1cmluZyIsInN0b3JlIiwidXNlUmVkdWNlciIsImRpc3BhdGNoTW9uaXRvckV2ZW50IiwicmVnaXN0ZXJNb25pdG9yTGlzdGVuZXIiLCJzdGF0dXMiLCJzZXRTdGF0dXMiLCJVbmluaXRpYWxpemVkIiwiaXNJbml0aWFsaXplZCIsIkluaXRpYWxpemVkIiwiYWN0aXZlSWQiLCJhY3RpdmVSZWN0cyIsImluaXRpYWwiLCJ0cmFuc2xhdGVkIiwiYWN0aXZlUmVmIiwiYWN0aXZlU2Vuc29yIiwic2V0QWN0aXZlU2Vuc29yIiwic2V0QWN0aXZhdG9yRXZlbnQiLCJsYXRlc3RQcm9wcyIsImRyYWdnYWJsZURlc2NyaWJlZEJ5SWQiLCJlbmFibGVkRHJvcHBhYmxlQ29udGFpbmVycyIsImFjdGl2YXRpb25Db29yZGluYXRlcyIsImF1dG9TY3JvbGxPcHRpb25zIiwiZ2V0QXV0b1Njcm9sbGVyT3B0aW9ucyIsImluaXRpYWxBY3RpdmVOb2RlUmVjdCIsImxheW91dFNoaWZ0Q29tcGVuc2F0aW9uIiwicGFyZW50RWxlbWVudCIsInNlbnNvckNvbnRleHQiLCJkcmFnZ2luZ05vZGUiLCJkcmFnZ2luZ05vZGVSZWN0Iiwic2Nyb2xsQWRqdXN0ZWRUcmFuc2xhdGUiLCJvdmVyTm9kZSIsInVzZXNEcmFnT3ZlcmxheSIsIm5vZGVSZWN0RGVsdGEiLCJtb2RpZmllZFRyYW5zbGF0ZSIsIm92ZXJsYXlOb2RlUmVjdCIsInNjcm9sbEFkanVzdG1lbnQiLCJhY3RpdmVOb2RlU2Nyb2xsRGVsdGEiLCJvdmVySWQiLCJzZXRPdmVyIiwiYXBwbGllZFRyYW5zbGF0ZSIsImFjdGl2ZVNlbnNvclJlZiIsImluc3RhbnRpYXRlU2Vuc29yIiwic2Vuc29ySW5zdGFuY2UiLCJvbkRyYWdBYm9ydCIsIm9uRHJhZ1BlbmRpbmciLCJ1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyIsIkluaXRpYWxpemluZyIsImNyZWF0ZUhhbmRsZXIiLCJjYW5jZWxEcm9wIiwic2hvdWxkQ2FuY2VsIiwiUHJvbWlzZSIsInJlc29sdmUiLCJiaW5kQWN0aXZhdG9yVG9TZW5zb3JJbnN0YW50aWF0b3IiLCJhY3RpdmVEcmFnZ2FibGVOb2RlIiwiZG5kS2l0IiwiZGVmYXVsdFByZXZlbnRlZCIsImFjdGl2YXRpb25Db250ZXh0Iiwic2hvdWxkQWN0aXZhdGUiLCJjYXB0dXJlZEJ5Iiwib3ZlckNvbnRhaW5lciIsInB1YmxpY0NvbnRleHQiLCJpbnRlcm5hbENvbnRleHQiLCJQcm92aWRlciIsInJlc3RvcmVGb2N1cyIsImFjdGl2ZVNlbnNvckRpc2FibGVzQXV0b3Njcm9sbCIsImF1dG9TY3JvbGxHbG9iYWxseURpc2FibGVkIiwiTnVsbENvbnRleHQiLCJkZWZhdWx0Um9sZSIsIklEX1BSRUZJWCIsInVzZURyYWdnYWJsZSIsImF0dHJpYnV0ZXMiLCJyb2xlIiwicm9sZURlc2NyaXB0aW9uIiwidGFiSW5kZXgiLCJpc0RyYWdnaW5nIiwic2V0Tm9kZVJlZiIsInNldEFjdGl2YXRvck5vZGVSZWYiLCJkYXRhUmVmIiwibWVtb2l6ZWRBdHRyaWJ1dGVzIiwidXNlRG5kQ29udGV4dCIsImRlZmF1bHRSZXNpemVPYnNlcnZlckNvbmZpZyIsInRpbWVvdXQiLCJ1c2VEcm9wcGFibGUiLCJyZXNpemVPYnNlcnZlckNvbmZpZyIsInByZXZpb3VzIiwicmVzaXplT2JzZXJ2ZXJDb25uZWN0ZWQiLCJjYWxsYmFja0lkIiwicmVzaXplT2JzZXJ2ZXJEaXNhYmxlZCIsInVwZGF0ZU1lYXN1cmVtZW50c0ZvciIsInJlc2l6ZU9ic2VydmVyVGltZW91dCIsImlzQXJyYXkiLCJuZXdFbGVtZW50IiwicHJldmlvdXNFbGVtZW50IiwidW5vYnNlcnZlIiwiaXNPdmVyIiwiQW5pbWF0aW9uTWFuYWdlciIsImFuaW1hdGlvbiIsImNsb25lZENoaWxkcmVuIiwic2V0Q2xvbmVkQ2hpbGRyZW4iLCJzZXRFbGVtZW50IiwicHJldmlvdXNDaGlsZHJlbiIsInRoZW4iLCJjbG9uZUVsZW1lbnQiLCJyZWYiLCJkZWZhdWx0VHJhbnNmb3JtIiwiTnVsbGlmaWVkQ29udGV4dFByb3ZpZGVyIiwiYmFzZVN0eWxlcyIsInRvdWNoQWN0aW9uIiwiZGVmYXVsdFRyYW5zaXRpb24iLCJpc0tleWJvYXJkQWN0aXZhdG9yIiwiUG9zaXRpb25lZE92ZXJsYXkiLCJmb3J3YXJkUmVmIiwiYXMiLCJjbGFzc05hbWUiLCJzdHlsZSIsInRyYW5zaXRpb24iLCJzY2FsZUFkanVzdGVkVHJhbnNmb3JtIiwic3R5bGVzIiwiQ1NTIiwiVHJhbnNmb3JtIiwidG9TdHJpbmciLCJjcmVhdGVFbGVtZW50IiwiZGVmYXVsdERyb3BBbmltYXRpb25TaWRlRWZmZWN0cyIsIm9yaWdpbmFsU3R5bGVzIiwiZ2V0UHJvcGVydHlWYWx1ZSIsInNldFByb3BlcnR5IiwiY2xhc3NMaXN0IiwicmVtb3ZlIiwiZGVmYXVsdEtleWZyYW1lUmVzb2x2ZXIiLCJmaW5hbCIsImRlZmF1bHREcm9wQW5pbWF0aW9uQ29uZmlndXJhdGlvbiIsImR1cmF0aW9uIiwiZWFzaW5nIiwia2V5ZnJhbWVzIiwic2lkZUVmZmVjdHMiLCJvcGFjaXR5IiwidXNlRHJvcEFuaW1hdGlvbiIsImFjdGl2ZURyYWdnYWJsZSIsIm1lYXN1cmFibGVOb2RlIiwiY3JlYXRlRGVmYXVsdERyb3BBbmltYXRpb24iLCJyZXN0Iiwic2NhbGUiLCJmaW5hbFRyYW5zZm9ybSIsImFuaW1hdGlvbktleWZyYW1lcyIsImZpcnN0S2V5ZnJhbWUiLCJsYXN0S2V5ZnJhbWUiLCJhbmltYXRlIiwiZmlsbCIsIm9uZmluaXNoIiwidXNlS2V5IiwiRHJhZ092ZXJsYXkiLCJkcm9wQW5pbWF0aW9uIiwiZHJvcEFuaW1hdGlvbkNvbmZpZyIsIndyYXBwZXJFbGVtZW50IiwiekluZGV4IiwibW9kaWZpZWRUcmFuc2Zvcm0iXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@dnd-kit/core/dist/core.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@dnd-kit/modifiers/dist/modifiers.esm.js":
/*!***************************************************************!*\
  !*** ./node_modules/@dnd-kit/modifiers/dist/modifiers.esm.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createSnapModifier: () => (/* binding */ createSnapModifier),\n/* harmony export */   restrictToFirstScrollableAncestor: () => (/* binding */ restrictToFirstScrollableAncestor),\n/* harmony export */   restrictToHorizontalAxis: () => (/* binding */ restrictToHorizontalAxis),\n/* harmony export */   restrictToParentElement: () => (/* binding */ restrictToParentElement),\n/* harmony export */   restrictToVerticalAxis: () => (/* binding */ restrictToVerticalAxis),\n/* harmony export */   restrictToWindowEdges: () => (/* binding */ restrictToWindowEdges),\n/* harmony export */   snapCenterToCursor: () => (/* binding */ snapCenterToCursor)\n/* harmony export */ });\n/* harmony import */ var _dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @dnd-kit/utilities */ \"(ssr)/./node_modules/@dnd-kit/utilities/dist/utilities.esm.js\");\n\n\nfunction createSnapModifier(gridSize) {\n  return _ref => {\n    let {\n      transform\n    } = _ref;\n    return { ...transform,\n      x: Math.ceil(transform.x / gridSize) * gridSize,\n      y: Math.ceil(transform.y / gridSize) * gridSize\n    };\n  };\n}\n\nconst restrictToHorizontalAxis = _ref => {\n  let {\n    transform\n  } = _ref;\n  return { ...transform,\n    y: 0\n  };\n};\n\nfunction restrictToBoundingRect(transform, rect, boundingRect) {\n  const value = { ...transform\n  };\n\n  if (rect.top + transform.y <= boundingRect.top) {\n    value.y = boundingRect.top - rect.top;\n  } else if (rect.bottom + transform.y >= boundingRect.top + boundingRect.height) {\n    value.y = boundingRect.top + boundingRect.height - rect.bottom;\n  }\n\n  if (rect.left + transform.x <= boundingRect.left) {\n    value.x = boundingRect.left - rect.left;\n  } else if (rect.right + transform.x >= boundingRect.left + boundingRect.width) {\n    value.x = boundingRect.left + boundingRect.width - rect.right;\n  }\n\n  return value;\n}\n\nconst restrictToParentElement = _ref => {\n  let {\n    containerNodeRect,\n    draggingNodeRect,\n    transform\n  } = _ref;\n\n  if (!draggingNodeRect || !containerNodeRect) {\n    return transform;\n  }\n\n  return restrictToBoundingRect(transform, draggingNodeRect, containerNodeRect);\n};\n\nconst restrictToFirstScrollableAncestor = _ref => {\n  let {\n    draggingNodeRect,\n    transform,\n    scrollableAncestorRects\n  } = _ref;\n  const firstScrollableAncestorRect = scrollableAncestorRects[0];\n\n  if (!draggingNodeRect || !firstScrollableAncestorRect) {\n    return transform;\n  }\n\n  return restrictToBoundingRect(transform, draggingNodeRect, firstScrollableAncestorRect);\n};\n\nconst restrictToVerticalAxis = _ref => {\n  let {\n    transform\n  } = _ref;\n  return { ...transform,\n    x: 0\n  };\n};\n\nconst restrictToWindowEdges = _ref => {\n  let {\n    transform,\n    draggingNodeRect,\n    windowRect\n  } = _ref;\n\n  if (!draggingNodeRect || !windowRect) {\n    return transform;\n  }\n\n  return restrictToBoundingRect(transform, draggingNodeRect, windowRect);\n};\n\nconst snapCenterToCursor = _ref => {\n  let {\n    activatorEvent,\n    draggingNodeRect,\n    transform\n  } = _ref;\n\n  if (draggingNodeRect && activatorEvent) {\n    const activatorCoordinates = (0,_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_0__.getEventCoordinates)(activatorEvent);\n\n    if (!activatorCoordinates) {\n      return transform;\n    }\n\n    const offsetX = activatorCoordinates.x - draggingNodeRect.left;\n    const offsetY = activatorCoordinates.y - draggingNodeRect.top;\n    return { ...transform,\n      x: transform.x + offsetX - draggingNodeRect.width / 2,\n      y: transform.y + offsetY - draggingNodeRect.height / 2\n    };\n  }\n\n  return transform;\n};\n\n\n//# sourceMappingURL=modifiers.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRuZC1raXQvbW9kaWZpZXJzL2Rpc3QvbW9kaWZpZXJzLmVzbS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUF5RDs7QUFFekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ04sYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLFdBQVc7QUFDWDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxrQkFBa0I7QUFDbEI7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLFdBQVc7QUFDWDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQSxpQ0FBaUMsdUVBQW1COztBQUVwRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUV1TDtBQUN2TCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFx6ZWtlXFxQcm9qZWN0c1xcbmFycmF0aXZlLXN1cmdlb25cXG5vZGVfbW9kdWxlc1xcQGRuZC1raXRcXG1vZGlmaWVyc1xcZGlzdFxcbW9kaWZpZXJzLmVzbS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRFdmVudENvb3JkaW5hdGVzIH0gZnJvbSAnQGRuZC1raXQvdXRpbGl0aWVzJztcblxuZnVuY3Rpb24gY3JlYXRlU25hcE1vZGlmaWVyKGdyaWRTaXplKSB7XG4gIHJldHVybiBfcmVmID0+IHtcbiAgICBsZXQge1xuICAgICAgdHJhbnNmb3JtXG4gICAgfSA9IF9yZWY7XG4gICAgcmV0dXJuIHsgLi4udHJhbnNmb3JtLFxuICAgICAgeDogTWF0aC5jZWlsKHRyYW5zZm9ybS54IC8gZ3JpZFNpemUpICogZ3JpZFNpemUsXG4gICAgICB5OiBNYXRoLmNlaWwodHJhbnNmb3JtLnkgLyBncmlkU2l6ZSkgKiBncmlkU2l6ZVxuICAgIH07XG4gIH07XG59XG5cbmNvbnN0IHJlc3RyaWN0VG9Ib3Jpem9udGFsQXhpcyA9IF9yZWYgPT4ge1xuICBsZXQge1xuICAgIHRyYW5zZm9ybVxuICB9ID0gX3JlZjtcbiAgcmV0dXJuIHsgLi4udHJhbnNmb3JtLFxuICAgIHk6IDBcbiAgfTtcbn07XG5cbmZ1bmN0aW9uIHJlc3RyaWN0VG9Cb3VuZGluZ1JlY3QodHJhbnNmb3JtLCByZWN0LCBib3VuZGluZ1JlY3QpIHtcbiAgY29uc3QgdmFsdWUgPSB7IC4uLnRyYW5zZm9ybVxuICB9O1xuXG4gIGlmIChyZWN0LnRvcCArIHRyYW5zZm9ybS55IDw9IGJvdW5kaW5nUmVjdC50b3ApIHtcbiAgICB2YWx1ZS55ID0gYm91bmRpbmdSZWN0LnRvcCAtIHJlY3QudG9wO1xuICB9IGVsc2UgaWYgKHJlY3QuYm90dG9tICsgdHJhbnNmb3JtLnkgPj0gYm91bmRpbmdSZWN0LnRvcCArIGJvdW5kaW5nUmVjdC5oZWlnaHQpIHtcbiAgICB2YWx1ZS55ID0gYm91bmRpbmdSZWN0LnRvcCArIGJvdW5kaW5nUmVjdC5oZWlnaHQgLSByZWN0LmJvdHRvbTtcbiAgfVxuXG4gIGlmIChyZWN0LmxlZnQgKyB0cmFuc2Zvcm0ueCA8PSBib3VuZGluZ1JlY3QubGVmdCkge1xuICAgIHZhbHVlLnggPSBib3VuZGluZ1JlY3QubGVmdCAtIHJlY3QubGVmdDtcbiAgfSBlbHNlIGlmIChyZWN0LnJpZ2h0ICsgdHJhbnNmb3JtLnggPj0gYm91bmRpbmdSZWN0LmxlZnQgKyBib3VuZGluZ1JlY3Qud2lkdGgpIHtcbiAgICB2YWx1ZS54ID0gYm91bmRpbmdSZWN0LmxlZnQgKyBib3VuZGluZ1JlY3Qud2lkdGggLSByZWN0LnJpZ2h0O1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG5jb25zdCByZXN0cmljdFRvUGFyZW50RWxlbWVudCA9IF9yZWYgPT4ge1xuICBsZXQge1xuICAgIGNvbnRhaW5lck5vZGVSZWN0LFxuICAgIGRyYWdnaW5nTm9kZVJlY3QsXG4gICAgdHJhbnNmb3JtXG4gIH0gPSBfcmVmO1xuXG4gIGlmICghZHJhZ2dpbmdOb2RlUmVjdCB8fCAhY29udGFpbmVyTm9kZVJlY3QpIHtcbiAgICByZXR1cm4gdHJhbnNmb3JtO1xuICB9XG5cbiAgcmV0dXJuIHJlc3RyaWN0VG9Cb3VuZGluZ1JlY3QodHJhbnNmb3JtLCBkcmFnZ2luZ05vZGVSZWN0LCBjb250YWluZXJOb2RlUmVjdCk7XG59O1xuXG5jb25zdCByZXN0cmljdFRvRmlyc3RTY3JvbGxhYmxlQW5jZXN0b3IgPSBfcmVmID0+IHtcbiAgbGV0IHtcbiAgICBkcmFnZ2luZ05vZGVSZWN0LFxuICAgIHRyYW5zZm9ybSxcbiAgICBzY3JvbGxhYmxlQW5jZXN0b3JSZWN0c1xuICB9ID0gX3JlZjtcbiAgY29uc3QgZmlyc3RTY3JvbGxhYmxlQW5jZXN0b3JSZWN0ID0gc2Nyb2xsYWJsZUFuY2VzdG9yUmVjdHNbMF07XG5cbiAgaWYgKCFkcmFnZ2luZ05vZGVSZWN0IHx8ICFmaXJzdFNjcm9sbGFibGVBbmNlc3RvclJlY3QpIHtcbiAgICByZXR1cm4gdHJhbnNmb3JtO1xuICB9XG5cbiAgcmV0dXJuIHJlc3RyaWN0VG9Cb3VuZGluZ1JlY3QodHJhbnNmb3JtLCBkcmFnZ2luZ05vZGVSZWN0LCBmaXJzdFNjcm9sbGFibGVBbmNlc3RvclJlY3QpO1xufTtcblxuY29uc3QgcmVzdHJpY3RUb1ZlcnRpY2FsQXhpcyA9IF9yZWYgPT4ge1xuICBsZXQge1xuICAgIHRyYW5zZm9ybVxuICB9ID0gX3JlZjtcbiAgcmV0dXJuIHsgLi4udHJhbnNmb3JtLFxuICAgIHg6IDBcbiAgfTtcbn07XG5cbmNvbnN0IHJlc3RyaWN0VG9XaW5kb3dFZGdlcyA9IF9yZWYgPT4ge1xuICBsZXQge1xuICAgIHRyYW5zZm9ybSxcbiAgICBkcmFnZ2luZ05vZGVSZWN0LFxuICAgIHdpbmRvd1JlY3RcbiAgfSA9IF9yZWY7XG5cbiAgaWYgKCFkcmFnZ2luZ05vZGVSZWN0IHx8ICF3aW5kb3dSZWN0KSB7XG4gICAgcmV0dXJuIHRyYW5zZm9ybTtcbiAgfVxuXG4gIHJldHVybiByZXN0cmljdFRvQm91bmRpbmdSZWN0KHRyYW5zZm9ybSwgZHJhZ2dpbmdOb2RlUmVjdCwgd2luZG93UmVjdCk7XG59O1xuXG5jb25zdCBzbmFwQ2VudGVyVG9DdXJzb3IgPSBfcmVmID0+IHtcbiAgbGV0IHtcbiAgICBhY3RpdmF0b3JFdmVudCxcbiAgICBkcmFnZ2luZ05vZGVSZWN0LFxuICAgIHRyYW5zZm9ybVxuICB9ID0gX3JlZjtcblxuICBpZiAoZHJhZ2dpbmdOb2RlUmVjdCAmJiBhY3RpdmF0b3JFdmVudCkge1xuICAgIGNvbnN0IGFjdGl2YXRvckNvb3JkaW5hdGVzID0gZ2V0RXZlbnRDb29yZGluYXRlcyhhY3RpdmF0b3JFdmVudCk7XG5cbiAgICBpZiAoIWFjdGl2YXRvckNvb3JkaW5hdGVzKSB7XG4gICAgICByZXR1cm4gdHJhbnNmb3JtO1xuICAgIH1cblxuICAgIGNvbnN0IG9mZnNldFggPSBhY3RpdmF0b3JDb29yZGluYXRlcy54IC0gZHJhZ2dpbmdOb2RlUmVjdC5sZWZ0O1xuICAgIGNvbnN0IG9mZnNldFkgPSBhY3RpdmF0b3JDb29yZGluYXRlcy55IC0gZHJhZ2dpbmdOb2RlUmVjdC50b3A7XG4gICAgcmV0dXJuIHsgLi4udHJhbnNmb3JtLFxuICAgICAgeDogdHJhbnNmb3JtLnggKyBvZmZzZXRYIC0gZHJhZ2dpbmdOb2RlUmVjdC53aWR0aCAvIDIsXG4gICAgICB5OiB0cmFuc2Zvcm0ueSArIG9mZnNldFkgLSBkcmFnZ2luZ05vZGVSZWN0LmhlaWdodCAvIDJcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHRyYW5zZm9ybTtcbn07XG5cbmV4cG9ydCB7IGNyZWF0ZVNuYXBNb2RpZmllciwgcmVzdHJpY3RUb0ZpcnN0U2Nyb2xsYWJsZUFuY2VzdG9yLCByZXN0cmljdFRvSG9yaXpvbnRhbEF4aXMsIHJlc3RyaWN0VG9QYXJlbnRFbGVtZW50LCByZXN0cmljdFRvVmVydGljYWxBeGlzLCByZXN0cmljdFRvV2luZG93RWRnZXMsIHNuYXBDZW50ZXJUb0N1cnNvciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9kaWZpZXJzLmVzbS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@dnd-kit/modifiers/dist/modifiers.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@dnd-kit/sortable/dist/sortable.esm.js":
/*!*************************************************************!*\
  !*** ./node_modules/@dnd-kit/sortable/dist/sortable.esm.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SortableContext: () => (/* binding */ SortableContext),\n/* harmony export */   arrayMove: () => (/* binding */ arrayMove),\n/* harmony export */   arraySwap: () => (/* binding */ arraySwap),\n/* harmony export */   defaultAnimateLayoutChanges: () => (/* binding */ defaultAnimateLayoutChanges),\n/* harmony export */   defaultNewIndexGetter: () => (/* binding */ defaultNewIndexGetter),\n/* harmony export */   hasSortableData: () => (/* binding */ hasSortableData),\n/* harmony export */   horizontalListSortingStrategy: () => (/* binding */ horizontalListSortingStrategy),\n/* harmony export */   rectSortingStrategy: () => (/* binding */ rectSortingStrategy),\n/* harmony export */   rectSwappingStrategy: () => (/* binding */ rectSwappingStrategy),\n/* harmony export */   sortableKeyboardCoordinates: () => (/* binding */ sortableKeyboardCoordinates),\n/* harmony export */   useSortable: () => (/* binding */ useSortable),\n/* harmony export */   verticalListSortingStrategy: () => (/* binding */ verticalListSortingStrategy)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _barrel_optimize_names_KeyboardCode_closestCorners_getClientRect_getFirstCollision_getScrollableAncestors_useDndContext_useDraggable_useDroppable_dnd_kit_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! __barrel_optimize__?names=KeyboardCode,closestCorners,getClientRect,getFirstCollision,getScrollableAncestors,useDndContext,useDraggable,useDroppable!=!@dnd-kit/core */ \"(ssr)/__barrel_optimize__?names=KeyboardCode,closestCorners,getClientRect,getFirstCollision,getScrollableAncestors,useDndContext,useDraggable,useDroppable!=!./node_modules/@dnd-kit/core/dist/core.esm.js\");\n/* harmony import */ var _barrel_optimize_names_CSS_isKeyboardEvent_subtract_useCombinedRefs_useIsomorphicLayoutEffect_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! __barrel_optimize__?names=CSS,isKeyboardEvent,subtract,useCombinedRefs,useIsomorphicLayoutEffect,useUniqueId!=!@dnd-kit/utilities */ \"(ssr)/__barrel_optimize__?names=CSS,isKeyboardEvent,subtract,useCombinedRefs,useIsomorphicLayoutEffect,useUniqueId!=!./node_modules/@dnd-kit/utilities/dist/utilities.esm.js\");\n\n\n\n/**\r\n * Move an array item to a different position. Returns a new array with the item moved to the new position.\r\n */ function arrayMove(array, from, to) {\n    const newArray = array.slice();\n    newArray.splice(to < 0 ? newArray.length + to : to, 0, newArray.splice(from, 1)[0]);\n    return newArray;\n}\n/**\r\n * Swap an array item to a different position. Returns a new array with the item swapped to the new position.\r\n */ function arraySwap(array, from, to) {\n    const newArray = array.slice();\n    newArray[from] = array[to];\n    newArray[to] = array[from];\n    return newArray;\n}\nfunction getSortedRects(items, rects) {\n    return items.reduce((accumulator, id, index)=>{\n        const rect = rects.get(id);\n        if (rect) {\n            accumulator[index] = rect;\n        }\n        return accumulator;\n    }, Array(items.length));\n}\nfunction isValidIndex(index) {\n    return index !== null && index >= 0;\n}\nfunction itemsEqual(a, b) {\n    if (a === b) {\n        return true;\n    }\n    if (a.length !== b.length) {\n        return false;\n    }\n    for(let i = 0; i < a.length; i++){\n        if (a[i] !== b[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction normalizeDisabled(disabled) {\n    if (typeof disabled === 'boolean') {\n        return {\n            draggable: disabled,\n            droppable: disabled\n        };\n    }\n    return disabled;\n}\n// To-do: We should be calculating scale transformation\nconst defaultScale = {\n    scaleX: 1,\n    scaleY: 1\n};\nconst horizontalListSortingStrategy = (_ref)=>{\n    var _rects$activeIndex;\n    let { rects, activeNodeRect: fallbackActiveRect, activeIndex, overIndex, index } = _ref;\n    const activeNodeRect = (_rects$activeIndex = rects[activeIndex]) != null ? _rects$activeIndex : fallbackActiveRect;\n    if (!activeNodeRect) {\n        return null;\n    }\n    const itemGap = getItemGap(rects, index, activeIndex);\n    if (index === activeIndex) {\n        const newIndexRect = rects[overIndex];\n        if (!newIndexRect) {\n            return null;\n        }\n        return {\n            x: activeIndex < overIndex ? newIndexRect.left + newIndexRect.width - (activeNodeRect.left + activeNodeRect.width) : newIndexRect.left - activeNodeRect.left,\n            y: 0,\n            ...defaultScale\n        };\n    }\n    if (index > activeIndex && index <= overIndex) {\n        return {\n            x: -activeNodeRect.width - itemGap,\n            y: 0,\n            ...defaultScale\n        };\n    }\n    if (index < activeIndex && index >= overIndex) {\n        return {\n            x: activeNodeRect.width + itemGap,\n            y: 0,\n            ...defaultScale\n        };\n    }\n    return {\n        x: 0,\n        y: 0,\n        ...defaultScale\n    };\n};\nfunction getItemGap(rects, index, activeIndex) {\n    const currentRect = rects[index];\n    const previousRect = rects[index - 1];\n    const nextRect = rects[index + 1];\n    if (!currentRect || !previousRect && !nextRect) {\n        return 0;\n    }\n    if (activeIndex < index) {\n        return previousRect ? currentRect.left - (previousRect.left + previousRect.width) : nextRect.left - (currentRect.left + currentRect.width);\n    }\n    return nextRect ? nextRect.left - (currentRect.left + currentRect.width) : currentRect.left - (previousRect.left + previousRect.width);\n}\nconst rectSortingStrategy = (_ref)=>{\n    let { rects, activeIndex, overIndex, index } = _ref;\n    const newRects = arrayMove(rects, overIndex, activeIndex);\n    const oldRect = rects[index];\n    const newRect = newRects[index];\n    if (!newRect || !oldRect) {\n        return null;\n    }\n    return {\n        x: newRect.left - oldRect.left,\n        y: newRect.top - oldRect.top,\n        scaleX: newRect.width / oldRect.width,\n        scaleY: newRect.height / oldRect.height\n    };\n};\nconst rectSwappingStrategy = (_ref)=>{\n    let { activeIndex, index, rects, overIndex } = _ref;\n    let oldRect;\n    let newRect;\n    if (index === activeIndex) {\n        oldRect = rects[index];\n        newRect = rects[overIndex];\n    }\n    if (index === overIndex) {\n        oldRect = rects[index];\n        newRect = rects[activeIndex];\n    }\n    if (!newRect || !oldRect) {\n        return null;\n    }\n    return {\n        x: newRect.left - oldRect.left,\n        y: newRect.top - oldRect.top,\n        scaleX: newRect.width / oldRect.width,\n        scaleY: newRect.height / oldRect.height\n    };\n};\n// To-do: We should be calculating scale transformation\nconst defaultScale$1 = {\n    scaleX: 1,\n    scaleY: 1\n};\nconst verticalListSortingStrategy = (_ref)=>{\n    var _rects$activeIndex;\n    let { activeIndex, activeNodeRect: fallbackActiveRect, index, rects, overIndex } = _ref;\n    const activeNodeRect = (_rects$activeIndex = rects[activeIndex]) != null ? _rects$activeIndex : fallbackActiveRect;\n    if (!activeNodeRect) {\n        return null;\n    }\n    if (index === activeIndex) {\n        const overIndexRect = rects[overIndex];\n        if (!overIndexRect) {\n            return null;\n        }\n        return {\n            x: 0,\n            y: activeIndex < overIndex ? overIndexRect.top + overIndexRect.height - (activeNodeRect.top + activeNodeRect.height) : overIndexRect.top - activeNodeRect.top,\n            ...defaultScale$1\n        };\n    }\n    const itemGap = getItemGap$1(rects, index, activeIndex);\n    if (index > activeIndex && index <= overIndex) {\n        return {\n            x: 0,\n            y: -activeNodeRect.height - itemGap,\n            ...defaultScale$1\n        };\n    }\n    if (index < activeIndex && index >= overIndex) {\n        return {\n            x: 0,\n            y: activeNodeRect.height + itemGap,\n            ...defaultScale$1\n        };\n    }\n    return {\n        x: 0,\n        y: 0,\n        ...defaultScale$1\n    };\n};\nfunction getItemGap$1(clientRects, index, activeIndex) {\n    const currentRect = clientRects[index];\n    const previousRect = clientRects[index - 1];\n    const nextRect = clientRects[index + 1];\n    if (!currentRect) {\n        return 0;\n    }\n    if (activeIndex < index) {\n        return previousRect ? currentRect.top - (previousRect.top + previousRect.height) : nextRect ? nextRect.top - (currentRect.top + currentRect.height) : 0;\n    }\n    return nextRect ? nextRect.top - (currentRect.top + currentRect.height) : previousRect ? currentRect.top - (previousRect.top + previousRect.height) : 0;\n}\nconst ID_PREFIX = 'Sortable';\nconst Context = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createContext({\n    activeIndex: -1,\n    containerId: ID_PREFIX,\n    disableTransforms: false,\n    items: [],\n    overIndex: -1,\n    useDragOverlay: false,\n    sortedRects: [],\n    strategy: rectSortingStrategy,\n    disabled: {\n        draggable: false,\n        droppable: false\n    }\n});\nfunction SortableContext(_ref) {\n    let { children, id, items: userDefinedItems, strategy = rectSortingStrategy, disabled: disabledProp = false } = _ref;\n    const { active, dragOverlay, droppableRects, over, measureDroppableContainers } = (0,_barrel_optimize_names_KeyboardCode_closestCorners_getClientRect_getFirstCollision_getScrollableAncestors_useDndContext_useDraggable_useDroppable_dnd_kit_core__WEBPACK_IMPORTED_MODULE_1__.useDndContext)();\n    const containerId = (0,_barrel_optimize_names_CSS_isKeyboardEvent_subtract_useCombinedRefs_useIsomorphicLayoutEffect_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.useUniqueId)(ID_PREFIX, id);\n    const useDragOverlay = Boolean(dragOverlay.rect !== null);\n    const items = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"SortableContext.useMemo[items]\": ()=>userDefinedItems.map({\n                \"SortableContext.useMemo[items]\": (item)=>typeof item === 'object' && 'id' in item ? item.id : item\n            }[\"SortableContext.useMemo[items]\"])\n    }[\"SortableContext.useMemo[items]\"], [\n        userDefinedItems\n    ]);\n    const isDragging = active != null;\n    const activeIndex = active ? items.indexOf(active.id) : -1;\n    const overIndex = over ? items.indexOf(over.id) : -1;\n    const previousItemsRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(items);\n    const itemsHaveChanged = !itemsEqual(items, previousItemsRef.current);\n    const disableTransforms = overIndex !== -1 && activeIndex === -1 || itemsHaveChanged;\n    const disabled = normalizeDisabled(disabledProp);\n    (0,_barrel_optimize_names_CSS_isKeyboardEvent_subtract_useCombinedRefs_useIsomorphicLayoutEffect_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.useIsomorphicLayoutEffect)({\n        \"SortableContext.useIsomorphicLayoutEffect\": ()=>{\n            if (itemsHaveChanged && isDragging) {\n                measureDroppableContainers(items);\n            }\n        }\n    }[\"SortableContext.useIsomorphicLayoutEffect\"], [\n        itemsHaveChanged,\n        items,\n        isDragging,\n        measureDroppableContainers\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"SortableContext.useEffect\": ()=>{\n            previousItemsRef.current = items;\n        }\n    }[\"SortableContext.useEffect\"], [\n        items\n    ]);\n    const contextValue = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"SortableContext.useMemo[contextValue]\": ()=>({\n                activeIndex,\n                containerId,\n                disabled,\n                disableTransforms,\n                items,\n                overIndex,\n                useDragOverlay,\n                sortedRects: getSortedRects(items, droppableRects),\n                strategy\n            })\n    }[\"SortableContext.useMemo[contextValue]\"], [\n        activeIndex,\n        containerId,\n        disabled.draggable,\n        disabled.droppable,\n        disableTransforms,\n        items,\n        overIndex,\n        droppableRects,\n        useDragOverlay,\n        strategy\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Context.Provider, {\n        value: contextValue\n    }, children);\n}\nconst defaultNewIndexGetter = (_ref)=>{\n    let { id, items, activeIndex, overIndex } = _ref;\n    return arrayMove(items, activeIndex, overIndex).indexOf(id);\n};\nconst defaultAnimateLayoutChanges = (_ref2)=>{\n    let { containerId, isSorting, wasDragging, index, items, newIndex, previousItems, previousContainerId, transition } = _ref2;\n    if (!transition || !wasDragging) {\n        return false;\n    }\n    if (previousItems !== items && index === newIndex) {\n        return false;\n    }\n    if (isSorting) {\n        return true;\n    }\n    return newIndex !== index && containerId === previousContainerId;\n};\nconst defaultTransition = {\n    duration: 200,\n    easing: 'ease'\n};\nconst transitionProperty = 'transform';\nconst disabledTransition = /*#__PURE__*/ _barrel_optimize_names_CSS_isKeyboardEvent_subtract_useCombinedRefs_useIsomorphicLayoutEffect_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.CSS.Transition.toString({\n    property: transitionProperty,\n    duration: 0,\n    easing: 'linear'\n});\nconst defaultAttributes = {\n    roleDescription: 'sortable'\n};\n/*\r\n * When the index of an item changes while sorting,\r\n * we need to temporarily disable the transforms\r\n */ function useDerivedTransform(_ref) {\n    let { disabled, index, node, rect } = _ref;\n    const [derivedTransform, setDerivedtransform] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const previousIndex = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(index);\n    (0,_barrel_optimize_names_CSS_isKeyboardEvent_subtract_useCombinedRefs_useIsomorphicLayoutEffect_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.useIsomorphicLayoutEffect)({\n        \"useDerivedTransform.useIsomorphicLayoutEffect\": ()=>{\n            if (!disabled && index !== previousIndex.current && node.current) {\n                const initial = rect.current;\n                if (initial) {\n                    const current = (0,_barrel_optimize_names_KeyboardCode_closestCorners_getClientRect_getFirstCollision_getScrollableAncestors_useDndContext_useDraggable_useDroppable_dnd_kit_core__WEBPACK_IMPORTED_MODULE_1__.getClientRect)(node.current, {\n                        ignoreTransform: true\n                    });\n                    const delta = {\n                        x: initial.left - current.left,\n                        y: initial.top - current.top,\n                        scaleX: initial.width / current.width,\n                        scaleY: initial.height / current.height\n                    };\n                    if (delta.x || delta.y) {\n                        setDerivedtransform(delta);\n                    }\n                }\n            }\n            if (index !== previousIndex.current) {\n                previousIndex.current = index;\n            }\n        }\n    }[\"useDerivedTransform.useIsomorphicLayoutEffect\"], [\n        disabled,\n        index,\n        node,\n        rect\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useDerivedTransform.useEffect\": ()=>{\n            if (derivedTransform) {\n                setDerivedtransform(null);\n            }\n        }\n    }[\"useDerivedTransform.useEffect\"], [\n        derivedTransform\n    ]);\n    return derivedTransform;\n}\nfunction useSortable(_ref) {\n    let { animateLayoutChanges = defaultAnimateLayoutChanges, attributes: userDefinedAttributes, disabled: localDisabled, data: customData, getNewIndex = defaultNewIndexGetter, id, strategy: localStrategy, resizeObserverConfig, transition = defaultTransition } = _ref;\n    const { items, containerId, activeIndex, disabled: globalDisabled, disableTransforms, sortedRects, overIndex, useDragOverlay, strategy: globalStrategy } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Context);\n    const disabled = normalizeLocalDisabled(localDisabled, globalDisabled);\n    const index = items.indexOf(id);\n    const data = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"useSortable.useMemo[data]\": ()=>({\n                sortable: {\n                    containerId,\n                    index,\n                    items\n                },\n                ...customData\n            })\n    }[\"useSortable.useMemo[data]\"], [\n        containerId,\n        customData,\n        index,\n        items\n    ]);\n    const itemsAfterCurrentSortable = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"useSortable.useMemo[itemsAfterCurrentSortable]\": ()=>items.slice(items.indexOf(id))\n    }[\"useSortable.useMemo[itemsAfterCurrentSortable]\"], [\n        items,\n        id\n    ]);\n    const { rect, node, isOver, setNodeRef: setDroppableNodeRef } = (0,_barrel_optimize_names_KeyboardCode_closestCorners_getClientRect_getFirstCollision_getScrollableAncestors_useDndContext_useDraggable_useDroppable_dnd_kit_core__WEBPACK_IMPORTED_MODULE_1__.useDroppable)({\n        id,\n        data,\n        disabled: disabled.droppable,\n        resizeObserverConfig: {\n            updateMeasurementsFor: itemsAfterCurrentSortable,\n            ...resizeObserverConfig\n        }\n    });\n    const { active, activatorEvent, activeNodeRect, attributes, setNodeRef: setDraggableNodeRef, listeners, isDragging, over, setActivatorNodeRef, transform } = (0,_barrel_optimize_names_KeyboardCode_closestCorners_getClientRect_getFirstCollision_getScrollableAncestors_useDndContext_useDraggable_useDroppable_dnd_kit_core__WEBPACK_IMPORTED_MODULE_1__.useDraggable)({\n        id,\n        data,\n        attributes: {\n            ...defaultAttributes,\n            ...userDefinedAttributes\n        },\n        disabled: disabled.draggable\n    });\n    const setNodeRef = (0,_barrel_optimize_names_CSS_isKeyboardEvent_subtract_useCombinedRefs_useIsomorphicLayoutEffect_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.useCombinedRefs)(setDroppableNodeRef, setDraggableNodeRef);\n    const isSorting = Boolean(active);\n    const displaceItem = isSorting && !disableTransforms && isValidIndex(activeIndex) && isValidIndex(overIndex);\n    const shouldDisplaceDragSource = !useDragOverlay && isDragging;\n    const dragSourceDisplacement = shouldDisplaceDragSource && displaceItem ? transform : null;\n    const strategy = localStrategy != null ? localStrategy : globalStrategy;\n    const finalTransform = displaceItem ? dragSourceDisplacement != null ? dragSourceDisplacement : strategy({\n        rects: sortedRects,\n        activeNodeRect,\n        activeIndex,\n        overIndex,\n        index\n    }) : null;\n    const newIndex = isValidIndex(activeIndex) && isValidIndex(overIndex) ? getNewIndex({\n        id,\n        items,\n        activeIndex,\n        overIndex\n    }) : index;\n    const activeId = active == null ? void 0 : active.id;\n    const previous = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({\n        activeId,\n        items,\n        newIndex,\n        containerId\n    });\n    const itemsHaveChanged = items !== previous.current.items;\n    const shouldAnimateLayoutChanges = animateLayoutChanges({\n        active,\n        containerId,\n        isDragging,\n        isSorting,\n        id,\n        index,\n        items,\n        newIndex: previous.current.newIndex,\n        previousItems: previous.current.items,\n        previousContainerId: previous.current.containerId,\n        transition,\n        wasDragging: previous.current.activeId != null\n    });\n    const derivedTransform = useDerivedTransform({\n        disabled: !shouldAnimateLayoutChanges,\n        index,\n        node,\n        rect\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useSortable.useEffect\": ()=>{\n            if (isSorting && previous.current.newIndex !== newIndex) {\n                previous.current.newIndex = newIndex;\n            }\n            if (containerId !== previous.current.containerId) {\n                previous.current.containerId = containerId;\n            }\n            if (items !== previous.current.items) {\n                previous.current.items = items;\n            }\n        }\n    }[\"useSortable.useEffect\"], [\n        isSorting,\n        newIndex,\n        containerId,\n        items\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useSortable.useEffect\": ()=>{\n            if (activeId === previous.current.activeId) {\n                return;\n            }\n            if (activeId != null && previous.current.activeId == null) {\n                previous.current.activeId = activeId;\n                return;\n            }\n            const timeoutId = setTimeout({\n                \"useSortable.useEffect.timeoutId\": ()=>{\n                    previous.current.activeId = activeId;\n                }\n            }[\"useSortable.useEffect.timeoutId\"], 50);\n            return ({\n                \"useSortable.useEffect\": ()=>clearTimeout(timeoutId)\n            })[\"useSortable.useEffect\"];\n        }\n    }[\"useSortable.useEffect\"], [\n        activeId\n    ]);\n    return {\n        active,\n        activeIndex,\n        attributes,\n        data,\n        rect,\n        index,\n        newIndex,\n        items,\n        isOver,\n        isSorting,\n        isDragging,\n        listeners,\n        node,\n        overIndex,\n        over,\n        setNodeRef,\n        setActivatorNodeRef,\n        setDroppableNodeRef,\n        setDraggableNodeRef,\n        transform: derivedTransform != null ? derivedTransform : finalTransform,\n        transition: getTransition()\n    };\n    function getTransition() {\n        if (derivedTransform || // Or to prevent items jumping to back to their \"new\" position when items change\n        itemsHaveChanged && previous.current.newIndex === index) {\n            return disabledTransition;\n        }\n        if (shouldDisplaceDragSource && !(0,_barrel_optimize_names_CSS_isKeyboardEvent_subtract_useCombinedRefs_useIsomorphicLayoutEffect_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.isKeyboardEvent)(activatorEvent) || !transition) {\n            return undefined;\n        }\n        if (isSorting || shouldAnimateLayoutChanges) {\n            return _barrel_optimize_names_CSS_isKeyboardEvent_subtract_useCombinedRefs_useIsomorphicLayoutEffect_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.CSS.Transition.toString({\n                ...transition,\n                property: transitionProperty\n            });\n        }\n        return undefined;\n    }\n}\nfunction normalizeLocalDisabled(localDisabled, globalDisabled) {\n    var _localDisabled$dragga, _localDisabled$droppa;\n    if (typeof localDisabled === 'boolean') {\n        return {\n            draggable: localDisabled,\n            // Backwards compatibility\n            droppable: false\n        };\n    }\n    return {\n        draggable: (_localDisabled$dragga = localDisabled == null ? void 0 : localDisabled.draggable) != null ? _localDisabled$dragga : globalDisabled.draggable,\n        droppable: (_localDisabled$droppa = localDisabled == null ? void 0 : localDisabled.droppable) != null ? _localDisabled$droppa : globalDisabled.droppable\n    };\n}\nfunction hasSortableData(entry) {\n    if (!entry) {\n        return false;\n    }\n    const data = entry.data.current;\n    if (data && 'sortable' in data && typeof data.sortable === 'object' && 'containerId' in data.sortable && 'items' in data.sortable && 'index' in data.sortable) {\n        return true;\n    }\n    return false;\n}\nconst directions = [\n    _barrel_optimize_names_KeyboardCode_closestCorners_getClientRect_getFirstCollision_getScrollableAncestors_useDndContext_useDraggable_useDroppable_dnd_kit_core__WEBPACK_IMPORTED_MODULE_1__.KeyboardCode.Down,\n    _barrel_optimize_names_KeyboardCode_closestCorners_getClientRect_getFirstCollision_getScrollableAncestors_useDndContext_useDraggable_useDroppable_dnd_kit_core__WEBPACK_IMPORTED_MODULE_1__.KeyboardCode.Right,\n    _barrel_optimize_names_KeyboardCode_closestCorners_getClientRect_getFirstCollision_getScrollableAncestors_useDndContext_useDraggable_useDroppable_dnd_kit_core__WEBPACK_IMPORTED_MODULE_1__.KeyboardCode.Up,\n    _barrel_optimize_names_KeyboardCode_closestCorners_getClientRect_getFirstCollision_getScrollableAncestors_useDndContext_useDraggable_useDroppable_dnd_kit_core__WEBPACK_IMPORTED_MODULE_1__.KeyboardCode.Left\n];\nconst sortableKeyboardCoordinates = (event, _ref)=>{\n    let { context: { active, collisionRect, droppableRects, droppableContainers, over, scrollableAncestors } } = _ref;\n    if (directions.includes(event.code)) {\n        event.preventDefault();\n        if (!active || !collisionRect) {\n            return;\n        }\n        const filteredContainers = [];\n        droppableContainers.getEnabled().forEach((entry)=>{\n            if (!entry || entry != null && entry.disabled) {\n                return;\n            }\n            const rect = droppableRects.get(entry.id);\n            if (!rect) {\n                return;\n            }\n            switch(event.code){\n                case _barrel_optimize_names_KeyboardCode_closestCorners_getClientRect_getFirstCollision_getScrollableAncestors_useDndContext_useDraggable_useDroppable_dnd_kit_core__WEBPACK_IMPORTED_MODULE_1__.KeyboardCode.Down:\n                    if (collisionRect.top < rect.top) {\n                        filteredContainers.push(entry);\n                    }\n                    break;\n                case _barrel_optimize_names_KeyboardCode_closestCorners_getClientRect_getFirstCollision_getScrollableAncestors_useDndContext_useDraggable_useDroppable_dnd_kit_core__WEBPACK_IMPORTED_MODULE_1__.KeyboardCode.Up:\n                    if (collisionRect.top > rect.top) {\n                        filteredContainers.push(entry);\n                    }\n                    break;\n                case _barrel_optimize_names_KeyboardCode_closestCorners_getClientRect_getFirstCollision_getScrollableAncestors_useDndContext_useDraggable_useDroppable_dnd_kit_core__WEBPACK_IMPORTED_MODULE_1__.KeyboardCode.Left:\n                    if (collisionRect.left > rect.left) {\n                        filteredContainers.push(entry);\n                    }\n                    break;\n                case _barrel_optimize_names_KeyboardCode_closestCorners_getClientRect_getFirstCollision_getScrollableAncestors_useDndContext_useDraggable_useDroppable_dnd_kit_core__WEBPACK_IMPORTED_MODULE_1__.KeyboardCode.Right:\n                    if (collisionRect.left < rect.left) {\n                        filteredContainers.push(entry);\n                    }\n                    break;\n            }\n        });\n        const collisions = (0,_barrel_optimize_names_KeyboardCode_closestCorners_getClientRect_getFirstCollision_getScrollableAncestors_useDndContext_useDraggable_useDroppable_dnd_kit_core__WEBPACK_IMPORTED_MODULE_1__.closestCorners)({\n            active,\n            collisionRect: collisionRect,\n            droppableRects,\n            droppableContainers: filteredContainers,\n            pointerCoordinates: null\n        });\n        let closestId = (0,_barrel_optimize_names_KeyboardCode_closestCorners_getClientRect_getFirstCollision_getScrollableAncestors_useDndContext_useDraggable_useDroppable_dnd_kit_core__WEBPACK_IMPORTED_MODULE_1__.getFirstCollision)(collisions, 'id');\n        if (closestId === (over == null ? void 0 : over.id) && collisions.length > 1) {\n            closestId = collisions[1].id;\n        }\n        if (closestId != null) {\n            const activeDroppable = droppableContainers.get(active.id);\n            const newDroppable = droppableContainers.get(closestId);\n            const newRect = newDroppable ? droppableRects.get(newDroppable.id) : null;\n            const newNode = newDroppable == null ? void 0 : newDroppable.node.current;\n            if (newNode && newRect && activeDroppable && newDroppable) {\n                const newScrollAncestors = (0,_barrel_optimize_names_KeyboardCode_closestCorners_getClientRect_getFirstCollision_getScrollableAncestors_useDndContext_useDraggable_useDroppable_dnd_kit_core__WEBPACK_IMPORTED_MODULE_1__.getScrollableAncestors)(newNode);\n                const hasDifferentScrollAncestors = newScrollAncestors.some((element, index)=>scrollableAncestors[index] !== element);\n                const hasSameContainer = isSameContainer(activeDroppable, newDroppable);\n                const isAfterActive = isAfter(activeDroppable, newDroppable);\n                const offset = hasDifferentScrollAncestors || !hasSameContainer ? {\n                    x: 0,\n                    y: 0\n                } : {\n                    x: isAfterActive ? collisionRect.width - newRect.width : 0,\n                    y: isAfterActive ? collisionRect.height - newRect.height : 0\n                };\n                const rectCoordinates = {\n                    x: newRect.left,\n                    y: newRect.top\n                };\n                const newCoordinates = offset.x && offset.y ? rectCoordinates : (0,_barrel_optimize_names_CSS_isKeyboardEvent_subtract_useCombinedRefs_useIsomorphicLayoutEffect_useUniqueId_dnd_kit_utilities__WEBPACK_IMPORTED_MODULE_2__.subtract)(rectCoordinates, offset);\n                return newCoordinates;\n            }\n        }\n    }\n    return undefined;\n};\nfunction isSameContainer(a, b) {\n    if (!hasSortableData(a) || !hasSortableData(b)) {\n        return false;\n    }\n    return a.data.current.sortable.containerId === b.data.current.sortable.containerId;\n}\nfunction isAfter(a, b) {\n    if (!hasSortableData(a) || !hasSortableData(b)) {\n        return false;\n    }\n    if (!isSameContainer(a, b)) {\n        return false;\n    }\n    return a.data.current.sortable.index < b.data.current.sortable.index;\n}\n //# sourceMappingURL=sortable.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@dnd-kit/sortable/dist/sortable.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@dnd-kit/utilities/dist/utilities.esm.js":
/*!***************************************************************!*\
  !*** ./node_modules/@dnd-kit/utilities/dist/utilities.esm.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CSS: () => (/* binding */ CSS),\n/* harmony export */   add: () => (/* binding */ add),\n/* harmony export */   canUseDOM: () => (/* binding */ canUseDOM),\n/* harmony export */   findFirstFocusableNode: () => (/* binding */ findFirstFocusableNode),\n/* harmony export */   getEventCoordinates: () => (/* binding */ getEventCoordinates),\n/* harmony export */   getOwnerDocument: () => (/* binding */ getOwnerDocument),\n/* harmony export */   getWindow: () => (/* binding */ getWindow),\n/* harmony export */   hasViewportRelativeCoordinates: () => (/* binding */ hasViewportRelativeCoordinates),\n/* harmony export */   isDocument: () => (/* binding */ isDocument),\n/* harmony export */   isHTMLElement: () => (/* binding */ isHTMLElement),\n/* harmony export */   isKeyboardEvent: () => (/* binding */ isKeyboardEvent),\n/* harmony export */   isNode: () => (/* binding */ isNode),\n/* harmony export */   isSVGElement: () => (/* binding */ isSVGElement),\n/* harmony export */   isTouchEvent: () => (/* binding */ isTouchEvent),\n/* harmony export */   isWindow: () => (/* binding */ isWindow),\n/* harmony export */   subtract: () => (/* binding */ subtract),\n/* harmony export */   useCombinedRefs: () => (/* binding */ useCombinedRefs),\n/* harmony export */   useEvent: () => (/* binding */ useEvent),\n/* harmony export */   useInterval: () => (/* binding */ useInterval),\n/* harmony export */   useIsomorphicLayoutEffect: () => (/* binding */ useIsomorphicLayoutEffect),\n/* harmony export */   useLatestValue: () => (/* binding */ useLatestValue),\n/* harmony export */   useLazyMemo: () => (/* binding */ useLazyMemo),\n/* harmony export */   useNodeRef: () => (/* binding */ useNodeRef),\n/* harmony export */   usePrevious: () => (/* binding */ usePrevious),\n/* harmony export */   useUniqueId: () => (/* binding */ useUniqueId)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\nfunction useCombinedRefs() {\n    for(var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++){\n        refs[_key] = arguments[_key];\n    }\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"useCombinedRefs.useMemo\": ()=>({\n                \"useCombinedRefs.useMemo\": (node)=>{\n                    refs.forEach({\n                        \"useCombinedRefs.useMemo\": (ref)=>ref(node)\n                    }[\"useCombinedRefs.useMemo\"]);\n                }\n            })[\"useCombinedRefs.useMemo\"]\n    }[\"useCombinedRefs.useMemo\"], refs);\n}\n// https://github.com/facebook/react/blob/master/packages/shared/ExecutionEnvironment.js\nconst canUseDOM =  false && 0;\nfunction isWindow(element) {\n    const elementString = Object.prototype.toString.call(element);\n    return elementString === '[object Window]' || // In Electron context the Window object serializes to [object global]\n    elementString === '[object global]';\n}\nfunction isNode(node) {\n    return 'nodeType' in node;\n}\nfunction getWindow(target) {\n    var _target$ownerDocument, _target$ownerDocument2;\n    if (!target) {\n        return window;\n    }\n    if (isWindow(target)) {\n        return target;\n    }\n    if (!isNode(target)) {\n        return window;\n    }\n    return (_target$ownerDocument = (_target$ownerDocument2 = target.ownerDocument) == null ? void 0 : _target$ownerDocument2.defaultView) != null ? _target$ownerDocument : window;\n}\nfunction isDocument(node) {\n    const { Document } = getWindow(node);\n    return node instanceof Document;\n}\nfunction isHTMLElement(node) {\n    if (isWindow(node)) {\n        return false;\n    }\n    return node instanceof getWindow(node).HTMLElement;\n}\nfunction isSVGElement(node) {\n    return node instanceof getWindow(node).SVGElement;\n}\nfunction getOwnerDocument(target) {\n    if (!target) {\n        return document;\n    }\n    if (isWindow(target)) {\n        return target.document;\n    }\n    if (!isNode(target)) {\n        return document;\n    }\n    if (isDocument(target)) {\n        return target;\n    }\n    if (isHTMLElement(target) || isSVGElement(target)) {\n        return target.ownerDocument;\n    }\n    return document;\n}\n/**\r\n * A hook that resolves to useEffect on the server and useLayoutEffect on the client\r\n * @param callback {function} Callback function that is invoked when the dependencies of the hook change\r\n */ const useIsomorphicLayoutEffect = canUseDOM ? react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\nfunction useEvent(handler) {\n    const handlerRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(handler);\n    useIsomorphicLayoutEffect({\n        \"useEvent.useIsomorphicLayoutEffect\": ()=>{\n            handlerRef.current = handler;\n        }\n    }[\"useEvent.useIsomorphicLayoutEffect\"]);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useEvent.useCallback\": function() {\n            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                args[_key] = arguments[_key];\n            }\n            return handlerRef.current == null ? void 0 : handlerRef.current(...args);\n        }\n    }[\"useEvent.useCallback\"], []);\n}\nfunction useInterval() {\n    const intervalRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const set = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useInterval.useCallback[set]\": (listener, duration)=>{\n            intervalRef.current = setInterval(listener, duration);\n        }\n    }[\"useInterval.useCallback[set]\"], []);\n    const clear = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useInterval.useCallback[clear]\": ()=>{\n            if (intervalRef.current !== null) {\n                clearInterval(intervalRef.current);\n                intervalRef.current = null;\n            }\n        }\n    }[\"useInterval.useCallback[clear]\"], []);\n    return [\n        set,\n        clear\n    ];\n}\nfunction useLatestValue(value, dependencies) {\n    if (dependencies === void 0) {\n        dependencies = [\n            value\n        ];\n    }\n    const valueRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(value);\n    useIsomorphicLayoutEffect({\n        \"useLatestValue.useIsomorphicLayoutEffect\": ()=>{\n            if (valueRef.current !== value) {\n                valueRef.current = value;\n            }\n        }\n    }[\"useLatestValue.useIsomorphicLayoutEffect\"], dependencies);\n    return valueRef;\n}\nfunction useLazyMemo(callback, dependencies) {\n    const valueRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"useLazyMemo.useMemo\": ()=>{\n            const newValue = callback(valueRef.current);\n            valueRef.current = newValue;\n            return newValue;\n        }\n    }[\"useLazyMemo.useMemo\"], [\n        ...dependencies\n    ]);\n}\nfunction useNodeRef(onChange) {\n    const onChangeHandler = useEvent(onChange);\n    const node = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const setNodeRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useNodeRef.useCallback[setNodeRef]\": (element)=>{\n            if (element !== node.current) {\n                onChangeHandler == null ? void 0 : onChangeHandler(element, node.current);\n            }\n            node.current = element;\n        }\n    }[\"useNodeRef.useCallback[setNodeRef]\"], []);\n    return [\n        node,\n        setNodeRef\n    ];\n}\nfunction usePrevious(value) {\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"usePrevious.useEffect\": ()=>{\n            ref.current = value;\n        }\n    }[\"usePrevious.useEffect\"], [\n        value\n    ]);\n    return ref.current;\n}\nlet ids = {};\nfunction useUniqueId(prefix, value) {\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"useUniqueId.useMemo\": ()=>{\n            if (value) {\n                return value;\n            }\n            const id = ids[prefix] == null ? 0 : ids[prefix] + 1;\n            ids[prefix] = id;\n            return prefix + \"-\" + id;\n        }\n    }[\"useUniqueId.useMemo\"], [\n        prefix,\n        value\n    ]);\n}\nfunction createAdjustmentFn(modifier) {\n    return function(object) {\n        for(var _len = arguments.length, adjustments = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n            adjustments[_key - 1] = arguments[_key];\n        }\n        return adjustments.reduce((accumulator, adjustment)=>{\n            const entries = Object.entries(adjustment);\n            for (const [key, valueAdjustment] of entries){\n                const value = accumulator[key];\n                if (value != null) {\n                    accumulator[key] = value + modifier * valueAdjustment;\n                }\n            }\n            return accumulator;\n        }, {\n            ...object\n        });\n    };\n}\nconst add = /*#__PURE__*/ createAdjustmentFn(1);\nconst subtract = /*#__PURE__*/ createAdjustmentFn(-1);\nfunction hasViewportRelativeCoordinates(event) {\n    return 'clientX' in event && 'clientY' in event;\n}\nfunction isKeyboardEvent(event) {\n    if (!event) {\n        return false;\n    }\n    const { KeyboardEvent } = getWindow(event.target);\n    return KeyboardEvent && event instanceof KeyboardEvent;\n}\nfunction isTouchEvent(event) {\n    if (!event) {\n        return false;\n    }\n    const { TouchEvent } = getWindow(event.target);\n    return TouchEvent && event instanceof TouchEvent;\n}\n/**\r\n * Returns the normalized x and y coordinates for mouse and touch events.\r\n */ function getEventCoordinates(event) {\n    if (isTouchEvent(event)) {\n        if (event.touches && event.touches.length) {\n            const { clientX: x, clientY: y } = event.touches[0];\n            return {\n                x,\n                y\n            };\n        } else if (event.changedTouches && event.changedTouches.length) {\n            const { clientX: x, clientY: y } = event.changedTouches[0];\n            return {\n                x,\n                y\n            };\n        }\n    }\n    if (hasViewportRelativeCoordinates(event)) {\n        return {\n            x: event.clientX,\n            y: event.clientY\n        };\n    }\n    return null;\n}\nconst CSS = /*#__PURE__*/ Object.freeze({\n    Translate: {\n        toString (transform) {\n            if (!transform) {\n                return;\n            }\n            const { x, y } = transform;\n            return \"translate3d(\" + (x ? Math.round(x) : 0) + \"px, \" + (y ? Math.round(y) : 0) + \"px, 0)\";\n        }\n    },\n    Scale: {\n        toString (transform) {\n            if (!transform) {\n                return;\n            }\n            const { scaleX, scaleY } = transform;\n            return \"scaleX(\" + scaleX + \") scaleY(\" + scaleY + \")\";\n        }\n    },\n    Transform: {\n        toString (transform) {\n            if (!transform) {\n                return;\n            }\n            return [\n                CSS.Translate.toString(transform),\n                CSS.Scale.toString(transform)\n            ].join(' ');\n        }\n    },\n    Transition: {\n        toString (_ref) {\n            let { property, duration, easing } = _ref;\n            return property + \" \" + duration + \"ms \" + easing;\n        }\n    }\n});\nconst SELECTOR = 'a,frame,iframe,input:not([type=hidden]):not(:disabled),select:not(:disabled),textarea:not(:disabled),button:not(:disabled),*[tabindex]';\nfunction findFirstFocusableNode(element) {\n    if (element.matches(SELECTOR)) {\n        return element;\n    }\n    return element.querySelector(SELECTOR);\n}\n //# sourceMappingURL=utilities.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@dnd-kit/utilities/dist/utilities.esm.js\n");

/***/ })

};
;